[tool:pytest]
# ðŸ§ª SGPT Backend Test Configuration

# Minimum pytest version
minversion = 7.0

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Command line options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=app
    --cov-branch
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-fail-under=80
    --durations=10
    --maxfail=5

# Markers for test categorization
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (API endpoints)
    e2e: End-to-end tests (complete workflows)
    slow: Slow tests (may take >1 second)
    auth: Authentication related tests
    campaigns: Campaign management tests
    email: Email operations tests
    admin: Admin functionality tests
    ai: AI features tests
    analytics: Analytics tests
    smtp: SMTP related tests
    imap: IMAP related tests
    security: Security tests
    performance: Performance tests
    database: Database tests
    redis: Redis cache tests
    websocket: WebSocket tests
    external: Tests requiring external services

# Async test support
asyncio_mode = auto

# Test output
console_output_style = progress

# Log capture
log_capture = true
log_level = INFO
log_date_format = %Y-%m-%d %H:%M:%S
log_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s

# Warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Timeout for tests (prevent hanging)
timeout = 300
timeout_method = thread

# Coverage settings
[coverage:run]
source = app
omit = 
    */tests/*
    */venv/*
    */migrations/*
    */__pycache__/*
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod