"""migrate_session_to_workspace_api_endpoints

Revision ID: 27dc46711a3a
Revises: 20250813_add_thread_pools
Create Date: 2025-08-15 14:36:47.070204

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import models.base

# revision identifiers, used by Alembic.
revision: str = '27dc46711a3a'
down_revision: Union[str, None] = '20250813_add_thread_pools'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('login_activity',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('fingerprint', sa.String(length=255), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('device_type', sa.String(length=50), nullable=True),
    sa.Column('browser', sa.String(length=100), nullable=True),
    sa.Column('os', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # Drop dependent tables first to avoid foreign key constraint errors
    op.drop_table('payment_requests')
    op.drop_table('vip_customers')
    op.drop_table('hd_wallet_addresses')
    op.drop_table('bitcoin_wallets')
    op.drop_table('xpub_validations')
    op.drop_index('ix_todos_completed', table_name='todos')
    op.drop_index('ix_todos_id', table_name='todos')
    op.drop_index('ix_todos_title', table_name='todos')
    op.drop_index('ix_todos_user_id', table_name='todos')
    op.drop_table('todos')
    op.add_column('campaigns', sa.Column('thread_pool_id', models.base.GUID(), nullable=True))
    op.create_index('idx_campaigns_thread_pool_id', 'campaigns', ['thread_pool_id'], unique=False)
    op.create_foreign_key(None, 'campaigns', 'thread_pools', ['thread_pool_id'], ['id'])
    op.add_column('imap_accounts', sa.Column('thread_pool_id', models.base.GUID(), nullable=True))
    op.create_foreign_key(None, 'imap_accounts', 'thread_pools', ['thread_pool_id'], ['id'])
    op.add_column('smtp_accounts', sa.Column('thread_pool_id', models.base.GUID(), nullable=True))
    op.create_index('idx_smtp_thread_pool_id', 'smtp_accounts', ['thread_pool_id'], unique=False)
    op.create_foreign_key(None, 'smtp_accounts', 'thread_pools', ['thread_pool_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'smtp_accounts', type_='foreignkey')
    op.drop_index('idx_smtp_thread_pool_id', table_name='smtp_accounts')
    op.drop_column('smtp_accounts', 'thread_pool_id')
    op.drop_constraint(None, 'imap_accounts', type_='foreignkey')
    op.drop_column('imap_accounts', 'thread_pool_id')
    op.drop_constraint(None, 'campaigns', type_='foreignkey')
    op.drop_index('idx_campaigns_thread_pool_id', table_name='campaigns')
    op.drop_column('campaigns', 'thread_pool_id')
    op.create_table('vip_customers',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('current_address_id', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('current_child_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_rotation', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('rotation_expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('total_payments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_paid_btc', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['current_address_id'], ['hd_wallet_addresses.id'], name='vip_customers_current_address_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='vip_customers_pkey'),
    sa.UniqueConstraint('customer_id', name='vip_customers_customer_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('payment_requests',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('payment_request_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('plan_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('plan_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('wallet_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('address_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('btc_address', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('amount_btc', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('amount_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('amount_received_btc', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('confirmations', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('required_confirmations', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('confirmed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('qr_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('transaction_ids', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('blockchain_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['address_id'], ['hd_wallet_addresses.id'], name='payment_requests_address_id_fkey'),
    sa.ForeignKeyConstraint(['wallet_id'], ['bitcoin_wallets.id'], name='payment_requests_wallet_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='payment_requests_pkey'),
    sa.UniqueConstraint('payment_request_id', name='payment_requests_payment_request_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('todos',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('completed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='todos_pkey')
    )
    op.create_index('ix_todos_user_id', 'todos', ['user_id'], unique=False)
    op.create_index('ix_todos_title', 'todos', ['title'], unique=False)
    op.create_index('ix_todos_id', 'todos', ['id'], unique=False)
    op.create_index('ix_todos_completed', 'todos', ['completed'], unique=False)
    op.create_table('xpub_validations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('xpub_fingerprint', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('expected_signature', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('last_validated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_valid', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('validation_failures', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='xpub_validations_pkey')
    )
    op.create_table('bitcoin_wallets',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('wallet_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('network', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('encrypted_xpub', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('xpub_fingerprint', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('xpub_preview', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_used_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_addresses_generated', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_received_btc', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='bitcoin_wallets_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('hd_wallet_addresses',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('wallet_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('derivation_path', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('child_index', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_used', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('used_for_customer_id', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('first_used_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_used_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('total_received_btc', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('payment_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rotation_expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['wallet_id'], ['bitcoin_wallets.id'], name='hd_wallet_addresses_wallet_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='hd_wallet_addresses_pkey'),
    sa.UniqueConstraint('address', name='hd_wallet_addresses_address_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_table('login_activity')
    # ### end Alembic commands ###
