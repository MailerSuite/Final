"""add_webhook_tables

Revision ID: edda0b5f0d73
Revises: 47bb1612e818
Create Date: 2025-07-30 22:28:08.191865

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'edda0b5f0d73'
down_revision: Union[str, None] = '47bb1612e818'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('webhook_endpoints',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('url', sa.String(length=500), nullable=False),
    sa.Column('events', sa.JSON(), nullable=False),
    sa.Column('secret', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('timeout_seconds', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('total_deliveries', sa.Integer(), nullable=True),
    sa.Column('successful_deliveries', sa.Integer(), nullable=True),
    sa.Column('failed_deliveries', sa.Integer(), nullable=True),
    sa.Column('last_delivery_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('average_delivery_time', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT 1 FROM pg_indexes WHERE indexname = 'idx_webhook_created_at'
            ) THEN
                CREATE INDEX idx_webhook_created_at ON webhook_endpoints(created_at);
            END IF;
        END $$;
    """)
    # op.create_index('idx_webhook_events', 'webhook_endpoints', ['events'], unique=False, postgresql_using='gin', postgresql_ops={'events': 'jsonb_path_ops'})
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_webhook_last_delivery') THEN
                CREATE INDEX idx_webhook_last_delivery ON webhook_endpoints(last_delivery_at);
            END IF;
            IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_webhook_user_active') THEN
                CREATE INDEX idx_webhook_user_active ON webhook_endpoints(user_id, is_active);
            END IF;
        END $$;
    """)
    op.create_index(op.f('ix_webhook_endpoints_id'), 'webhook_endpoints', ['id'], unique=False)
    op.create_index(op.f('ix_webhook_endpoints_user_id'), 'webhook_endpoints', ['user_id'], unique=False)
    op.create_table('webhook_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=100), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('data', sa.JSON(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('is_processed', sa.Boolean(), nullable=False),
    sa.Column('processing_started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_webhook_event_data', 'webhook_events', ['data'], unique=False, postgresql_using='gin', postgresql_ops={'data': 'jsonb_path_ops'})
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_webhook_event_processed') THEN
                CREATE INDEX idx_webhook_event_processed ON webhook_events(is_processed, timestamp);
            END IF;
            IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_webhook_event_type_timestamp') THEN
                CREATE INDEX idx_webhook_event_type_timestamp ON webhook_events(event_type, timestamp);
            END IF;
            IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_webhook_event_user') THEN
                CREATE INDEX idx_webhook_event_user ON webhook_events(user_id, timestamp);
            END IF;
        END $$;
    """)
    op.create_index(op.f('ix_webhook_events_event_type'), 'webhook_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_webhook_events_id'), 'webhook_events', ['id'], unique=False)
    op.create_index(op.f('ix_webhook_events_timestamp'), 'webhook_events', ['timestamp'], unique=False)
    op.create_index(op.f('ix_webhook_events_user_id'), 'webhook_events', ['user_id'], unique=False)
    op.create_table('webhook_deliveries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('webhook_id', sa.UUID(), nullable=False),
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('url', sa.String(length=500), nullable=False),
    sa.Column('status_code', sa.Integer(), nullable=True),
    sa.Column('response_body', sa.Text(), nullable=True),
    sa.Column('delivery_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('request_duration_ms', sa.Integer(), nullable=True),
    sa.Column('payload_size_bytes', sa.Integer(), nullable=True),
    sa.Column('response_size_bytes', sa.Integer(), nullable=True),
    sa.Column('is_successful', sa.Boolean(), nullable=False),
    sa.Column('next_retry_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['webhook_events.id'], ),
    sa.ForeignKeyConstraint(['webhook_id'], ['webhook_endpoints.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_webhook_delivery_event') THEN
                CREATE INDEX idx_webhook_delivery_event ON webhook_deliveries(event_id, created_at);
            END IF;
            IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_webhook_delivery_retry') THEN
                CREATE INDEX idx_webhook_delivery_retry ON webhook_deliveries(next_retry_at, retry_count);
            END IF;
            IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_webhook_delivery_status') THEN
                CREATE INDEX idx_webhook_delivery_status ON webhook_deliveries(is_successful, created_at);
            END IF;
            IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_webhook_delivery_status_code') THEN
                CREATE INDEX idx_webhook_delivery_status_code ON webhook_deliveries(status_code, created_at);
            END IF;
            IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_webhook_delivery_webhook') THEN
                CREATE INDEX idx_webhook_delivery_webhook ON webhook_deliveries(webhook_id, created_at);
            END IF;
        END $$;
    """)
    op.create_index(op.f('ix_webhook_deliveries_event_id'), 'webhook_deliveries', ['event_id'], unique=False)
    op.create_index(op.f('ix_webhook_deliveries_id'), 'webhook_deliveries', ['id'], unique=False)
    op.create_index(op.f('ix_webhook_deliveries_webhook_id'), 'webhook_deliveries', ['webhook_id'], unique=False)
    op.create_table('webhook_stats',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('webhook_id', sa.UUID(), nullable=True),
    sa.Column('period_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_end', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_type', sa.String(length=20), nullable=False),
    sa.Column('total_deliveries', sa.Integer(), nullable=False),
    sa.Column('successful_deliveries', sa.Integer(), nullable=False),
    sa.Column('failed_deliveries', sa.Integer(), nullable=False),
    sa.Column('average_delivery_time_ms', sa.Integer(), nullable=False),
    sa.Column('success_rate', sa.Integer(), nullable=False),
    sa.Column('error_counts', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['webhook_id'], ['webhook_endpoints.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_webhook_stats_period_type', 'webhook_stats', ['period_type', 'period_start'], unique=False)
    op.create_index('idx_webhook_stats_user_period', 'webhook_stats', ['user_id', 'period_start', 'period_end'], unique=False)
    op.create_index('idx_webhook_stats_webhook_period', 'webhook_stats', ['webhook_id', 'period_start', 'period_end'], unique=False)
    op.create_index(op.f('ix_webhook_stats_id'), 'webhook_stats', ['id'], unique=False)
    op.create_index(op.f('ix_webhook_stats_period_end'), 'webhook_stats', ['period_end'], unique=False)
    op.create_index(op.f('ix_webhook_stats_period_start'), 'webhook_stats', ['period_start'], unique=False)
    op.create_index(op.f('ix_webhook_stats_user_id'), 'webhook_stats', ['user_id'], unique=False)
    op.create_index(op.f('ix_webhook_stats_webhook_id'), 'webhook_stats', ['webhook_id'], unique=False)
    op.drop_index('idx_system_smtp_active', table_name='system_smtp_config')
    op.create_index(op.f('ix_system_smtp_config_id'), 'system_smtp_config', ['id'], unique=False)
    op.drop_index('idx_users_plan', table_name='users')
    op.create_index(op.f('ix_users_plan'), 'users', ['plan'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_plan'), table_name='users')
    op.create_index('idx_users_plan', 'users', ['plan'], unique=False)
    op.drop_index(op.f('ix_system_smtp_config_id'), table_name='system_smtp_config')
    op.create_index('idx_system_smtp_active', 'system_smtp_config', ['is_active'], unique=False)
    op.drop_index(op.f('ix_webhook_stats_webhook_id'), table_name='webhook_stats')
    op.drop_index(op.f('ix_webhook_stats_user_id'), table_name='webhook_stats')
    op.drop_index(op.f('ix_webhook_stats_period_start'), table_name='webhook_stats')
    op.drop_index(op.f('ix_webhook_stats_period_end'), table_name='webhook_stats')
    op.drop_index(op.f('ix_webhook_stats_id'), table_name='webhook_stats')
    op.drop_index('idx_webhook_stats_webhook_period', table_name='webhook_stats')
    op.drop_index('idx_webhook_stats_user_period', table_name='webhook_stats')
    op.drop_index('idx_webhook_stats_period_type', table_name='webhook_stats')
    op.drop_table('webhook_stats')
    op.drop_index(op.f('ix_webhook_deliveries_webhook_id'), table_name='webhook_deliveries')
    op.drop_index(op.f('ix_webhook_deliveries_id'), table_name='webhook_deliveries')
    op.drop_index(op.f('ix_webhook_deliveries_event_id'), table_name='webhook_deliveries')
    op.drop_index('idx_webhook_delivery_webhook', table_name='webhook_deliveries')
    op.drop_index('idx_webhook_delivery_status_code', table_name='webhook_deliveries')
    op.drop_index('idx_webhook_delivery_status', table_name='webhook_deliveries')
    op.drop_index('idx_webhook_delivery_retry', table_name='webhook_deliveries')
    op.drop_index('idx_webhook_delivery_event', table_name='webhook_deliveries')
    op.drop_table('webhook_deliveries')
    op.drop_index(op.f('ix_webhook_events_user_id'), table_name='webhook_events')
    op.drop_index(op.f('ix_webhook_events_timestamp'), table_name='webhook_events')
    op.drop_index(op.f('ix_webhook_events_id'), table_name='webhook_events')
    op.drop_index(op.f('ix_webhook_events_event_type'), table_name='webhook_events')
    op.drop_index('idx_webhook_event_user', table_name='webhook_events')
    op.drop_index('idx_webhook_event_type_timestamp', table_name='webhook_events')
    op.drop_index('idx_webhook_event_processed', table_name='webhook_events')
    op.drop_index('idx_webhook_event_data', table_name='webhook_events', postgresql_using='gin')
    op.drop_table('webhook_events')
    op.drop_index(op.f('ix_webhook_endpoints_user_id'), table_name='webhook_endpoints')
    op.drop_index(op.f('ix_webhook_endpoints_id'), table_name='webhook_endpoints')
    op.drop_index('idx_webhook_user_active', table_name='webhook_endpoints')
    op.drop_index('idx_webhook_last_delivery', table_name='webhook_endpoints')
    op.drop_index('idx_webhook_events', table_name='webhook_endpoints', postgresql_using='gin')
    op.drop_index('idx_webhook_created_at', table_name='webhook_endpoints')
    op.drop_table('webhook_endpoints')
    # ### end Alembic commands ###
