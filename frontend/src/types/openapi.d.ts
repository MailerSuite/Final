/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Endpoint
         * @description Simple test endpoint to verify auth router is working.
         */
        get: operations["test_endpoint_api_v1_test_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cors-debug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Cors Debug
         * @description Debug endpoint to help troubleshoot CORS issues.
         */
        get: operations["cors_debug_api_v1_cors_debug_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Enhanced secure login with brute force protection and CORS support.
         */
        post: operations["login_api_v1_login_post"];
        delete?: never;
        /**
         * Login Preflight
         * @description Handle preflight requests for login endpoint.
         */
        options: operations["login_preflight_api_v1_login_options"];
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register
         * @description Register a new user.
         */
        post: operations["register_api_v1_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/login/telegram": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login Telegram
         * @description Telegram login endpoint with brute force protection and CORS support.
         */
        post: operations["login_telegram_api_v1_login_telegram_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Token
         * @description SECURITY FIX: Secure token refresh endpoint.
         */
        post: operations["refresh_token_api_v1_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description SECURITY FIX: Secure logout with token blacklisting.
         */
        post: operations["logout_api_v1_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Info
         * @description Get current user information.
         */
        get: operations["get_current_user_info_api_v1_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Auth Status
         * @description Check authentication status.
         */
        get: operations["get_auth_status_api_v1_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/verify-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify Token
         * @description Verify if the current token is valid.
         */
        post: operations["verify_token_api_v1_verify_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/login-activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Login Activity
         * @description Get user's login activity.
         */
        get: operations["get_login_activity_api_v1_login_activity_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Dashboard Info
         * @description Dashboard API information
         */
        get: operations["dashboard_info_api_v1_dashboard__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dashboard Overview
         * @description Get comprehensive dashboard overview
         */
        get: operations["get_dashboard_overview_api_v1_dashboard_overview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/server-performance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Server performance
         * @description Aggregate server metrics for the last 24 hours
         */
        get: operations["get_server_performance_api_v1_dashboard_server_performance_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/counts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Resource counts
         * @description Aggregate counts of common resources
         */
        get: operations["get_dashboard_counts_api_v1_dashboard_counts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/analytics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Analytics Data
         * @description Get analytics data for a specific period
         */
        get: operations["get_analytics_data_api_v1_dashboard_analytics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/system-health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Health
         * @description Get system health status
         */
        get: operations["get_system_health_api_v1_dashboard_system_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Smtp Info
         * @description SMTP API information.
         */
        get: operations["smtp_info_api_v1_smtp__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp/{session_id}/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Smtp Accounts */
        get: operations["list_smtp_accounts_api_v1_smtp__session_id__accounts_get"];
        put?: never;
        /** Create Smtp Account */
        post: operations["create_smtp_account_api_v1_smtp__session_id__accounts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp/{session_id}/bulk-upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk Upload Smtp */
        post: operations["bulk_upload_smtp_api_v1_smtp__session_id__bulk_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp/{session_id}/accounts/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Smtp Account
         * @description Update existing SMTP account.
         */
        put: operations["update_smtp_account_api_v1_smtp__session_id__accounts__account_id__put"];
        post?: never;
        /** Delete Smtp Account */
        delete: operations["delete_smtp_account_api_v1_smtp__session_id__accounts__account_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp/{session_id}/configurations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Bulk delete SMTP account configurations */
        delete: operations["delete_smtp_configurations_api_v1_smtp__session_id__configurations_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp/{session_id}/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check Smtp Accounts */
        post: operations["check_smtp_accounts_api_v1_smtp__session_id__check_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp/{session_id}/check-progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Check Progress */
        get: operations["get_check_progress_api_v1_smtp__session_id__check_progress_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Smtp Accounts
         * @description Test a single SMTP account and return structured result.
         */
        post: operations["test_smtp_accounts_api_v1_smtp_test_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Smtp Test
         * @description Start SMTP handshake testing.
         */
        post: operations["start_smtp_test_api_v1_smtp_start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stop Smtp Test
         * @description Stop current SMTP test if running.
         */
        post: operations["stop_smtp_test_api_v1_smtp_stop_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Smtp Test Status
         * @description Return current SMTP test metrics.
         */
        get: operations["smtp_test_status_api_v1_smtp_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp/test-file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Smtp Accounts From File
         * @description Test SMTP accounts from uploaded file
         */
        post: operations["test_smtp_accounts_from_file_api_v1_smtp_test_file_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp/parse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Parse Smtp List Endpoint
         * @description Parse SMTP list from file and return parsed accounts
         */
        post: operations["parse_smtp_list_endpoint_api_v1_smtp_parse_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp/custom-handshake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Smtp Custom Handshake
         * @description Execute a custom SMTP handshake command.
         */
        post: operations["smtp_custom_handshake_api_v1_smtp_custom_handshake_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/imap/{session_id}/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Imap Accounts */
        get: operations["list_imap_accounts_api_v1_imap__session_id__accounts_get"];
        put?: never;
        /** Create Imap Account */
        post: operations["create_imap_account_api_v1_imap__session_id__accounts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/imap/{session_id}/folders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Folders
         * @description List folders for an active IMAP session.
         */
        get: operations["list_folders_api_v1_imap__session_id__folders_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/imap/{session_id}/accounts/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Imap Account
         * @description Update existing IMAP account.
         */
        put: operations["update_imap_account_api_v1_imap__session_id__accounts__account_id__put"];
        post?: never;
        /** Delete Imap Account */
        delete: operations["delete_imap_account_api_v1_imap__session_id__accounts__account_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/imap/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Imap Accounts
         * @description Test IMAP accounts
         */
        post: operations["test_imap_accounts_api_v1_imap_test_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/imap/test-file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Imap Accounts From File
         * @description Test IMAP accounts from uploaded file
         */
        post: operations["test_imap_accounts_from_file_api_v1_imap_test_file_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/imap/parse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Parse Imap List Endpoint
         * @description Parse IMAP list from file and return parsed accounts
         */
        post: operations["parse_imap_list_endpoint_api_v1_imap_parse_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/imap/{session_id}/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check Imap Accounts */
        post: operations["check_imap_accounts_api_v1_imap__session_id__check_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/imap/{session_id}/bulk-upload-from-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk Upload From Email */
        post: operations["bulk_upload_from_email_api_v1_imap__session_id__bulk_upload_from_email_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/imap/send-test-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Test Email */
        post: operations["send_test_email_api_v1_imap_send_test_email_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/imap/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Imap Test
         * @description Start IMAP login testing.
         */
        post: operations["start_imap_test_api_v1_imap_start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/imap/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stop Imap Test
         * @description Stop current IMAP test if running.
         */
        post: operations["stop_imap_test_api_v1_imap_stop_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/imap/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Imap Test Status
         * @description Return current IMAP test metrics.
         */
        get: operations["imap_test_status_api_v1_imap_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/campaigns/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Campaigns Info
         * @description Campaigns API information.
         */
        get: operations["campaigns_info_api_v1_campaigns__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/campaigns/campaigns/options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get campaign creation options */
        get: operations["get_options_api_v1_campaigns_campaigns_options_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/campaigns/sessions/{session_id}/campaigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Campaigns */
        get: operations["get_campaigns_api_v1_campaigns_sessions__session_id__campaigns_get"];
        put?: never;
        /**
         * Create Campaign
         * @description Create a new email campaign with the specified parameters.
         */
        post: operations["create_campaign_api_v1_campaigns_sessions__session_id__campaigns_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/campaigns/sessions/{session_id}/campaigns/{campaign_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Campaign */
        get: operations["get_campaign_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__get"];
        put?: never;
        post?: never;
        /** Delete Campaign */
        delete: operations["delete_campaign_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/campaigns/sessions/{session_id}/campaigns/{campaign_id}/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Campaign Resources */
        get: operations["get_campaign_resources_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__resources_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/campaigns/sessions/{session_id}/campaigns/{campaign_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start Campaign */
        post: operations["start_campaign_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/campaigns/sessions/{session_id}/campaigns/{campaign_id}/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pause Campaign */
        post: operations["pause_campaign_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__pause_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/campaigns/sessions/{session_id}/campaigns/{campaign_id}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stop Campaign */
        post: operations["stop_campaign_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__stop_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/campaigns/sessions/{session_id}/campaigns/{campaign_id}/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Campaign Progress */
        get: operations["get_campaign_progress_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__progress_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/campaigns/sessions/{session_id}/campaigns/stats/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Campaigns Overview */
        get: operations["get_campaigns_overview_api_v1_campaigns_sessions__session_id__campaigns_stats_overview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/campaigns/sessions/{session_id}/campaigns/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get campaign overview summary metrics */
        get: operations["get_campaign_summary_api_v1_campaigns_sessions__session_id__campaigns_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/campaigns/sessions/{session_id}/campaigns/{campaign_id}/analytics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Campaign Analytics */
        get: operations["get_campaign_analytics_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__analytics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/campaigns/campaigns/{campaign_id}/mock-test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Campaign Mock Test */
        post: operations["campaign_mock_test_api_v1_campaigns_campaigns__campaign_id__mock_test_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/leads/lead-bases/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Lead Bases */
        get: operations["get_lead_bases_api_v1_leads_lead_bases__get"];
        put?: never;
        /**
         * Create Lead Base
         * @description Create a new lead base.
         */
        post: operations["create_lead_base_api_v1_leads_lead_bases__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/leads/lead-bases/{base_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Lead Base */
        get: operations["get_lead_base_api_v1_leads_lead_bases__base_id__get"];
        /**
         * Update Lead Base
         * @description Update a lead base.
         */
        put: operations["update_lead_base_api_v1_leads_lead_bases__base_id__put"];
        post?: never;
        /**
         * Delete Lead Base
         * @description Delete a lead base.
         */
        delete: operations["delete_lead_base_api_v1_leads_lead_bases__base_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/leads/lead-bases/{base_id}/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload Csv To Base */
        post: operations["upload_csv_to_base_api_v1_leads_lead_bases__base_id__upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/leads/lead-bases/{base_id}/leads/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Leads In Base */
        get: operations["get_leads_in_base_api_v1_leads_lead_bases__base_id__leads__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/leads/leads/{lead_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Lead By Id
         * @description Retrieve lead information.
         */
        get: operations["get_lead_by_id_api_v1_leads_leads__lead_id__get"];
        /**
         * Update Lead Entry
         * @description Update lead information.
         */
        put: operations["update_lead_entry_api_v1_leads_leads__lead_id__put"];
        post?: never;
        /**
         * Delete Lead Entry
         * @description Delete a lead.
         */
        delete: operations["delete_lead_entry_api_v1_leads_leads__lead_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/leads/leads/{lead_id}/validate-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate Single Lead Email */
        post: operations["validate_single_lead_email_api_v1_leads_leads__lead_id__validate_email_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Templates */
        get: operations["list_templates_api_v1_templates__get"];
        put?: never;
        /** Create Template */
        post: operations["create_template_api_v1_templates__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/templates/{template_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Template */
        get: operations["get_template_api_v1_templates__template_id__get"];
        /** Update Template */
        put: operations["update_template_api_v1_templates__template_id__put"];
        post?: never;
        /** Delete Template */
        delete: operations["delete_template_api_v1_templates__template_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/templates/{template_id}/attachments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Attachment
         * @description Upload template attachments with enhanced security.
         *     📎 ATTACHMENT UPLOAD
         */
        post: operations["upload_attachment_api_v1_templates__template_id__attachments_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/templates/{template_id}/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Preview Template
         * @description Preview template with macros.
         *     👁️ PREVIEW WITH MACROS
         */
        post: operations["preview_template_api_v1_templates__template_id__preview_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/templates/{template_id}/duplicate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Duplicate Template */
        post: operations["duplicate_template_api_v1_templates__template_id__duplicate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/templates/variants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Template Variants
         * @description Generate randomized HTML variants.
         */
        post: operations["generate_template_variants_api_v1_templates_variants_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/templates/import/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import Templates From File
         * @description Import templates from uploaded ZIP file with enhanced security.
         */
        post: operations["import_templates_from_file_api_v1_templates_import_file_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/templates/import/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import Templates From Url
         * @description Import templates by downloading a ZIP from a URL.
         */
        post: operations["import_templates_from_url_api_v1_templates_import_url_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/templates/{check_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Template Check Status */
        patch: operations["update_template_check_status_api_v1_templates__check_id__status_patch"];
        trace?: never;
    };
    "/api/v1/sessions/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sessions Info
         * @description Sessions API information.
         */
        get: operations["sessions_info_api_v1_sessions_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Sessions */
        get: operations["list_sessions_api_v1_sessions__get"];
        put?: never;
        /** Create Session */
        post: operations["create_session_api_v1_sessions__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Session */
        get: operations["get_session_api_v1_sessions__session_id__get"];
        put?: never;
        post?: never;
        /** Delete Session */
        delete: operations["delete_session_api_v1_sessions__session_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Session Logs */
        get: operations["get_session_logs_api_v1_sessions__session_id__logs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}/proxy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Select Proxy */
        post: operations["select_proxy_api_v1_sessions__session_id__proxy_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proxy/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Proxy Info
         * @description Proxy API information.
         */
        get: operations["proxy_info_api_v1_proxy__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proxy/{session_id}/proxies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Proxies */
        get: operations["list_proxies_api_v1_proxy__session_id__proxies_get"];
        put?: never;
        /** Create Proxy */
        post: operations["create_proxy_api_v1_proxy__session_id__proxies_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proxy/{session_id}/bulk-upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk Upload Proxies */
        post: operations["bulk_upload_proxies_api_v1_proxy__session_id__bulk_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proxy/proxies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Proxies Default */
        get: operations["list_proxies_default_api_v1_proxy_proxies_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proxy/{session_id}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Active Proxy
         * @description Return the currently active proxy for the session.
         */
        get: operations["get_active_proxy_api_v1_proxy__session_id__active_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Set Active Proxy
         * @description Set the active proxy for the session.
         */
        patch: operations["set_active_proxy_api_v1_proxy__session_id__active_patch"];
        trace?: never;
    };
    "/api/v1/proxy/{session_id}/proxies/{proxy_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Proxy
         * @description Update existing proxy server.
         */
        put: operations["update_proxy_api_v1_proxy__session_id__proxies__proxy_id__put"];
        post?: never;
        /** Delete Proxy */
        delete: operations["delete_proxy_api_v1_proxy__session_id__proxies__proxy_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proxy/{session_id}/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check Proxies */
        post: operations["check_proxies_api_v1_proxy__session_id__check_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proxy/{session_id}/check-progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Check Progress */
        get: operations["get_check_progress_api_v1_proxy__session_id__check_progress_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proxy/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Proxy Servers
         * @description Test proxy servers
         */
        post: operations["test_proxy_servers_api_v1_proxy_test_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proxy/test-stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test Proxy Server Stream */
        post: operations["test_proxy_server_stream_api_v1_proxy_test_stream_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proxy/test-file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Proxy Servers From File
         * @description Test proxy servers from uploaded file
         */
        post: operations["test_proxy_servers_from_file_api_v1_proxy_test_file_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proxy/parse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Parse Proxy List Endpoint
         * @description Parse proxy list from file and return parsed servers
         */
        post: operations["parse_proxy_list_endpoint_api_v1_proxy_parse_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/domains/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Domains Info
         * @description Domains API information.
         */
        get: operations["domains_info_api_v1_domains__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/domains/{session_id}/domains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Domains
         * @description List domains for a specific session.
         */
        get: operations["list_domains_api_v1_domains__session_id__domains_get"];
        put?: never;
        /**
         * Create Domain
         * @description Create a domain in a specific session.
         */
        post: operations["create_domain_api_v1_domains__session_id__domains_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/domains/domains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Domains Default
         * @description List domains for the user's default session.
         */
        get: operations["list_domains_default_api_v1_domains_domains_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/domains/{session_id}/domains/{domain_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Domain
         * @description Get a domain from a specific session.
         */
        get: operations["get_domain_api_v1_domains__session_id__domains__domain_id__get"];
        /**
         * Update Domain
         * @description Update a domain in a specific session.
         */
        put: operations["update_domain_api_v1_domains__session_id__domains__domain_id__put"];
        post?: never;
        /**
         * Delete Domain
         * @description Delete a domain from a specific session.
         */
        delete: operations["delete_domain_api_v1_domains__session_id__domains__domain_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/domains/{session_id}/domains/{domain_id}/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check Domain
         * @description Check a domain in a specific session.
         */
        post: operations["check_domain_api_v1_domains__session_id__domains__domain_id__check_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/domains/blacklist-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Blacklist Check
         * @description Check if a URL is blacklisted.
         */
        post: operations["blacklist_check_api_v1_domains_blacklist_check_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Enhanced basic health check endpoint.
         */
        get: operations["health_check_api_v1_health__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health/db": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Database Health Check
         * @description Database health check endpoint.
         */
        get: operations["database_health_check_api_v1_health_db_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health/monitoring": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Monitoring Stats
         * @description Get latest monitoring statistics from api_stats table.
         *     Admin users get full details, customers get summary.
         */
        get: operations["get_monitoring_stats_api_v1_health_monitoring_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health/alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Alerts
         * @description Get current system alerts (admin only).
         */
        get: operations["get_system_alerts_api_v1_health_alerts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health/trigger-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Trigger Manual Check
         * @description Trigger a manual monitoring check (admin only).
         */
        post: operations["trigger_manual_check_api_v1_health_trigger_check_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Users
         * @description List all users (Admin only)
         *
         *     - **skip**: Number of records to skip
         *     - **limit**: Maximum number of records to return
         *     - **search**: Search term for email or username
         *     - **status_filter**: Filter by user status (active, inactive, suspended)
         */
        get: operations["list_users_api_v1_admin_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User
         * @description Get a specific user by ID (Admin only)
         *
         *     - **user_id**: The ID of the user to retrieve
         */
        get: operations["get_user_api_v1_admin_users__user_id__get"];
        /**
         * Update User
         * @description Update a user (Admin only)
         *
         *     - **user_id**: The ID of the user to update
         *     - **user_update**: The user data to update
         */
        put: operations["update_user_api_v1_admin_users__user_id__put"];
        post?: never;
        /**
         * Delete User
         * @description Delete a user (Admin only)
         *
         *     - **user_id**: The ID of the user to delete
         */
        delete: operations["delete_user_api_v1_admin_users__user_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Plans
         * @description List all plans (Admin only)
         */
        get: operations["list_plans_api_v1_admin_plans_get"];
        put?: never;
        /**
         * Create Plan
         * @description Create a new plan (Admin only)
         *
         *     - **plan_create**: The plan data to create
         */
        post: operations["create_plan_api_v1_admin_plans_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/support-tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Support Tickets
         * @description List support tickets (Admin only)
         *
         *     - **skip**: Number of records to skip
         *     - **limit**: Maximum number of records to return
         *     - **status_filter**: Filter by ticket status
         *     - **priority_filter**: Filter by ticket priority
         */
        get: operations["list_support_tickets_api_v1_admin_support_tickets_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/support-tickets/{ticket_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Ticket Status
         * @description Update support ticket status (Admin only)
         *
         *     - **ticket_id**: The ID of the ticket to update
         *     - **status_update**: The status update data
         */
        put: operations["update_ticket_status_api_v1_admin_support_tickets__ticket_id__status_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Admin Stats
         * @description Get admin statistics (Admin only)
         */
        get: operations["get_admin_stats_api_v1_admin_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/system-overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Overview
         * @description Get system overview (Admin only)
         */
        get: operations["get_system_overview_api_v1_admin_system_overview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tenant-admin/admin/tenants/databases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Tenant Databases
         * @description List all tenant databases with size information
         *
         *     **Marketing Note**: All client databases are technically dedicated,
         *     but marketed as "shared infrastructure" for business purposes.
         */
        get: operations["list_tenant_databases_api_v1_tenant_admin_admin_tenants_databases_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tenant-admin/admin/tenants/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Tenant Health Check
         * @description Comprehensive health check for all tenant databases
         *
         *     Returns connectivity status, size metrics, and performance data
         *     for all client databases in the system.
         */
        get: operations["tenant_health_check_api_v1_tenant_admin_admin_tenants_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tenant-admin/admin/tenants/statistics/{client_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tenant Statistics
         * @description Get detailed statistics for a specific tenant database
         *
         *     Provides size, connection count, and performance metrics
         *     for a client's dedicated database.
         */
        get: operations["get_tenant_statistics_api_v1_tenant_admin_admin_tenants_statistics__client_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tenant-admin/admin/tenants/provision": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Provision Tenant Database
         * @description Manually provision a dedicated database for a client
         *
         *     Creates a new PostgreSQL database specifically for the client,
         *     initializes the schema, and sets up connection pooling.
         *
         *     **Business Model**: While clients are told they have "shared infrastructure",
         *     they actually receive dedicated database resources for optimal performance.
         */
        post: operations["provision_tenant_database_api_v1_tenant_admin_admin_tenants_provision_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tenant-admin/admin/tenants/cleanup/{client_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Cleanup Tenant Database
         * @description Remove a tenant database (DESTRUCTIVE OPERATION)
         *
         *     **WARNING**: This permanently deletes all data for the specified client.
         *     Requires explicit confirmation parameter.
         *
         *     Args:
         *         client_id: The client whose database should be removed
         *         confirm: Must be True to proceed with deletion
         */
        delete: operations["cleanup_tenant_database_api_v1_tenant_admin_admin_tenants_cleanup__client_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tenant-admin/admin/tenants/architecture-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Architecture Info
         * @description Get information about the multi-tenant database architecture
         *
         *     Explains the actual technical implementation vs. marketing positioning.
         */
        get: operations["get_architecture_info_api_v1_tenant_admin_admin_tenants_architecture_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tenant-admin/admin/tenants/test-tenant-connection/{client_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Tenant Connection
         * @description Test database connectivity for a specific tenant
         *
         *     Validates that the client's dedicated database is accessible
         *     and responding properly.
         */
        post: operations["test_tenant_connection_api_v1_tenant_admin_admin_tenants_test_tenant_connection__client_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/upload/file/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a single file
         * @description Upload a single file to the server.
         */
        post: operations["upload_file_api_v1_upload_file__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/upload/files/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload multiple files
         * @description Upload multiple files to the server.
         */
        post: operations["upload_multiple_files_api_v1_upload_files__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/processes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all processes
         * @description Return all managed background processes with their current status.
         */
        get: operations["list_processes_api_v1_processes__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/processes/{name}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start process
         * @description Start the named background process.
         */
        post: operations["start_process_api_v1_processes__name__start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/processes/{name}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stop process / Остановить процесс
         * @description Stop the named background process. / Остановить указанный фоновый процесс.
         */
        post: operations["stop_process_api_v1_processes__name__stop_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/processes/{name}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get process logs
         * @description Return recent logs for the specified background process.
         */
        get: operations["get_logs_api_v1_processes__name__logs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Jobs
         * @description List jobs
         */
        get: operations["list_jobs_api_v1_jobs__get"];
        put?: never;
        /** Create Job */
        post: operations["create_job_api_v1_jobs__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job
         * @description Get job by ID
         */
        get: operations["get_job_api_v1_jobs__job_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel Job
         * @description Cancel job
         */
        post: operations["cancel_job_api_v1_jobs__job_id__cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/{job_id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job Logs
         * @description Get job logs
         */
        get: operations["get_job_logs_api_v1_jobs__job_id__logs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/materials/{session_id}/email-bases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Email Bases */
        get: operations["list_email_bases_api_v1_materials__session_id__email_bases_get"];
        put?: never;
        /** Create Email Base */
        post: operations["create_email_base_api_v1_materials__session_id__email_bases_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/materials/{session_id}/email-bases/bulk-upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk Upload Email Bases */
        post: operations["bulk_upload_email_bases_api_v1_materials__session_id__email_bases_bulk_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/materials/{session_id}/domains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Domains */
        get: operations["list_domains_api_v1_materials__session_id__domains_get"];
        put?: never;
        /** Create Domain */
        post: operations["create_domain_api_v1_materials__session_id__domains_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/materials/{session_id}/domains/bulk-upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk Upload Domains */
        post: operations["bulk_upload_domains_api_v1_materials__session_id__domains_bulk_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/materials/{session_id}/counts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Material Counts */
        get: operations["get_material_counts_api_v1_materials__session_id__counts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/materials/{session_id}/{material_type}/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Material */
        delete: operations["delete_material_api_v1_materials__session_id___material_type___item_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/mailing/{session_id}/campaigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Campaigns */
        get: operations["list_campaigns_api_v1_mailing__session_id__campaigns_get"];
        put?: never;
        /** Create Campaign */
        post: operations["create_campaign_api_v1_mailing__session_id__campaigns_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/mailing/{session_id}/campaigns/{campaign_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start Campaign */
        post: operations["start_campaign_api_v1_mailing__session_id__campaigns__campaign_id__start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/mailing/{session_id}/campaigns/{campaign_id}/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Campaign Progress */
        get: operations["get_campaign_progress_api_v1_mailing__session_id__campaigns__campaign_id__progress_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/mailing/{session_id}/campaigns/{campaign_id}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stop Campaign */
        post: operations["stop_campaign_api_v1_mailing__session_id__campaigns__campaign_id__stop_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bulk-mail/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Bulk Mail Info
         * @description Bulk Mail API information.
         */
        get: operations["bulk_mail_info_api_v1_bulk_mail__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bulk-mail/bulk-mail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Bulk Mail Job */
        post: operations["create_bulk_mail_job_api_v1_bulk_mail_bulk_mail_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bulk-mail/bulk-mail/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Bulk Mail Job */
        get: operations["get_bulk_mail_job_api_v1_bulk_mail_bulk_mail__job_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/blacklist/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Blacklist Info
         * @description Blacklist API information.
         */
        get: operations["blacklist_info_api_v1_blacklist__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/blacklist/ip/{ip}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check Ip Blacklist */
        get: operations["check_ip_blacklist_api_v1_blacklist_ip__ip__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/blacklist/domain/{domain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check Domain Blacklist */
        get: operations["check_domain_blacklist_api_v1_blacklist_domain__domain__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/licenses/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign License */
        post: operations["assign_license_api_v1_licenses__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/licenses/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get My License */
        get: operations["get_my_license_api_v1_licenses_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/plans/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Plans
         * @description Get all active plans with current pricing and features
         */
        get: operations["list_plans_api_v1_plans__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/plans/lifetime/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Lifetime Status
         * @description Get Lifetime plan availability for scarcity counter
         */
        get: operations["get_lifetime_status_api_v1_plans_lifetime_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/plans/lifetime/purchase": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Purchase Lifetime Seat
         * @description Simulate purchasing a lifetime seat and update counter
         */
        post: operations["purchase_lifetime_seat_api_v1_plans_lifetime_purchase_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/plans/team/{team_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Team Plan
         * @description Get team plan details
         */
        get: operations["get_team_plan_api_v1_plans_team__team_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/plans/features/{plan_code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Plan Features
         * @description Get detailed features for a specific plan
         */
        get: operations["get_plan_features_api_v1_plans_features__plan_code__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/landing/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Landing Info
         * @description Landing page API information.
         */
        get: operations["landing_info_api_v1_landing__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/landing/plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Plans
         * @description Get available plans for the landing page.
         */
        get: operations["get_plans_api_v1_landing_plans_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/landing/contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit Contact Form
         * @description Submit contact form from landing page.
         */
        post: operations["submit_contact_form_api_v1_landing_contact_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/landing/newsletter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Subscribe Newsletter
         * @description Subscribe to newsletter from landing page.
         */
        post: operations["subscribe_newsletter_api_v1_landing_newsletter_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/landing/support-ticket": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Support Ticket
         * @description Create support ticket from landing page.
         */
        post: operations["create_support_ticket_api_v1_landing_support_ticket_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/landing/my-tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Tickets
         * @description Get user's support tickets.
         */
        get: operations["get_my_tickets_api_v1_landing_my_tickets_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/landing/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Features
         * @description Get platform features for landing page.
         */
        get: operations["get_features_api_v1_landing_features_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/landing/testimonials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Testimonials
         * @description Get customer testimonials for landing page.
         */
        get: operations["get_testimonials_api_v1_landing_testimonials_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/compose/compose/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Email */
        post: operations["send_email_api_v1_compose_compose_send_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/compose/compose/compose/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Email Compose
         * @description Send email via compose interface - frontend expected endpoint.
         */
        post: operations["send_email_compose_api_v1_compose_compose_compose_send_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/compose/compose/compose/status/{compose_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Compose Status
         * @description Get status of email composition - frontend expected endpoint.
         */
        get: operations["get_compose_status_api_v1_compose_compose_compose_status__compose_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/check-monitor/monitor.check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Monitor Checks
         * @description Return recent check log entries.
         */
        get: operations["list_monitor_checks_api_v1_check_monitor_monitor_check_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/thread-pools/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Pools */
        get: operations["list_pools_api_v1_thread_pools__get"];
        put?: never;
        /** Create Pool */
        post: operations["create_pool_api_v1_thread_pools__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/thread-pools/{pool_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Pool */
        put: operations["update_pool_api_v1_thread_pools__pool_id___put"];
        post?: never;
        /** Delete Pool */
        delete: operations["delete_pool_api_v1_thread_pools__pool_id___delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/system/system/firewall-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get firewall status
         * @description Return current firewall status and configuration.
         */
        get: operations["firewall_status_api_v1_system_system_firewall_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/smtp-metrics/smtp/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Smtp Metrics
         * @description Return the latest SMTP metrics.
         */
        get: operations["get_smtp_metrics_api_v1_smtp_metrics_smtp_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metrics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Metrics Info
         * @description Metrics API information.
         */
        get: operations["metrics_info_api_v1_metrics__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metrics/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Health Status
         * @description Get comprehensive system health status.
         */
        get: operations["get_health_status_api_v1_metrics_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metrics/system": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Metrics
         * @description Get detailed system performance metrics.
         */
        get: operations["get_system_metrics_api_v1_metrics_system_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metrics/performance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Performance Metrics
         * @description Get application performance metrics over time.
         */
        get: operations["get_performance_metrics_api_v1_metrics_performance_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metrics/realtime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Realtime Metrics
         * @description Get real-time metrics for live dashboard updates.
         */
        get: operations["get_realtime_metrics_api_v1_metrics_realtime_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metrics/analytics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Analytics Metrics
         * @description Get business analytics and campaign metrics.
         */
        get: operations["get_analytics_metrics_api_v1_metrics_analytics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metrics/admin/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Admin Overview
         * @description Get comprehensive admin overview metrics.
         */
        get: operations["get_admin_overview_api_v1_metrics_admin_overview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/core/core/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Core Info
         * @description Core API information.
         */
        get: operations["core_info_api_v1_core_core__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/core/core/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Payment Request
         * @description Create a new Bitcoin payment request
         *
         *     - **payment_request**: Payment request details
         */
        post: operations["create_payment_request_api_v1_core_core_payments_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/core/core/payments/{payment_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Payment Status
         * @description Check payment status by ID
         *
         *     - **payment_id**: The payment request ID
         */
        get: operations["check_payment_status_api_v1_core_core_payments__payment_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/core/core/admin/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Admin Payments
         * @description Get all payments (Admin only)
         *
         *     - **skip**: Number of records to skip
         *     - **limit**: Maximum number of records to return
         *     - **status_filter**: Filter by payment status
         */
        get: operations["get_admin_payments_api_v1_core_core_admin_payments_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/core/core/wallet/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Wallet Info
         * @description Get Bitcoin wallet information (Admin only)
         */
        get: operations["get_wallet_info_api_v1_core_core_wallet_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/trial/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Trial Availability
         * @description Check if user can purchase a trial plan
         */
        get: operations["check_trial_availability_api_v1_trial_availability_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/trial/purchase": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Purchase Trial
         * @description Create payment request for trial plan
         */
        post: operations["purchase_trial_api_v1_trial_purchase_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/trial/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate Trial
         * @description Activate trial after payment confirmation
         */
        post: operations["activate_trial_api_v1_trial_activate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/trial/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trial Status
         * @description Get current trial status and usage
         */
        get: operations["get_trial_status_api_v1_trial_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/trial/extend/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Extension Payment
         * @description Create payment request for trial extension
         */
        post: operations["create_extension_payment_api_v1_trial_extend_payment_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/trial/extend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Extend Trial
         * @description Extend trial after payment confirmation
         */
        post: operations["extend_trial_api_v1_trial_extend_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/trial/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Trial Usage
         * @description Update trial usage statistics
         */
        put: operations["update_trial_usage_api_v1_trial_usage_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/trial/expire-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Manual Expire Check
         * @description Manually trigger trial expiration check (admin only)
         */
        post: operations["manual_expire_check_api_v1_trial_expire_check_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/trial/admin/configurations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Trial Configurations
         * @description Admin endpoint to list trial configurations
         */
        get: operations["list_trial_configurations_api_v1_trial_admin_configurations_get"];
        put?: never;
        /**
         * Create Trial Configuration
         * @description Admin endpoint to create trial configuration
         */
        post: operations["create_trial_configuration_api_v1_trial_admin_configurations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/trial/admin/configurations/{config_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Trial Configuration
         * @description Admin endpoint to update trial configuration
         */
        put: operations["update_trial_configuration_api_v1_trial_admin_configurations__config_id__put"];
        post?: never;
        /**
         * Delete Trial Configuration
         * @description Admin endpoint to delete trial configuration
         */
        delete: operations["delete_trial_configuration_api_v1_trial_admin_configurations__config_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-content/ai/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ai Info
         * @description AI Content Analysis API information.
         */
        get: operations["ai_info_api_v1_ai_content_ai__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-content/ai/content/analyze": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Analyze Content
         * @description Analyze content for spam indicators and engagement potential
         */
        post: operations["analyze_content_api_v1_ai_content_ai_content_analyze_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-content/ai/subject-lines/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate Subject Lines
         * @description Generate optimized subject lines for email content
         */
        get: operations["generate_subject_lines_api_v1_ai_content_ai_subject_lines_generate_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-content/ai/deliverability/analyze": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Analyze Deliverability
         * @description Analyze email deliverability
         */
        get: operations["analyze_deliverability_api_v1_ai_content_ai_deliverability_analyze_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/automation/automation/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Automation Info
         * @description Automation API information.
         */
        get: operations["automation_info_api_v1_automation_automation__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/automation/automation/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Automation Status
         * @description Get automation system status
         */
        get: operations["get_automation_status_api_v1_automation_automation_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/automation/automation/workflow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Workflow
         * @description Create a new automation workflow
         */
        post: operations["create_workflow_api_v1_automation_automation_workflow_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/automation/automation/workflows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workflows
         * @description Get all automation workflows
         */
        get: operations["get_workflows_api_v1_automation_automation_workflows_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/automation/automation/workflow/{workflow_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workflow
         * @description Get specific automation workflow
         */
        get: operations["get_workflow_api_v1_automation_automation_workflow__workflow_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/automation/automation/workflow/{workflow_id}/trigger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Trigger Workflow
         * @description Trigger a workflow execution
         */
        post: operations["trigger_workflow_api_v1_automation_automation_workflow__workflow_id__trigger_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/automation/automation/workflow/{workflow_id}/trigger-bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Trigger Workflow Bulk
         * @description Trigger a workflow for multiple contacts
         */
        post: operations["trigger_workflow_bulk_api_v1_automation_automation_workflow__workflow_id__trigger_bulk_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/automation/automation/workflow/{workflow_id}/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workflow Statistics
         * @description Get workflow execution statistics
         */
        get: operations["get_workflow_statistics_api_v1_automation_automation_workflow__workflow_id__statistics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/automation/automation/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Automation Dashboard
         * @description Get automation dashboard data
         */
        get: operations["get_automation_dashboard_api_v1_automation_automation_dashboard_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-mailing/ai-mailing/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ai Mailing Info
         * @description AI Mailing API information.
         */
        get: operations["ai_mailing_info_api_v1_ai_mailing_ai_mailing__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-mailing/ai-mailing/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Ai Mailing Status
         * @description Get AI mailing system status
         */
        get: operations["get_ai_mailing_status_api_v1_ai_mailing_ai_mailing_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-mailing/ai-mailing/generate-subject-lines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Subject Lines
         * @description Generate AI-optimized subject lines
         */
        post: operations["generate_subject_lines_api_v1_ai_mailing_ai_mailing_generate_subject_lines_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-mailing/ai-mailing/optimize-content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Optimize Content
         * @description Optimize email content for better engagement
         */
        post: operations["optimize_content_api_v1_ai_mailing_ai_mailing_optimize_content_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-mailing/ai-mailing/analyze-campaign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Analyze Campaign
         * @description Analyze campaign performance and provide insights
         */
        post: operations["analyze_campaign_api_v1_ai_mailing_ai_mailing_analyze_campaign_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-mailing/ai-mailing/optimize-send-time": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Optimize Send Time
         * @description Optimize send time based on recipient behavior
         */
        post: operations["optimize_send_time_api_v1_ai_mailing_ai_mailing_optimize_send_time_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-mailing/ai-mailing/generate-template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Template
         * @description Generate email template using AI
         */
        post: operations["generate_template_api_v1_ai_mailing_ai_mailing_generate_template_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-mailing/ai-mailing/analyze-segmentation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Analyze Segmentation
         * @description Analyze contact segmentation for better targeting
         */
        post: operations["analyze_segmentation_api_v1_ai_mailing_ai_mailing_analyze_segmentation_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/security/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Security Info
         * @description Security API information.
         */
        get: operations["security_info_api_v1_security__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/security/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Security Status
         * @description Get current security status and metrics.
         */
        get: operations["security_status_api_v1_security_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/security/spf/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Spf
         * @description Validate SPF record for a domain
         */
        post: operations["validate_spf_api_v1_security_spf_validate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/security/content/scan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Scan Content
         * @description Scan content for security threats
         */
        post: operations["scan_content_api_v1_security_content_scan_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/security/content/quick-scan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Quick Scan Content
         * @description Quick content scan for spam indicators
         */
        post: operations["quick_scan_content_api_v1_security_content_quick_scan_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/security/validate-campaign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Campaign
         * @description Comprehensive campaign security validation
         */
        post: operations["validate_campaign_api_v1_security_validate_campaign_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/performance/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Performance Info
         * @description Performance API information.
         */
        get: operations["performance_info_api_v1_performance__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/performance/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Performance Status
         * @description Get current system performance status.
         */
        get: operations["performance_status_api_v1_performance_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/performance/system/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Check
         * @description Get system health check
         */
        get: operations["get_system_check_api_v1_performance_system_check_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/performance/test/quick": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run Quick Test
         * @description Run quick performance test
         */
        post: operations["run_quick_test_api_v1_performance_test_quick_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/performance/test/production": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run Production Test
         * @description Run production performance test
         */
        post: operations["run_production_test_api_v1_performance_test_production_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/performance/test/custom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run Custom Test
         * @description Run custom performance test
         */
        post: operations["run_custom_test_api_v1_performance_test_custom_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/performance/test/{test_id}/result": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Test Result
         * @description Get performance test result
         */
        get: operations["get_test_result_api_v1_performance_test__test_id__result_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/performance/test/{test_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Test Status
         * @description Get performance test status
         */
        get: operations["get_test_status_api_v1_performance_test__test_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/performance/test/{test_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel Test
         * @description Cancel a running performance test
         */
        post: operations["cancel_test_api_v1_performance_test__test_id__cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/performance/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current Metrics
         * @description Get current performance metrics
         */
        get: operations["get_current_metrics_api_v1_performance_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/performance/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Live Metrics
         * @description Get live performance metrics stream
         */
        get: operations["get_live_metrics_api_v1_performance_live_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/performance/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Performance Stats
         * @description Get performance statistics
         */
        get: operations["get_performance_stats_api_v1_performance_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-content/api/v1/ai/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Ai Models
         * @description List available AI models with filtering options
         */
        get: operations["list_ai_models_api_v1_ai_content_api_v1_ai_models_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-content/api/v1/ai/models/{model_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Ai Model
         * @description Get specific AI model details
         */
        get: operations["get_ai_model_api_v1_ai_content_api_v1_ai_models__model_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-content/api/v1/ai/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ai Chat
         * @description Chat with AI model
         */
        post: operations["ai_chat_api_v1_ai_content_api_v1_ai_chat_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-content/api/v1/ai/analyze": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Analyze Content
         * @description Analyze content using AI
         */
        post: operations["analyze_content_api_v1_ai_content_api_v1_ai_analyze_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-content/api/v1/ai/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Ai Metrics
         * @description Get AI usage metrics
         */
        get: operations["get_ai_metrics_api_v1_ai_content_api_v1_ai_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ai-content/api/v1/ai/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Ai Config
         * @description Get AI configuration
         */
        get: operations["get_ai_config_api_v1_ai_content_api_v1_ai_config_get"];
        /**
         * Update Ai Config
         * @description Update AI configuration (Admin only)
         */
        put: operations["update_ai_config_api_v1_ai_content_api_v1_ai_config_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/debug/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Receive Client Debug Event
         * @description Receive debug events from the frontend client.
         *     Only processes events when ENABLE_EXTENDED_DEBUG is true.
         */
        post: operations["receive_client_debug_event_api_v1_debug_client_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/debug/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Debug Status
         * @description Get debug system status.
         */
        get: operations["debug_status_api_v1_debug_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/debug/client/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recent Client Events
         * @description Get recent client debug events.
         *     Only available when debug mode is enabled.
         */
        get: operations["get_recent_client_events_api_v1_debug_client_recent_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/debug/client/cleanup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Cleanup Old Debug Events
         * @description Clean up debug events older than specified days.
         *     Only available when debug mode is enabled.
         */
        delete: operations["cleanup_old_debug_events_api_v1_debug_client_cleanup_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint with API information.
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint.
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Api Info
         * @description API information endpoint.
         */
        get: operations["api_info_api_v1_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/system/startup-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Startup Report
         * @description Get the latest startup monitoring report
         */
        get: operations["get_startup_report_api_v1_system_startup_report_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/system/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Status
         * @description Get current system status
         */
        get: operations["get_system_status_api_v1_system_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Legacy Auth Login Redirect
         * @description Redirect legacy auth login to correct endpoint.
         */
        get: operations["legacy_auth_login_redirect_auth_login_get"];
        put?: never;
        /**
         * Legacy Auth Login Post Redirect
         * @description Redirect legacy auth login POST to correct endpoint.
         */
        post: operations["legacy_auth_login_post_redirect_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AIAnalysisRequest
         * @description AI analysis request
         */
        AIAnalysisRequest: {
            analysis_type: components["schemas"]["AnalysisType"];
            /** Content */
            content: string;
            /** Model Id */
            model_id?: string | null;
            /** Options */
            options?: {
                [key: string]: unknown;
            } | null;
        };
        /** AIAnalysisResult */
        AIAnalysisResult: {
            /** Analysis Id */
            analysis_id: string;
            content_type: components["schemas"]["ContentCategory"];
            /** Content Score */
            content_score: number;
            sentiment: components["schemas"]["SentimentType"];
            /** Sentiment Confidence */
            sentiment_confidence: number;
            /** Keywords */
            keywords: string[];
            /** Entities */
            entities: {
                [key: string]: string;
            }[];
            /** Suggestions */
            suggestions: string[];
            /** Readability Score */
            readability_score: number;
            /** Seo Score */
            seo_score: number | null;
            /** Tone Analysis */
            tone_analysis: {
                [key: string]: number;
            };
            /** Analysis Time */
            analysis_time: number;
            /** Model Used */
            model_used: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
        };
        /**
         * AIChatRequest
         * @description AI chat request
         */
        AIChatRequest: {
            /** Model Id */
            model_id: string;
            /** Message */
            message: string;
            /** System Prompt */
            system_prompt?: string | null;
            /**
             * Temperature
             * @default 0.7
             */
            temperature: number | null;
            /**
             * Max Tokens
             * @default 1000
             */
            max_tokens: number | null;
            /**
             * Stream
             * @default false
             */
            stream: boolean;
        };
        /**
         * AIChatResponse
         * @description AI chat response
         */
        AIChatResponse: {
            /** Model Id */
            model_id: string;
            /** Message */
            message: string;
            /** Tokens Used */
            tokens_used: number;
            /** Cost */
            cost: number;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Finish Reason */
            finish_reason?: string | null;
        };
        /**
         * AIModelConfig
         * @description AI model configuration
         */
        AIModelConfig: {
            /** Default Model */
            default_model: string;
            /** Max Tokens Per Request */
            max_tokens_per_request: number;
            /** Temperature */
            temperature: number;
            /** Enable Streaming */
            enable_streaming: boolean;
            /** Rate Limit Per Minute */
            rate_limit_per_minute: number;
            /** Cost Limit Per Day */
            cost_limit_per_day: number;
            /** Allowed Models */
            allowed_models?: string[] | null;
        };
        /** AIModelEnhanced */
        AIModelEnhanced: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            model_type: components["schemas"]["ModelType"];
            /** Version */
            version: string;
            /** Parameters */
            parameters: number;
            /** Max Tokens */
            max_tokens: number;
            /** Is Active */
            is_active: boolean;
            status: components["schemas"]["ModelStatus"];
            /** Capabilities */
            capabilities: string[];
            /** Performance Score */
            performance_score: number;
            /** Usage Count */
            usage_count: number;
            /** Last Used */
            last_used: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * AIModelMetrics
         * @description AI model usage metrics
         */
        AIModelMetrics: {
            /** Total Requests */
            total_requests: number;
            /** Successful Requests */
            successful_requests: number;
            /** Failed Requests */
            failed_requests: number;
            /** Average Response Time */
            average_response_time: number;
            /** Total Cost */
            total_cost: number;
            /** Tokens Used */
            tokens_used: number;
            /**
             * Last Updated
             * Format: date-time
             */
            last_updated: string;
            /** Model Breakdown */
            model_breakdown?: {
                [key: string]: number;
            } | null;
        };
        /** ActiveProxyPayload */
        ActiveProxyPayload: {
            /**
             * Proxy Id
             * Format: uuid
             */
            proxy_id: string;
        };
        /** AdminPaymentResponse */
        AdminPaymentResponse: {
            /** Payment Id */
            payment_id: string;
            /** Customer Id */
            customer_id: string | null;
            /** Plan Id */
            plan_id: string;
            /** Amount Btc */
            amount_btc: number;
            /** Amount Usd */
            amount_usd: number;
            /** Status */
            status: string;
            /** Address */
            address: string;
            /** Confirmations */
            confirmations: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * AdminPlan
         * @description Admin plan model
         */
        AdminPlan: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Price */
            price: number;
            /** Features */
            features: string[];
            /** Max Emails */
            max_emails?: number | null;
            /** Max Sessions */
            max_sessions?: number | null;
            /** Is Active */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
        };
        /**
         * AdminPlanCreate
         * @description Admin plan creation model
         */
        AdminPlanCreate: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Price */
            price: number;
            /** Features */
            features: string[];
            /** Max Emails */
            max_emails?: number | null;
            /** Max Sessions */
            max_sessions?: number | null;
        };
        /**
         * AdminStats
         * @description Admin statistics model
         */
        AdminStats: {
            /** Total Users */
            total_users: number;
            /** Active Users */
            active_users: number;
            /** Total Campaigns */
            total_campaigns: number;
            /** Total Revenue */
            total_revenue: number;
            /** System Health */
            system_health: string;
            /**
             * Last Updated
             * Format: date-time
             */
            last_updated: string;
        };
        /**
         * AdminUser
         * @description Admin user model
         */
        AdminUser: {
            /** Id */
            id: number;
            /** Username */
            username: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Is Active */
            is_active: boolean;
            /** Is Admin */
            is_admin: boolean;
            status: components["schemas"]["UserStatus"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Last Login */
            last_login?: string | null;
            /** Plan Id */
            plan_id?: number | null;
        };
        /**
         * AdminUserUpdate
         * @description Admin user update model
         */
        AdminUserUpdate: {
            /** Username */
            username?: string | null;
            /** Email */
            email?: string | null;
            /** Is Active */
            is_active?: boolean | null;
            /** Is Admin */
            is_admin?: boolean | null;
            status?: components["schemas"]["UserStatus"] | null;
            /** Plan Id */
            plan_id?: number | null;
        };
        /**
         * AnalysisType
         * @description AI analysis type enumeration
         * @enum {string}
         */
        AnalysisType: "sentiment" | "keywords" | "summarization" | "translation" | "grammar_check" | "tone_analysis";
        /** AutomationDashboard */
        AutomationDashboard: {
            /** Total Workflows */
            total_workflows: number;
            /** Active Workflows */
            active_workflows: number;
            /** Total Executions */
            total_executions: number;
            /** Recent Executions */
            recent_executions: {
                [key: string]: unknown;
            }[];
        };
        /** AutomationWorkflow */
        AutomationWorkflow: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Status */
            status: string;
            /** Triggers */
            triggers: string[];
            /** Actions */
            actions: {
                [key: string]: unknown;
            }[];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** Body_check_smtp_accounts_api_v1_smtp__session_id__check_post */
        Body_check_smtp_accounts_api_v1_smtp__session_id__check_post: {
            /** Account Ids */
            account_ids?: string[];
            /** Smtp Account Ids */
            smtp_account_ids?: string[];
            /** Proxy Ids */
            proxy_ids?: string[];
            /**
             * Timeout
             * @default 30
             */
            timeout: number;
        };
        /** Body_create_job_api_v1_jobs__post */
        Body_create_job_api_v1_jobs__post: {
            mode: components["schemas"]["JobMode"];
            /** Template Id */
            template_id: string;
            /**
             * Smtp List File
             * Format: binary
             */
            smtp_list_file: string;
            /**
             * Mails List File
             * Format: binary
             */
            mails_list_file: string;
            /** Proxy List File */
            proxy_list_file?: string | null;
        };
        /** Body_create_template_api_v1_templates__post */
        Body_create_template_api_v1_templates__post: {
            template: components["schemas"]["EmailTemplateCreate"];
            /** Session Id */
            session_id: string;
        };
        /** Body_duplicate_template_api_v1_templates__template_id__duplicate_post */
        Body_duplicate_template_api_v1_templates__template_id__duplicate_post: {
            /** New Name */
            new_name: string;
        };
        /** Body_import_templates_from_file_api_v1_templates_import_file_post */
        Body_import_templates_from_file_api_v1_templates_import_file_post: {
            /** Session Id */
            session_id: string;
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_import_templates_from_url_api_v1_templates_import_url_post */
        Body_import_templates_from_url_api_v1_templates_import_url_post: {
            /** Session Id */
            session_id: string;
            /** Url */
            url: string;
        };
        /** Body_parse_imap_list_endpoint_api_v1_imap_parse_post */
        Body_parse_imap_list_endpoint_api_v1_imap_parse_post: {
            /**
             * Imap File
             * Format: binary
             */
            imap_file: string;
        };
        /** Body_parse_proxy_list_endpoint_api_v1_proxy_parse_post */
        Body_parse_proxy_list_endpoint_api_v1_proxy_parse_post: {
            /**
             * Proxy File
             * Format: binary
             */
            proxy_file: string;
        };
        /** Body_parse_smtp_list_endpoint_api_v1_smtp_parse_post */
        Body_parse_smtp_list_endpoint_api_v1_smtp_parse_post: {
            /**
             * Smtp File
             * Format: binary
             */
            smtp_file: string;
        };
        /** Body_send_email_api_v1_compose_compose_send_post */
        Body_send_email_api_v1_compose_compose_send_post: {
            /** Email Data */
            email_data: string;
            /**
             * Attachment
             * @description A single file to attach to the email (optional)
             */
            file?: string | null;
        };
        /** Body_send_email_compose_api_v1_compose_compose_compose_send_post */
        Body_send_email_compose_api_v1_compose_compose_compose_send_post: {
            /** Email Data */
            email_data: string;
            /**
             * Attachment
             * @description A single file to attach to the email (optional)
             */
            file?: string | null;
        };
        /** Body_test_imap_accounts_from_file_api_v1_imap_test_file_post */
        Body_test_imap_accounts_from_file_api_v1_imap_test_file_post: {
            /**
             * Imap File
             * Format: binary
             */
            imap_file: string;
        };
        /** Body_test_proxy_servers_from_file_api_v1_proxy_test_file_post */
        Body_test_proxy_servers_from_file_api_v1_proxy_test_file_post: {
            /**
             * Proxy File
             * Format: binary
             */
            proxy_file: string;
        };
        /** Body_test_smtp_accounts_from_file_api_v1_smtp_test_file_post */
        Body_test_smtp_accounts_from_file_api_v1_smtp_test_file_post: {
            /**
             * Smtp File
             * Format: binary
             */
            smtp_file: string;
        };
        /** Body_trigger_workflow_bulk_api_v1_automation_automation_workflow__workflow_id__trigger_bulk_post */
        Body_trigger_workflow_bulk_api_v1_automation_automation_workflow__workflow_id__trigger_bulk_post: {
            /** Contact Emails */
            contact_emails: string[];
            /** Execution Context */
            execution_context?: {
                [key: string]: unknown;
            } | null;
        };
        /** Body_upload_attachment_api_v1_templates__template_id__attachments_post */
        Body_upload_attachment_api_v1_templates__template_id__attachments_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_upload_csv_to_base_api_v1_leads_lead_bases__base_id__upload_post */
        Body_upload_csv_to_base_api_v1_leads_lead_bases__base_id__upload_post: {
            /**
             * File
             * Format: binary
             * @description CSV or TXT file with leads
             */
            file: string;
        };
        /** Body_upload_file_api_v1_upload_file__post */
        Body_upload_file_api_v1_upload_file__post: {
            /**
             * File
             * Format: binary
             * @description File to upload
             */
            file: string;
        };
        /** Body_upload_multiple_files_api_v1_upload_files__post */
        Body_upload_multiple_files_api_v1_upload_files__post: {
            /**
             * Files
             * @description Multiple files to upload
             */
            files: string[];
        };
        /** BulkMailJobRead */
        BulkMailJobRead: {
            /** Id */
            id: string;
            status: components["schemas"]["BulkMailJobStatus"];
            /** Sent */
            sent: number;
            /** Failed */
            failed: number;
            /** Total */
            total: number;
            /** Partial Failures */
            partial_failures?: string[] | null;
        };
        /**
         * BulkMailJobStatus
         * @enum {string}
         */
        BulkMailJobStatus: "pending" | "in_progress" | "completed" | "failed";
        /** BulkMailRequest */
        BulkMailRequest: {
            /**
             * Subject
             * @example Promo
             */
            subject: string;
            /**
             * Body Html
             * @example <b>Hello</b>
             */
            body_html: string;
            /**
             * Recipients
             * @example [
             *       "user@example.com"
             *     ]
             */
            recipients: string[];
            /**
             * Attachments
             * @example [
             *       "https://s3/presigned"
             *     ]
             */
            attachments?: string[] | null;
        };
        /** CampaignAnalysisRequest */
        CampaignAnalysisRequest: {
            /**
             * Campaign Data
             * @description Campaign performance data
             */
            campaign_data: {
                [key: string]: unknown;
            };
        };
        /** CampaignAnalysisResponse */
        CampaignAnalysisResponse: {
            /** Analysis */
            analysis: {
                [key: string]: unknown;
            };
            /** Recommendations */
            recommendations: string[];
            /** Predicted Performance */
            predicted_performance: {
                [key: string]: number;
            };
        };
        /** CampaignCreate */
        CampaignCreate: {
            /**
             * Name
             * @description Campaign Name. The unique name of the email campaign.
             */
            name: string;
            /**
             * Template Id
             * Format: uuid
             * @description Email Template ID. The unique identifier of the email template to use.
             */
            template_id: string;
            /**
             * Subject
             * @description Subject line of the email. If different from the template's subject.
             */
            subject?: string | null;
            /**
             * Lead Base Ids
             * @description List of Lead Base IDs. UUIDs of recipient lead databases for this campaign.
             */
            lead_base_ids?: string[];
            /**
             * Batch Size
             * @description Batch Size. Number of emails to send in each batch. Range: 1–1000. Default: 100.
             * @default 100
             */
            batch_size: number;
            /**
             * Delay Between Batches
             * @description Delay Between Batches (seconds). How many seconds to wait between sending batches. Range: 1–3600. Default: 60.
             * @default 60
             */
            delay_between_batches: number;
            /**
             * Threads Count
             * @description Number of sending threads to use. Range: 1–20. Default: 5.
             * @default 5
             */
            threads_count: number;
            /**
             * Autostart
             * @description Automatically start the campaign after creation.
             * @default false
             */
            autostart: boolean;
            /**
             * Proxy Type
             * @description Proxy type for sending: none, http or socks5. (Тип прокси: none, http, socks5)
             * @default none
             */
            proxy_type: string | null;
            /**
             * Proxy Host
             * @description Proxy host name or IP address. (Хост прокси)
             */
            proxy_host?: string | null;
            /**
             * Proxy Port
             * @description Proxy port number. (Порт прокси)
             */
            proxy_port?: number | null;
            /**
             * Proxy Username
             * @description Proxy username if required. (Имя пользователя прокси)
             */
            proxy_username?: string | null;
            /**
             * Proxy Password
             * @description Proxy password if required. (Пароль прокси)
             */
            proxy_password?: string | null;
            /**
             * Smtps
             * @description List of SMTP IDs to use for sending. (Список SMTP ID)
             */
            smtps?: string[];
            /**
             * Proxies
             * @description List of proxy IDs for rotation. (Список proxy ID)
             */
            proxies?: string[];
            /**
             * Subjects
             * @description Subject pool to randomly choose from. (Пул тем)
             */
            subjects?: string[];
            /**
             * Templates
             * @description Template pool to randomly choose from. (Пул шаблонов)
             */
            templates?: string[];
            /**
             * Content Blocks
             * @description Dynamic content blocks. (Динамические блоки контента)
             */
            content_blocks?: {
                [key: string]: unknown;
            }[] | null;
            /**
             * Retry Limit
             * @description Retry limit for failed emails. Range: 1–10. Default: 3. (Лимит повторных попыток)
             * @default 3
             */
            retry_limit: number;
            /**
             * Sender
             * Format: email
             */
            sender: string;
            /**
             * Cc
             * @default []
             */
            cc: string[];
            /**
             * Bcc
             * @default []
             */
            bcc: string[];
        };
        /** CampaignMockTestResponse */
        CampaignMockTestResponse: {
            /**
             * Campaign Id
             * Format: uuid
             */
            campaign_id: string;
            /** Errors */
            errors?: components["schemas"]["MockTestError"][];
        };
        /** CampaignOptions */
        CampaignOptions: {
            /** Templates */
            templates: components["schemas"]["EmailTemplate"][];
            /** Mailers */
            mailers: components["schemas"]["MailerConfigOut"][];
            /** Schedulingoptions */
            schedulingOptions: components["schemas"]["SchedulingOption"][];
        };
        /** CampaignProgress */
        CampaignProgress: {
            /** Campaign Id */
            campaign_id: string;
            status: components["schemas"]["CampaignStatus"];
            /** Progress Percentage */
            progress_percentage: number;
            /** Sent Count */
            sent_count: number;
            /** Delivered Count */
            delivered_count: number;
            /** Opened Count */
            opened_count: number;
            /** Clicked Count */
            clicked_count: number;
            /** Bounced Count */
            bounced_count: number;
            /** Total Recipients */
            total_recipients: number;
            /** Estimated Completion */
            estimated_completion: string | null;
            /** Current Batch */
            current_batch: number | null;
            /** Total Batches */
            total_batches: number | null;
        };
        /** CampaignResources */
        CampaignResources: {
            campaign: components["schemas"]["CampaignResponse"];
            template: components["schemas"]["EmailTemplate"];
            /** Smtp Accounts */
            smtp_accounts: components["schemas"]["SMTPAccount"][];
            /** Proxies */
            proxies: components["schemas"]["ProxyServer"][];
            /** Domains */
            domains: components["schemas"]["schemas__domain__Domain"][];
        };
        /** CampaignResponse */
        CampaignResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Template Id
             * Format: uuid
             */
            template_id: string;
            /** Subject */
            subject: string;
            status: components["schemas"]["CampaignStatus"];
            /**
             * Sender
             * Format: email
             */
            sender: string;
            /** Cc */
            cc: string[];
            /** Bcc */
            bcc: string[];
            /** Total Recipients */
            total_recipients: number;
            /** Sent Count */
            sent_count: number;
            /** Delivered Count */
            delivered_count: number;
            /** Opened Count */
            opened_count: number;
            /** Clicked Count */
            clicked_count: number;
            /** Bounced Count */
            bounced_count: number;
            /** Batch Size */
            batch_size: number;
            /** Delay Between Batches */
            delay_between_batches: number;
            /** Threads Count */
            threads_count: number;
            /** Proxy Type */
            proxy_type?: string | null;
            /** Proxy Host */
            proxy_host?: string | null;
            /** Proxy Port */
            proxy_port?: number | null;
            /** Proxy Username */
            proxy_username?: string | null;
            /** Proxy Password */
            proxy_password?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Started At */
            started_at: string | null;
            /** Completed At */
            completed_at: string | null;
        };
        /**
         * CampaignStatus
         * @enum {string}
         */
        CampaignStatus: "draft" | "running" | "paused" | "completed" | "failed" | "stopped";
        /** CampaignSummary */
        CampaignSummary: {
            /** Total Templates Loaded */
            total_templates_loaded: number;
            /** Total Smtp Servers Configured */
            total_smtp_servers_configured: number;
        };
        /** CampaignValidationRequest */
        CampaignValidationRequest: {
            /**
             * Subject
             * @description Email subject
             */
            subject: string;
            /**
             * Content
             * @description Email content
             */
            content: string;
            /**
             * Sender Domain
             * @description Sender domain
             */
            sender_domain: string;
        };
        /** CampaignValidationResponse */
        CampaignValidationResponse: {
            /** Overall Score */
            overall_score: number;
            /** Domain Reputation */
            domain_reputation: number;
            /** Content Quality */
            content_quality: number;
            /** Technical Issues */
            technical_issues: string[];
            /** Recommendations */
            recommendations: string[];
        };
        /** CheckResultRead */
        CheckResultRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            checker_type: components["schemas"]["CheckerType"];
            /**
             * Ran At
             * Format: date-time
             */
            ran_at: string;
            status?: components["schemas"]["CheckStatus"] | null;
        };
        /** CheckResultUpdate */
        CheckResultUpdate: {
            status: components["schemas"]["CheckStatus"];
        };
        /**
         * CheckStatus
         * @enum {string}
         */
        CheckStatus: "inbox" | "junk" | "not_arrived";
        /**
         * CheckerType
         * @enum {string}
         */
        CheckerType: "smtp" | "proxy" | "template" | "domain";
        /**
         * ClientDebugEvent
         * @description Schema for client debug events.
         */
        ClientDebugEvent: {
            /**
             * Event Type
             * @description Type of debug event
             */
            event_type: string;
            /**
             * Timestamp
             * @description ISO timestamp of the event
             */
            timestamp: string;
            /**
             * Data
             * @description Event data
             */
            data?: {
                [key: string]: unknown;
            };
            /**
             * User Agent
             * @description Client user agent
             * @default
             */
            user_agent: string;
            /**
             * Url
             * @description Current page URL
             * @default
             */
            url: string;
            /**
             * Trace Id
             * @description Client-side trace ID
             * @default
             */
            trace_id: string;
        };
        /**
         * ContactForm
         * @description Contact form model
         */
        ContactForm: {
            /** Name */
            name: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Subject */
            subject: string;
            /** Message */
            message: string;
            /** Company */
            company?: string | null;
            /** Phone */
            phone?: string | null;
            /** Submitted At */
            submitted_at?: string | null;
        };
        /** ContentAnalysisRequest */
        ContentAnalysisRequest: {
            /**
             * Content
             * @description Content to analyze
             */
            content: string;
            /**
             * Type
             * @description Content type
             * @default email
             */
            type: string | null;
        };
        /** ContentAnalysisResponse */
        ContentAnalysisResponse: {
            /** Analysis Id */
            analysis_id: string;
            /** Content Type */
            content_type: string;
            /** Spam Score */
            spam_score: number;
            /** Readability Score */
            readability_score: number;
            /** Engagement Score */
            engagement_score: number;
            /** Recommendations */
            recommendations: string[];
            /** Word Count */
            word_count: number;
            /** Character Count */
            character_count: number;
        };
        /**
         * ContentCategory
         * @enum {string}
         */
        ContentCategory: "marketing" | "technical" | "creative" | "business" | "educational";
        /** ContentOptimizationRequest */
        ContentOptimizationRequest: {
            /**
             * Content
             * @description Email content to optimize
             */
            content: string;
            /**
             * Optimization Type
             * @description Type of optimization
             * @default engagement
             */
            optimization_type: string;
        };
        /** ContentOptimizationResponse */
        ContentOptimizationResponse: {
            /** Optimized Content */
            optimized_content: string;
            /** Improvements */
            improvements: string[];
            /** Score Improvement */
            score_improvement: number;
        };
        /** ContentScanRequest */
        ContentScanRequest: {
            /**
             * Content
             * @description Content to scan
             */
            content: string;
            /**
             * Scan Type
             * @description Type of scan
             * @default spam
             */
            scan_type: string;
        };
        /** ContentScanResponse */
        ContentScanResponse: {
            /** Is Clean */
            is_clean: boolean;
            /** Threats Detected */
            threats_detected: string[];
            /** Risk Score */
            risk_score: number;
            /** Recommendations */
            recommendations: string[];
        };
        /**
         * CountResponse
         * @description Count response for various resources.
         */
        CountResponse: {
            /** Count */
            count: number;
        };
        /** CreateWorkflowRequest */
        CreateWorkflowRequest: {
            /**
             * Name
             * @description Workflow name
             */
            name: string;
            /**
             * Description
             * @description Workflow description
             * @default
             */
            description: string | null;
            /**
             * Triggers
             * @description Workflow triggers
             * @default []
             */
            triggers: string[];
            /**
             * Actions
             * @description Workflow actions
             * @default []
             */
            actions: {
                [key: string]: unknown;
            }[];
        };
        /**
         * DiscoveryStatus
         * @enum {string}
         */
        DiscoveryStatus: "pending" | "valid" | "invalid";
        /**
         * DomainStatus
         * @enum {string}
         */
        DomainStatus: "none" | "checked" | "dead";
        /** DomainUpdate */
        DomainUpdate: {
            /** Url */
            url?: string | null;
            /** Domain Type */
            domain_type?: string | null;
            status?: components["schemas"]["DomainStatus"] | null;
            /** Auth Status */
            auth_status?: boolean | null;
            /** Last Checked */
            last_checked?: string | null;
            /** Response Time */
            response_time?: number | null;
            /** Error Message */
            error_message?: string | null;
            /** Country */
            country?: string | null;
        };
        /** EmailAttachment */
        EmailAttachment: {
            /**
             * Filename
             * @description Attachment file name.
             */
            filename: string;
            /**
             * Content Type
             * @description MIME content type.
             */
            content_type: string;
            /**
             * Size
             * @description File size in bytes.
             */
            size: number;
            /**
             * Path
             * @description Storage path.
             */
            path: string;
        };
        /**
         * EmailBase
         * @description Base model for email data.
         */
        EmailBase: {
            /** Id */
            id: number;
            /** Email */
            email: string;
            /** Name */
            name?: string | null;
        };
        /**
         * EmailBaseCreate
         * @description Base model for email creation.
         */
        EmailBaseCreate: {
            /** Email */
            email: string;
            /** Name */
            name?: string | null;
        };
        /**
         * EmailTemplate
         * @description Full template data. / Полные данные шаблона.
         */
        EmailTemplate: {
            /**
             * Name
             * @description Template name. / Название шаблона.
             */
            name: string;
            /**
             * Subject
             * @description Email subject. / Тема письма.
             */
            subject: string;
            /**
             * Html Content
             * @description HTML body content. / HTML-контент письма.
             */
            html_content?: string | null;
            /**
             * Text Content
             * @description Plain text content. / Текстовое содержимое письма.
             */
            text_content?: string | null;
            /**
             * Macros
             * @description Macro variables. / Макросы для подстановки.
             */
            macros?: {
                [key: string]: unknown;
            } | null;
            /**
             * Id
             * @description Template ID. / ID шаблона.
             */
            id: string;
            /**
             * Attachments
             * @description Attached files. / Вложения.
             */
            attachments?: components["schemas"]["EmailAttachment"][];
            /**
             * Created At
             * Format: date-time
             * @description Creation time. / Время создания.
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Update time. / Время обновления.
             */
            updated_at: string;
        };
        /**
         * EmailTemplateCreate
         * @description Data for creating a template. / Данные для создания шаблона.
         */
        EmailTemplateCreate: {
            /**
             * Name
             * @description Template name. / Название шаблона.
             */
            name: string;
            /**
             * Subject
             * @description Email subject. / Тема письма.
             */
            subject: string;
            /** Html Content */
            html_content?: string | null;
            /**
             * Text Content
             * @description Plain text content. / Текстовое содержимое письма.
             */
            text_content?: string | null;
            /**
             * Macros
             * @description Macro variables. / Макросы для подстановки.
             */
            macros?: {
                [key: string]: unknown;
            } | null;
            /**
             * Variantscount
             * @description Number of HTML variants to generate. / Количество генерируемых вариантов HTML.
             * @default 1
             */
            variantsCount: number;
            /**
             * Tablelayout
             * @description Random table layout mode. / Режим случайной раскладки таблицы.
             * @default simple
             */
            tableLayout: string;
            /**
             * Splitinverttext
             * @description Invert portions of text randomly. / Случайно инвертировать текст.
             * @default false
             */
            splitInvertText: boolean;
        };
        /**
         * EmailTemplateUpdate
         * @description Data for updating a template. / Данные для обновления шаблона.
         */
        EmailTemplateUpdate: {
            /**
             * Name
             * @description Template name. / Название шаблона.
             */
            name: string;
            /**
             * Subject
             * @description Email subject. / Тема письма.
             */
            subject: string;
            /**
             * Html Content
             * @description HTML body content. / HTML-контент письма.
             */
            html_content?: string | null;
            /**
             * Text Content
             * @description Plain text content. / Текстовое содержимое письма.
             */
            text_content?: string | null;
            /**
             * Macros
             * @description Macro variables. / Макросы для подстановки.
             */
            macros?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * FirewallStatusResponse
         * @description Firewall status payload.
         */
        FirewallStatusResponse: {
            /** Enabled */
            enabled: boolean;
            /** Label */
            label: string;
        };
        /**
         * FolderListResponse
         * @description List of folders returned from an IMAP session.
         */
        FolderListResponse: {
            /** Folders */
            folders: string[];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** IMAPAccountCreate */
        IMAPAccountCreate: {
            /** Imap Server */
            imap_server: string;
            /** Imap Port */
            imap_port: number;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
            /**
             * Use Oauth
             * @default false
             */
            use_oauth: boolean | null;
            /** Session Id */
            session_id?: string | null;
            /**
             * Timeout
             * @default 15
             */
            timeout: number | null;
            /**
             * Retries
             * @default 1
             */
            retries: number | null;
        };
        /** IMAPAccountResponse */
        IMAPAccountResponse: {
            /** Imap Server */
            imap_server: string;
            /** Imap Port */
            imap_port: number;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
            /**
             * Use Oauth
             * @default false
             */
            use_oauth: boolean | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Session Id */
            session_id?: string | null;
            status?: components["schemas"]["IMAPStatus"] | null;
            /** Last Check */
            last_check?: string | null;
            /** Response Time */
            response_time?: number | null;
            /**
             * Inbox Count
             * @default 0
             */
            inbox_count: number | null;
            /** Error Message */
            error_message?: string | null;
            /** Created At */
            created_at?: string | null;
        };
        /** IMAPAccountUpdate */
        IMAPAccountUpdate: {
            /** Server */
            server?: string | null;
            /** Port */
            port?: number | null;
            /** Email */
            email?: string | null;
            /** Password */
            password?: string | null;
            status?: components["schemas"]["IMAPStatus"] | null;
            /** Last Check */
            last_check?: string | null;
            /** Response Time */
            response_time?: number | null;
            /** Inbox Count */
            inbox_count?: number | null;
            /** Error Message */
            error_message?: string | null;
            /** Use Oauth */
            use_oauth?: boolean | null;
        };
        /** IMAPBulkTestResponse */
        IMAPBulkTestResponse: {
            /** Total */
            total: number;
            /** Valid */
            valid: number;
            /** Invalid */
            invalid: number;
            /** Errors */
            errors: number;
            /** Results */
            results: components["schemas"]["IMAPTestResult"][];
        };
        /** IMAPSendTestEmailRequest */
        IMAPSendTestEmailRequest: {
            /**
             * Template Id
             * Format: uuid
             */
            template_id: string;
            /** Imap Account Id */
            imap_account_id?: string | null;
            /** Recipient Override */
            recipient_override?: string | null;
            /**
             * Emails Per Item
             * @default 1
             */
            emails_per_item: number;
        };
        /**
         * IMAPStatus
         * @enum {string}
         */
        IMAPStatus: "pending" | "valid" | "invalid" | "error" | "dead" | "checked";
        /**
         * IMAPTestConfig
         * @description Configuration for running an IMAP login test.
         */
        IMAPTestConfig: {
            /** Server */
            server: string;
            /** Port */
            port: number;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
        };
        /** IMAPTestRequest */
        IMAPTestRequest: {
            /** Imap Accounts */
            imap_accounts: components["schemas"]["IMAPAccountCreate"][];
            /**
             * Timeout
             * @default 30
             */
            timeout: number | null;
        };
        /** IMAPTestResult */
        IMAPTestResult: {
            /** Email */
            email: string;
            status: components["schemas"]["IMAPStatus"];
            /**
             * Inbox Count
             * @default 0
             */
            inbox_count: number | null;
            /** Response Time */
            response_time?: number | null;
            /** Error Message */
            error_message?: string | null;
            /** Tls Verified */
            tls_verified?: boolean | null;
            /** Login Latency */
            login_latency?: number | null;
            /** Error Type */
            error_type?: string | null;
        };
        /** Job */
        Job: {
            /** Id */
            id: string;
            status: components["schemas"]["JobStatus"];
            mode: components["schemas"]["JobMode"];
            /** Total Emails */
            total_emails: number;
            /** Sent Emails */
            sent_emails: number;
            /** Failed Emails */
            failed_emails: number;
            /** Progress */
            progress: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Started At */
            started_at?: string | null;
            /** Completed At */
            completed_at?: string | null;
            /** Error Message */
            error_message?: string | null;
            /**
             * Config
             * @default {}
             */
            config: {
                [key: string]: unknown;
            } | null;
        };
        /** JobLog */
        JobLog: {
            /** Id */
            id: string;
            /** Job Id */
            job_id: string;
            /** Level */
            level: string;
            /** Message */
            message: string;
            /** Details */
            details?: {
                [key: string]: unknown;
            } | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * JobMode
         * @enum {string}
         */
        JobMode: "o2" | "o3";
        /**
         * JobStatus
         * @enum {string}
         */
        JobStatus: "pending" | "running" | "completed" | "failed" | "cancelled";
        /**
         * LeadBaseCreate
         * @description Payload for creating a lead base.
         */
        LeadBaseCreate: {
            /** Name */
            name: string;
            /**
             * Session Id
             * Format: uuid
             * @description Session ID to which the database belongs
             */
            session_id: string;
            /** Country */
            country?: string | null;
            /** Comment */
            comment?: string | null;
        };
        /**
         * LeadBaseResponse
         * @description Lead base information returned in responses.
         */
        LeadBaseResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Session Id
             * Format: uuid
             */
            session_id: string;
            /**
             * Owner Id
             * Format: uuid
             */
            owner_id: string;
            /** Country */
            country?: string | null;
            /** Upload Date */
            upload_date?: string | null;
            /** Comment */
            comment?: string | null;
            status: components["schemas"]["LeadBaseStatus"];
            /** Leads Count */
            leads_count: number;
            /** Valid Count */
            valid_count: number;
            /** Invalid Count */
            invalid_count: number;
            /** Duplicate Count */
            duplicate_count: number;
            /** Bounced Count */
            bounced_count: number;
            /** Junk Count */
            junk_count: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * LeadBaseStatus
         * @description Possible statuses for lead bases.
         * @enum {string}
         */
        LeadBaseStatus: "pending" | "processing" | "completed" | "failed";
        /**
         * LeadBaseUpdate
         * @description Fields allowed for updating a lead base.
         */
        LeadBaseUpdate: {
            /** Name */
            name?: string | null;
            /** Country */
            country?: string | null;
            /** Comment */
            comment?: string | null;
            status?: components["schemas"]["LeadBaseStatus"] | null;
        };
        /**
         * LeadEntryList
         * @description Paginated list of lead entries.
         */
        LeadEntryList: {
            /** Leads */
            leads: components["schemas"]["LeadEntryResponse"][];
            /** Total */
            total: number;
        };
        /**
         * LeadEntryResponse
         * @description Lead entry information returned in responses.
         */
        LeadEntryResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /**
             * Lead Base Id
             * Format: uuid
             */
            lead_base_id: string;
            /** Email Verified */
            email_verified: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * LeadEntryUpdate
         * @description Fields allowed for updating a lead entry.
         */
        LeadEntryUpdate: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Email */
            email?: string | null;
            /** Email Verified */
            email_verified?: boolean | null;
        };
        /** LicenseCreate */
        LicenseCreate: {
            /**
             * Plan Id
             * Format: uuid
             */
            plan_id: string;
            /**
             * Is Trial
             * @default false
             */
            is_trial: boolean;
        };
        /** LicenseResponse */
        LicenseResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /**
             * Plan Id
             * Format: uuid
             */
            plan_id: string;
            /** Is Trial */
            is_trial: boolean;
            /**
             * Starts At
             * Format: date-time
             */
            starts_at: string;
            /** Expires At */
            expires_at?: string | null;
        };
        /** LivePerformanceStream */
        LivePerformanceStream: {
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            metrics: components["schemas"]["PerformanceMetrics"];
        };
        /**
         * LoginActivityResponse
         * @description Login activity response schema.
         */
        LoginActivityResponse: {
            /** Id */
            id: number;
            /** User Id */
            user_id: string | null;
            /** Fingerprint */
            fingerprint: string;
            /** Success */
            success: boolean;
            /** Ip Address */
            ip_address: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * MailerConfigOut
         * @description Configuration for a standard SMTP provider.
         */
        MailerConfigOut: {
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Port */
            port: number;
            /** Encryption */
            encryption: string;
            /** Username */
            username: string;
            /** Password */
            password: string;
            /** Tls Verify */
            tls_verify: boolean;
        };
        /** MockTestError */
        MockTestError: {
            /** Step */
            step: string;
            /** Message */
            message: string;
        };
        /**
         * ModelStatus
         * @enum {string}
         */
        ModelStatus: "active" | "inactive" | "training" | "deprecated" | "error";
        /**
         * ModelType
         * @enum {string}
         */
        ModelType: "gpt-4" | "gpt-3.5-turbo" | "claude-3" | "llama-2" | "custom-fine-tuned" | "bert-analysis" | "sentiment-analyzer";
        /**
         * MonitorCheck
         * @description Single entry for monitor.check logs.
         */
        MonitorCheck: {
            /**
             * Time
             * Format: date-time
             */
            time: string;
            /** Thread */
            thread: string;
            /** Socks */
            socks?: string | null;
            /** Account */
            account?: string | null;
            /** Response */
            response?: string | null;
            /** Status */
            status: string;
        };
        /**
         * NewsletterSubscription
         * @description Newsletter subscription model
         */
        NewsletterSubscription: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Name */
            name?: string | null;
            /**
             * Source
             * @default landing_page
             */
            source: string | null;
            /**
             * Marketing Consent
             * @default true
             */
            marketing_consent: boolean;
            /** Subscribed At */
            subscribed_at?: string | null;
        };
        /** PaymentRequestCreate */
        PaymentRequestCreate: {
            /**
             * Plan Id
             * @description Plan ID for the payment
             */
            plan_id: string;
            /**
             * Customer Id
             * @description Customer ID for VIP tracking
             */
            customer_id?: string | null;
            /**
             * Amount Btc
             * @description Amount in BTC (optional)
             */
            amount_btc?: number | null;
            /**
             * Amount Usd
             * @description Amount in USD (optional)
             */
            amount_usd?: number | null;
            /**
             * Description
             * @description Payment description
             */
            description?: string | null;
        };
        /** PaymentRequestResponse */
        PaymentRequestResponse: {
            /** Payment Id */
            payment_id: string;
            /** Address */
            address: string;
            /** Amount Btc */
            amount_btc: number;
            /** Amount Usd */
            amount_usd: number;
            /**
             * Expires At
             * Format: date-time
             */
            expires_at: string;
            /** Status */
            status: string;
            /** Qr Code Url */
            qr_code_url?: string | null;
        };
        /** PaymentStatusResponse */
        PaymentStatusResponse: {
            /** Payment Id */
            payment_id: string;
            /** Status */
            status: string;
            /** Confirmed Amount */
            confirmed_amount: number;
            /** Required Amount */
            required_amount: number;
            /** Confirmations */
            confirmations: number;
            /** Block Height */
            block_height?: number | null;
            /** Transaction Id */
            transaction_id?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** PerformanceMetrics */
        PerformanceMetrics: {
            /** Cpu Usage */
            cpu_usage: number;
            /** Memory Usage */
            memory_usage: number;
            /** Response Time */
            response_time: number;
            /** Throughput */
            throughput: number;
        };
        /** PerformanceTestConfig */
        PerformanceTestConfig: {
            /**
             * Test Type
             * @description Type of performance test
             * @default quick
             */
            test_type: string;
            /**
             * Duration
             * @description Test duration in seconds
             * @default 60
             */
            duration: number;
            /**
             * Concurrent Users
             * @description Number of concurrent users
             * @default 10
             */
            concurrent_users: number;
        };
        /** PerformanceTestResult */
        PerformanceTestResult: {
            /** Test Id */
            test_id: string;
            /** Status */
            status: string;
            /** Duration */
            duration: number;
            /** Metrics */
            metrics: {
                [key: string]: unknown;
            };
            /** Recommendations */
            recommendations: string[];
        };
        /** PlanResponse */
        PlanResponse: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Code */
            code: string;
            /** Price Per Month */
            price_per_month?: number | null;
            /**
             * Features
             * @default []
             */
            features: string[];
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /** Max Threads */
            max_threads?: number | null;
            /**
             * Max Concurrent Campaigns
             * @default 5
             */
            max_concurrent_campaigns: number;
            /** Max Ai Calls Daily */
            max_ai_calls_daily?: number | null;
            /** Max Ai Tokens Monthly */
            max_ai_tokens_monthly?: number | null;
            /**
             * Allowed Ai Models
             * @default []
             */
            allowed_ai_models: string[];
            /**
             * Allowed Functions
             * @default []
             */
            allowed_functions: string[];
            /**
             * Has Premium Support
             * @default false
             */
            has_premium_support: boolean;
            /**
             * Update Frequency
             * @default monthly
             */
            update_frequency: string;
            /** Duration Days */
            duration_days?: number | null;
            /**
             * Max Workspaces
             * @default 1
             */
            max_workspaces: number;
            /**
             * Max Concurrent Sessions
             * @default 1
             */
            max_concurrent_sessions: number;
            /**
             * Database Tier Label
             * @default shared
             */
            database_tier_label: string;
            /**
             * Marketing Blurb
             * @default
             */
            marketing_blurb: string;
            /**
             * Sort Order
             * @default 0
             */
            sort_order: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * ProcessInfo
         * @description Information about a background process.
         */
        ProcessInfo: {
            /** Name */
            name: string;
            status: components["schemas"]["ProcessStatus"];
            /** Cpu Usage */
            cpu_usage: number;
            /** Memory Usage */
            memory_usage: number;
            /** Pid */
            pid?: number | null;
            /** Last Log */
            last_log?: string | null;
        };
        /**
         * ProcessStatus
         * @description Status of a managed background process.
         * @enum {string}
         */
        ProcessStatus: "IDLE" | "RUNNING" | "VALIDATING" | "STOPPED";
        /** ProxyBulkTestResponse */
        ProxyBulkTestResponse: {
            /** Total */
            total: number;
            /** Valid */
            valid: number;
            /** Invalid */
            invalid: number;
            /** Errors */
            errors: number;
            /** Results */
            results: components["schemas"]["ProxyTestResult"][];
        };
        /**
         * ProxySelectionRequest
         * @description Request payload for selecting a proxy for a session.
         */
        ProxySelectionRequest: {
            /**
             * Proxy Id
             * Format: uuid4
             */
            proxy_id: string;
        };
        /** ProxyServer */
        ProxyServer: {
            /** Host */
            host: string;
            /** Port */
            port: number;
            /** Username */
            username?: string | null;
            /** Password */
            password?: string | null;
            /** @default socks5 */
            proxy_type: components["schemas"]["ProxyType"];
            /** Id */
            id: string;
            status: components["schemas"]["ProxyStatus"];
            /** Last Checked */
            last_checked?: string | null;
            /** Response Time */
            response_time?: number | null;
            /** Country */
            country?: string | null;
            /** Error Message */
            error_message?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Is Custom Proxy
             * @default false
             */
            is_custom_proxy: boolean;
        };
        /** ProxyServerCreate */
        ProxyServerCreate: {
            /** Host */
            host: string;
            /** Port */
            port: number;
            /** Username */
            username?: string | null;
            /** Password */
            password?: string | null;
            /** @default socks5 */
            proxy_type: components["schemas"]["ProxyType"];
        };
        /**
         * ProxyStatus
         * @enum {string}
         */
        ProxyStatus: "pending" | "valid" | "invalid" | "error" | "checked" | "dead";
        /** ProxyTestRequest */
        ProxyTestRequest: {
            /** Proxy Servers */
            proxy_servers: components["schemas"]["ProxyServerCreate"][];
            /**
             * Timeout
             * @default 10
             */
            timeout: number | null;
            /**
             * Test Url
             * @default http://httpbin.org/ip
             */
            test_url: string | null;
        };
        /** ProxyTestResult */
        ProxyTestResult: {
            /** Host */
            host: string;
            /** Port */
            port: number;
            status: components["schemas"]["ProxyStatus"];
            /** Response Time */
            response_time?: number | null;
            /** Error Message */
            error_message?: string | null;
        };
        /**
         * ProxyType
         * @enum {string}
         */
        ProxyType: "socks5" | "socks4" | "http" | "https";
        /**
         * ProxyUpdate
         * @description Schema for updating proxy settings.
         */
        ProxyUpdate: {
            status?: components["schemas"]["ProxyStatus"] | null;
            proxy_type?: components["schemas"]["ProxyType"] | null;
            /** Username */
            username?: string | null;
            /** Password */
            password?: string | null;
        };
        /**
         * RefreshTokenRequest
         * @description Request schema for token refresh.
         */
        RefreshTokenRequest: {
            /**
             * Refresh Token
             * @description Refresh token for generating new access token
             */
            refresh_token: string;
        };
        /** SMTPAccount */
        SMTPAccount: {
            /** Server */
            server?: string | null;
            /** Port */
            port?: number | null;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
            /** Country */
            country?: string | null;
            /** Id */
            id: string;
            /** Session Id */
            session_id: string;
            status: components["schemas"]["SMTPStatus"];
            /** @default pending */
            discovery_status: components["schemas"]["DiscoveryStatus"];
            /** Last Checked */
            last_checked?: string | null;
            /** Response Time */
            response_time?: number | null;
            /** Error Message */
            error_message?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** SMTPAccountCreate */
        SMTPAccountCreate: {
            /** Server */
            server?: string | null;
            /** Port */
            port?: number | null;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
            /** Country */
            country?: string | null;
        };
        /**
         * SMTPAccountUpdate
         * @description Fields for updating an SMTP account.
         */
        SMTPAccountUpdate: {
            /** Server */
            server?: string | null;
            /** Port */
            port?: number | null;
            /** Email */
            email?: string | null;
            /** Password */
            password?: string | null;
            status?: components["schemas"]["SMTPStatus"] | null;
            /** Last Checked */
            last_checked?: string | null;
            /** Response Time */
            response_time?: number | null;
            /** Error Message */
            error_message?: string | null;
            /** Country */
            country?: string | null;
        };
        /** SMTPBulkTestResponse */
        SMTPBulkTestResponse: {
            /** Total */
            total: number;
            /** Valid */
            valid: number;
            /** Invalid */
            invalid: number;
            /** Errors */
            errors: number;
            /** Results */
            results: components["schemas"]["SMTPTestResult"][];
        };
        /** SMTPBulkUpload */
        SMTPBulkUpload: {
            /** Data */
            data: string;
        };
        /**
         * SMTPCustomHandshakeResponse
         * @description Response returned after executing the custom SMTP handshake.
         */
        SMTPCustomHandshakeResponse: {
            /** Code */
            code: number;
            /** Response */
            response: string;
        };
        /**
         * SMTPStatus
         * @enum {string}
         */
        SMTPStatus: "pending" | "valid" | "invalid" | "error" | "none" | "dead" | "checked";
        /** SMTPTestResult */
        SMTPTestResult: {
            /** Email */
            email: string;
            status: components["schemas"]["SMTPStatus"];
            /** Response Time */
            response_time?: number | null;
            /** Error Message */
            error_message?: string | null;
        };
        /** SPFValidationRequest */
        SPFValidationRequest: {
            /**
             * Domain
             * @description Domain to validate SPF for
             */
            domain: string;
            /**
             * Sender Ip
             * @description Sender IP address
             */
            sender_ip: string;
        };
        /** SPFValidationResponse */
        SPFValidationResponse: {
            /** Is Valid */
            is_valid: boolean;
            /** Spf Record */
            spf_record: string | null;
            /** Validation Details */
            validation_details: {
                [key: string]: unknown;
            };
            /** Recommendations */
            recommendations: string[];
        };
        /** SchedulingOption */
        SchedulingOption: {
            /** Label */
            label: string;
            /** Batch Size */
            batch_size: number;
            /** Delay Between Batches */
            delay_between_batches: number;
            /** Threads Count */
            threads_count: number;
        };
        /** SegmentationAnalysisRequest */
        SegmentationAnalysisRequest: {
            /**
             * Contact Data
             * @description Contact data for segmentation
             */
            contact_data: {
                [key: string]: unknown;
            }[];
        };
        /** SegmentationAnalysisResponse */
        SegmentationAnalysisResponse: {
            /** Segments */
            segments: {
                [key: string]: unknown;
            }[];
            /** Recommendations */
            recommendations: string[];
            /** Engagement Predictions */
            engagement_predictions: {
                [key: string]: number;
            };
        };
        /** SendTimeOptimizationRequest */
        SendTimeOptimizationRequest: {
            /**
             * Recipient Timezone
             * @description Recipient timezone
             */
            recipient_timezone: string;
            /**
             * Recipient Behavior
             * @description Recipient behavior data
             * @default {}
             */
            recipient_behavior: {
                [key: string]: unknown;
            } | null;
        };
        /** SendTimeOptimizationResponse */
        SendTimeOptimizationResponse: {
            /** Optimal Send Time */
            optimal_send_time: string;
            /** Confidence Score */
            confidence_score: number;
            /** Alternative Times */
            alternative_times: string[];
        };
        /**
         * SentimentType
         * @enum {string}
         */
        SentimentType: "positive" | "negative" | "neutral" | "mixed";
        /** ServerPerformanceItem */
        ServerPerformanceItem: {
            /**
             * Name
             * @description Server name
             */
            name: string;
            /**
             * Cpu Usage
             * @description CPU usage percentage
             */
            cpu_usage: number;
            /**
             * Memory Usage
             * @description Memory usage percentage
             */
            memory_usage: number;
            /**
             * Disk Usage
             * @description Disk usage percentage
             */
            disk_usage: number;
            /**
             * Network Io
             * @description Network I/O stats
             */
            network_io: {
                [key: string]: number;
            };
            /**
             * Status
             * @description Server status
             */
            status: string;
            /**
             * Last Updated
             * @description Last update time
             */
            last_updated: string;
        };
        /**
         * SessionCreate
         * @description Schema for creating a new session.
         */
        SessionCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
        };
        /**
         * SessionDeleteResponse
         * @description Response schema for session deletion.
         */
        SessionDeleteResponse: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /** Detail */
            detail: string;
        };
        /**
         * SessionLog
         * @description Log entry tied to a session.
         */
        SessionLog: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Level */
            level: string;
            /** Message */
            message: string;
        };
        /**
         * SessionPublic
         * @description Public representation of a session.
         */
        SessionPublic: {
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * User Id
             * Format: uuid4
             */
            user_id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Is Active */
            is_active: boolean;
            /** Active Proxy Id */
            active_proxy_id?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** SidebarCountsResponse */
        SidebarCountsResponse: {
            /**
             * Total Campaigns
             * @description Total campaigns
             */
            total_campaigns: number;
            /**
             * Active Campaigns
             * @description Active campaigns
             */
            active_campaigns: number;
            /**
             * Total Leads
             * @description Total leads
             */
            total_leads: number;
            /**
             * Total Templates
             * @description Total templates
             */
            total_templates: number;
            /**
             * Smtp Accounts
             * @description SMTP accounts
             */
            smtp_accounts: number;
            /**
             * Imap Accounts
             * @description IMAP accounts
             */
            imap_accounts: number;
            /**
             * Proxy Count
             * @description Proxy count
             */
            proxy_count: number;
            /**
             * Email Templates
             * @description Email templates count
             */
            email_templates: number;
            /**
             * Campaigns
             * @description Campaigns count
             */
            campaigns: number;
            /**
             * Proxy Servers
             * @description Proxy servers count
             */
            proxy_servers: number;
            /**
             * Lead Entries
             * @description Lead entries count
             */
            lead_entries: number;
            /**
             * Leads
             * @description Leads count
             */
            leads: number;
        };
        /** SubjectLineRequest */
        SubjectLineRequest: {
            /**
             * Email Content
             * @description Email content
             */
            email_content: string;
            /**
             * Target Audience
             * @description Target audience
             * @default
             */
            target_audience: string | null;
            /**
             * Tone
             * @description Desired tone
             * @default professional
             */
            tone: string | null;
        };
        /** SubjectLineResponse */
        SubjectLineResponse: {
            /** Subject Lines */
            subject_lines: {
                [key: string]: unknown;
            }[];
        };
        /**
         * SuccessResponse
         * @description Generic success response.
         */
        SuccessResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** Data */
            data?: unknown | null;
        };
        /**
         * SupportTicket
         * @description Support ticket model
         */
        SupportTicket: {
            /** Id */
            id: number;
            /** User Id */
            user_id?: number | null;
            /** Subject */
            subject: string;
            /** Message */
            message: string;
            status: components["schemas"]["TicketStatus"];
            priority: components["schemas"]["TicketPriority"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
            /** Assigned To */
            assigned_to?: number | null;
            /** Resolution */
            resolution?: string | null;
        };
        /**
         * SupportTicketUpdate
         * @description Support ticket update model
         */
        SupportTicketUpdate: {
            status?: components["schemas"]["TicketStatus"] | null;
            priority?: components["schemas"]["TicketPriority"] | null;
            /** Assigned To */
            assigned_to?: number | null;
            /** Resolution */
            resolution?: string | null;
        };
        /**
         * SystemOverview
         * @description System overview model
         */
        SystemOverview: {
            /** Database Status */
            database_status: string;
            /** Redis Status */
            redis_status: string;
            /** Celery Status */
            celery_status: string;
            /** Storage Usage */
            storage_usage: number;
            /** Memory Usage */
            memory_usage: number;
            /** Cpu Usage */
            cpu_usage: number;
            /**
             * Last Updated
             * Format: date-time
             */
            last_updated: string;
        };
        /** TemplateGenerationRequest */
        TemplateGenerationRequest: {
            /**
             * Purpose
             * @description Email purpose
             */
            purpose: string;
            /**
             * Target Audience
             * @description Target audience
             */
            target_audience: string;
            /**
             * Key Points
             * @description Key points to include
             * @default []
             */
            key_points: string[];
        };
        /** TemplateGenerationResponse */
        TemplateGenerationResponse: {
            /** Template Content */
            template_content: string;
            /** Subject Line */
            subject_line: string;
            /** Personalization Suggestions */
            personalization_suggestions: string[];
        };
        /**
         * TemplateImportResponse
         * @description Response returned after importing templates.
         */
        TemplateImportResponse: {
            /** Success */
            success: boolean;
            /** Results */
            results: components["schemas"]["TemplateImportResult"][];
        };
        /**
         * TemplateImportResult
         * @description Result of a single file import.
         */
        TemplateImportResult: {
            /** File */
            file: string;
            /** Success */
            success: boolean;
            /** Template Id */
            template_id?: string | null;
            /** Error */
            error?: string | null;
        };
        /** TemplateVariantsResponse */
        TemplateVariantsResponse: {
            /** Status */
            status: string;
            /** Variants */
            variants: string[];
        };
        /** TenantDatabaseInfo */
        TenantDatabaseInfo: {
            /** Database Name */
            database_name: string;
            /** Size Bytes */
            size_bytes: number;
            /** Size Mb */
            size_mb: number;
            /** Client Hash */
            client_hash: string;
        };
        /** TenantHealthStatus */
        TenantHealthStatus: {
            /** Total Tenants */
            total_tenants: number;
            /** Healthy Tenants */
            healthy_tenants: number;
            /** Total Size Mb */
            total_size_mb: number;
            /** Tenant Status */
            tenant_status: {
                [key: string]: unknown;
            }[];
        };
        /** TenantProvisionRequest */
        TenantProvisionRequest: {
            /** Client Id */
            client_id: string;
            /**
             * Initialize Schema
             * @default true
             */
            initialize_schema: boolean;
        };
        /** TenantProvisionResponse */
        TenantProvisionResponse: {
            /** Success */
            success: boolean;
            /** Client Id */
            client_id: string;
            /** Database Name */
            database_name: string;
            /** Message */
            message: string;
        };
        /** TenantStatistics */
        TenantStatistics: {
            /** Database Name */
            database_name: string;
            /** Size Bytes */
            size_bytes: number;
            /** Size Mb */
            size_mb: number;
            /** Active Connections */
            active_connections: number;
            /** Client Id */
            client_id: string;
        };
        /** ThreadPoolCreate */
        ThreadPoolCreate: {
            /** Name */
            name: string;
            /** @default normal */
            priority: components["schemas"]["ThreadPriority"];
            /** Max Connections */
            max_connections: number;
            /**
             * Delay Ms
             * @default 0
             */
            delay_ms: number;
            /**
             * Enabled
             * @default true
             */
            enabled: boolean;
        };
        /** ThreadPoolResponse */
        ThreadPoolResponse: {
            /** Name */
            name: string;
            /** @default normal */
            priority: components["schemas"]["ThreadPriority"];
            /** Max Connections */
            max_connections: number;
            /**
             * Delay Ms
             * @default 0
             */
            delay_ms: number;
            /**
             * Enabled
             * @default true
             */
            enabled: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** ThreadPoolUpdate */
        ThreadPoolUpdate: {
            /** Name */
            name?: string | null;
            priority?: components["schemas"]["ThreadPriority"] | null;
            /** Max Connections */
            max_connections?: number | null;
            /** Delay Ms */
            delay_ms?: number | null;
            /** Enabled */
            enabled?: boolean | null;
        };
        /**
         * ThreadPriority
         * @enum {string}
         */
        ThreadPriority: "high" | "normal" | "low";
        /**
         * TicketPriority
         * @description Support ticket priority enumeration
         * @enum {string}
         */
        TicketPriority: "low" | "medium" | "high" | "urgent";
        /**
         * TicketStatus
         * @description Support ticket status enumeration
         * @enum {string}
         */
        TicketStatus: "open" | "in_progress" | "resolved" | "closed";
        /**
         * TokenResponse
         * @description Enhanced token response with refresh token.
         */
        TokenResponse: {
            /** Access Token */
            access_token: string;
            /**
             * Refresh Token
             * @description Refresh token for obtaining new access tokens
             */
            refresh_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
            /**
             * Expires In
             * @description Access token expiration time in seconds
             */
            expires_in: number;
            user: components["schemas"]["UserResponse"];
        };
        /** TrialActivationRequest */
        TrialActivationRequest: {
            /** Payment Request Id */
            payment_request_id: string;
        };
        /** TrialConfigurationRequest */
        TrialConfigurationRequest: {
            /** Config Name */
            config_name: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Duration Minutes
             * @default 60
             */
            duration_minutes: number;
            /**
             * Min Threads
             * @default 2
             */
            min_threads: number;
            /**
             * Max Threads
             * @default 5
             */
            max_threads: number;
            /**
             * Max Campaigns
             * @default 2
             */
            max_campaigns: number;
            /**
             * Price Usd
             * @default 1
             */
            price_usd: number;
            /**
             * Price Btc
             * @default 0.00002
             */
            price_btc: string;
            /**
             * Max Extensions
             * @default 2
             */
            max_extensions: number;
            /**
             * Extension Minutes
             * @default 30
             */
            extension_minutes: number;
            /**
             * Extension Price Usd
             * @default 0.5
             */
            extension_price_usd: number;
            /**
             * Allowed Features
             * @default []
             */
            allowed_features: string[];
        };
        /** TrialExtensionRequest */
        TrialExtensionRequest: {
            /** Payment Request Id */
            payment_request_id?: string | null;
        };
        /** TrialExtensionResponse */
        TrialExtensionResponse: {
            /** Payment Request Id */
            payment_request_id: string;
            /** Plan Name */
            plan_name: string;
            /** Amount Btc */
            amount_btc: string;
            /** Amount Usd */
            amount_usd: number;
            /** Btc Address */
            btc_address: string;
            /** Expires At */
            expires_at: string;
            /** Status */
            status: string;
            /** Qr Data */
            qr_data: string;
            /** Extension Minutes */
            extension_minutes: number;
            /** Extensions Remaining */
            extensions_remaining: number;
        };
        /** TrialPurchaseResponse */
        TrialPurchaseResponse: {
            /** Payment Request Id */
            payment_request_id: string;
            /** Plan Name */
            plan_name: string;
            /** Amount Btc */
            amount_btc: string;
            /** Amount Usd */
            amount_usd: number;
            /** Btc Address */
            btc_address: string;
            /** Expires At */
            expires_at: string;
            /** Status */
            status: string;
            /** Qr Data */
            qr_data: string;
            /** Trial Duration Minutes */
            trial_duration_minutes: number;
            /** Max Threads */
            max_threads: number;
            /** Max Extensions */
            max_extensions: number;
        };
        /** TrialUsageResponse */
        TrialUsageResponse: {
            /** Is Active */
            is_active: boolean;
            /** Time Remaining Minutes */
            time_remaining_minutes: number;
            /** Threads Used */
            threads_used: number;
            /** Campaigns Sent */
            campaigns_sent: number;
            /** Extensions Used */
            extensions_used: number;
            /** Extensions Remaining */
            extensions_remaining: number;
            /** Can Extend */
            can_extend: boolean;
            /** Expires At */
            expires_at: string;
        };
        /** TrialUsageUpdateRequest */
        TrialUsageUpdateRequest: {
            /** Threads Used */
            threads_used?: number | null;
            /** Campaigns Sent */
            campaigns_sent?: number | null;
        };
        /** TriggerWorkflowRequest */
        TriggerWorkflowRequest: {
            /**
             * Contact Emails
             * @description Contact emails to trigger workflow for
             */
            contact_emails: string[];
            /**
             * Execution Context
             * @description Additional context
             * @default {}
             */
            execution_context: {
                [key: string]: unknown;
            } | null;
        };
        /** UploadResult */
        UploadResult: {
            /** Message */
            message: string;
            /** Total Processed */
            total_processed: number;
            /** Successful Imports */
            successful_imports: number;
            /** Duplicates Skipped */
            duplicates_skipped: number;
            /** Invalid Emails */
            invalid_emails: number;
            /** Errors */
            errors: string[];
        };
        /**
         * UserLogin
         * @description User login request schema.
         * @example {
         *       "email": "user@example.com",
         *       "fingerprint": "device_fingerprint_hash_here",
         *       "password": "securepassword123"
         *     }
         */
        UserLogin: {
            /**
             * Email
             * Format: email
             * @description User email address
             */
            email: string;
            /**
             * Password
             * @description User password
             */
            password: string;
            /**
             * Fingerprint
             * @description Device fingerprint (optional)
             */
            fingerprint?: string | null;
        };
        /**
         * UserRegister
         * @description User registration request schema.
         * @example {
         *       "email": "user@example.com",
         *       "fingerprint": "device_fingerprint_hash_here",
         *       "password": "securepassword123"
         *     }
         */
        UserRegister: {
            /**
             * Email
             * Format: email
             * @description User email
             */
            email: string;
            /**
             * Password
             * @description User password (min 8 characters)
             */
            password: string;
            /**
             * Fingerprint
             * @description Device fingerprint (optional)
             */
            fingerprint?: string | null;
        };
        /** UserResponse */
        UserResponse: {
            /** Id */
            id: string;
            /** Email */
            email: string;
            /** Is Active */
            is_active: boolean;
            /** Is Admin */
            is_admin: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * UserStatus
         * @description User status enumeration
         * @enum {string}
         */
        UserStatus: "active" | "inactive" | "suspended";
        /**
         * UserTelegramLogin
         * @description User telegram login request schema.
         * @example {
         *       "fingerprint": "device_fingerprint_hash_here",
         *       "identifier": "email",
         *       "password": "securepassword123"
         *     }
         */
        UserTelegramLogin: {
            /**
             * Identifier
             * @description Telegram username or identifier
             */
            identifier: string;
            /**
             * Password
             * @description User password
             */
            password: string;
            /**
             * Fingerprint
             * @description Device fingerprint (optional)
             */
            fingerprint?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** WorkflowStatistics */
        WorkflowStatistics: {
            /** Total Executions */
            total_executions: number;
            /** Successful Executions */
            successful_executions: number;
            /** Failed Executions */
            failed_executions: number;
            /** Average Duration */
            average_duration: number;
            /** Last Execution */
            last_execution: string | null;
        };
        /**
         * Domain
         * @description Domain model.
         */
        schemas__common__Domain: {
            /** Id */
            id: number;
            /** Domain */
            domain: string;
        };
        /**
         * DomainCreate
         * @description Domain creation model.
         */
        schemas__common__DomainCreate: {
            /** Domain */
            domain: string;
        };
        /**
         * MessageResponse
         * @description Simple message response.
         */
        schemas__common__MessageResponse: {
            /** Message */
            message: string;
        };
        /** Domain */
        schemas__domain__Domain: {
            /** Url */
            url: string;
            /** Domain Type */
            domain_type?: string | null;
            /** Country */
            country?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** @default none */
            status: components["schemas"]["DomainStatus"];
            /**
             * Auth Status
             * @default false
             */
            auth_status: boolean;
            /** Last Checked */
            last_checked?: string | null;
            /** Response Time */
            response_time?: number | null;
            /** Error Message */
            error_message?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
        };
        /** DomainCreate */
        schemas__domain__DomainCreate: {
            /** Url */
            url: string;
            /** Domain Type */
            domain_type?: string | null;
            /** Country */
            country?: string | null;
        };
        /**
         * MessageResponse
         * @description Generic message response.
         */
        schemas__proxy__MessageResponse: {
            /** Message */
            message: string;
            /**
             * Success
             * @default true
             */
            success: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    test_endpoint_api_v1_test_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    cors_debug_api_v1_cors_debug_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    login_api_v1_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLogin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_preflight_api_v1_login_options: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    register_api_v1_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRegister"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_telegram_api_v1_login_telegram_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserTelegramLogin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_token_api_v1_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_api_v1_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_current_user_info_api_v1_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    get_auth_status_api_v1_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    verify_token_api_v1_verify_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_login_activity_api_v1_login_activity_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginActivityResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    dashboard_info_api_v1_dashboard__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_dashboard_overview_api_v1_dashboard_overview_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_server_performance_api_v1_dashboard_server_performance_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerPerformanceItem"][];
                };
            };
        };
    };
    get_dashboard_counts_api_v1_dashboard_counts_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SidebarCountsResponse"];
                };
            };
        };
    };
    get_analytics_data_api_v1_dashboard_analytics_get: {
        parameters: {
            query: {
                session_id: string;
                period?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_system_health_api_v1_dashboard_system_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    smtp_info_api_v1_smtp__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    list_smtp_accounts_api_v1_smtp__session_id__accounts_get: {
        parameters: {
            query?: {
                status_filter?: string | null;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SMTPAccount"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_smtp_account_api_v1_smtp__session_id__accounts_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SMTPAccountCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SMTPAccount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_upload_smtp_api_v1_smtp__session_id__bulk_upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SMTPBulkUpload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_smtp_account_api_v1_smtp__session_id__accounts__account_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SMTPAccountUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SMTPAccount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_smtp_account_api_v1_smtp__session_id__accounts__account_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_smtp_configurations_api_v1_smtp__session_id__configurations_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_smtp_accounts_api_v1_smtp__session_id__check_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_check_smtp_accounts_api_v1_smtp__session_id__check_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_check_progress_api_v1_smtp__session_id__check_progress_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_smtp_accounts_api_v1_smtp_test_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    start_smtp_test_api_v1_smtp_start_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
        };
    };
    stop_smtp_test_api_v1_smtp_stop_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
        };
    };
    smtp_test_status_api_v1_smtp_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    test_smtp_accounts_from_file_api_v1_smtp_test_file_post: {
        parameters: {
            query?: {
                timeout?: number;
                max_concurrent?: number;
                thread_pool_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_test_smtp_accounts_from_file_api_v1_smtp_test_file_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SMTPBulkTestResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    parse_smtp_list_endpoint_api_v1_smtp_parse_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_parse_smtp_list_endpoint_api_v1_smtp_parse_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    smtp_custom_handshake_api_v1_smtp_custom_handshake_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SMTPCustomHandshakeResponse"];
                };
            };
        };
    };
    list_imap_accounts_api_v1_imap__session_id__accounts_get: {
        parameters: {
            query?: {
                status_filter?: string;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IMAPAccountResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_imap_account_api_v1_imap__session_id__accounts_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IMAPAccountCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IMAPAccountResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_folders_api_v1_imap__session_id__folders_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_imap_account_api_v1_imap__session_id__accounts__account_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IMAPAccountUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IMAPAccountResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_imap_account_api_v1_imap__session_id__accounts__account_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_imap_accounts_api_v1_imap_test_post: {
        parameters: {
            query?: {
                max_concurrent?: number;
                thread_pool_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IMAPTestRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IMAPBulkTestResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_imap_accounts_from_file_api_v1_imap_test_file_post: {
        parameters: {
            query?: {
                timeout?: number;
                max_concurrent?: number;
                thread_pool_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_test_imap_accounts_from_file_api_v1_imap_test_file_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IMAPBulkTestResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    parse_imap_list_endpoint_api_v1_imap_parse_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_parse_imap_list_endpoint_api_v1_imap_parse_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_imap_accounts_api_v1_imap__session_id__check_post: {
        parameters: {
            query?: {
                timeout?: number;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_upload_from_email_api_v1_imap__session_id__bulk_upload_from_email_post: {
        parameters: {
            query: {
                email_data: string;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_test_email_api_v1_imap_send_test_email_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IMAPSendTestEmailRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_imap_test_api_v1_imap_start_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IMAPTestConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stop_imap_test_api_v1_imap_stop_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
        };
    };
    imap_test_status_api_v1_imap_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    campaigns_info_api_v1_campaigns__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_options_api_v1_campaigns_campaigns_options_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignOptions"];
                };
            };
        };
    };
    get_campaigns_api_v1_campaigns_sessions__session_id__campaigns_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                /** @description Filter by status: draft, running, completed, etc. */
                status?: string | null;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_campaign_api_v1_campaigns_sessions__session_id__campaigns_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Session ID of the current user session. */
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CampaignCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_campaign_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_campaign_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_campaign_resources_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__resources_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignResources"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_campaign_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__start_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    pause_campaign_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__pause_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stop_campaign_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__stop_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_campaign_progress_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__progress_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignProgress"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_campaigns_overview_api_v1_campaigns_sessions__session_id__campaigns_stats_overview_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_campaign_summary_api_v1_campaigns_sessions__session_id__campaigns_summary_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignSummary"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_campaign_analytics_api_v1_campaigns_sessions__session_id__campaigns__campaign_id__analytics_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    campaign_mock_test_api_v1_campaigns_campaigns__campaign_id__mock_test_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignMockTestResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_lead_bases_api_v1_leads_lead_bases__get: {
        parameters: {
            query?: {
                /** @description Number of records to skip */
                skip?: number;
                /** @description Maximum number of records */
                limit?: number;
                /** @description Search by name */
                search?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LeadBaseResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_lead_base_api_v1_leads_lead_bases__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LeadBaseCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LeadBaseResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_lead_base_api_v1_leads_lead_bases__base_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                base_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LeadBaseResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_lead_base_api_v1_leads_lead_bases__base_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                base_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LeadBaseUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LeadBaseResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_lead_base_api_v1_leads_lead_bases__base_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                base_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_csv_to_base_api_v1_leads_lead_bases__base_id__upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                base_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_csv_to_base_api_v1_leads_lead_bases__base_id__upload_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_leads_in_base_api_v1_leads_lead_bases__base_id__leads__get: {
        parameters: {
            query?: {
                /** @description Number of records to skip */
                skip?: number;
                /** @description Maximum number of records */
                limit?: number;
                /** @description Search by email, first name or last name */
                search?: string | null;
            };
            header?: never;
            path: {
                base_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LeadEntryList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_lead_by_id_api_v1_leads_leads__lead_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lead_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LeadEntryResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_lead_entry_api_v1_leads_leads__lead_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lead_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LeadEntryUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LeadEntryResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_lead_entry_api_v1_leads_leads__lead_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lead_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_single_lead_email_api_v1_leads_leads__lead_id__validate_email_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lead_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_templates_api_v1_templates__get: {
        parameters: {
            query: {
                session_id: string;
                limit?: number;
                offset?: number;
                search?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_template_api_v1_templates__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_create_template_api_v1_templates__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_template_api_v1_templates__template_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_template_api_v1_templates__template_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailTemplateUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_template_api_v1_templates__template_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_attachment_api_v1_templates__template_id__attachments_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_attachment_api_v1_templates__template_id__attachments_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    preview_template_api_v1_templates__template_id__preview_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    duplicate_template_api_v1_templates__template_id__duplicate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_duplicate_template_api_v1_templates__template_id__duplicate_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_template_variants_api_v1_templates_variants_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateVariantsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    import_templates_from_file_api_v1_templates_import_file_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_import_templates_from_file_api_v1_templates_import_file_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateImportResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    import_templates_from_url_api_v1_templates_import_url_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_import_templates_from_url_api_v1_templates_import_url_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateImportResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_template_check_status_api_v1_templates__check_id__status_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                check_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckResultUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckResultRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sessions_info_api_v1_sessions_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    list_sessions_api_v1_sessions__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionPublic"][];
                };
            };
        };
    };
    create_session_api_v1_sessions__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SessionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_session_api_v1_sessions__session_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_session_api_v1_sessions__session_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionDeleteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_session_logs_api_v1_sessions__session_id__logs_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionLog"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    select_proxy_api_v1_sessions__session_id__proxy_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProxySelectionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    proxy_info_api_v1_proxy__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    list_proxies_api_v1_proxy__session_id__proxies_get: {
        parameters: {
            query?: {
                status_filter?: string;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyServer"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_proxy_api_v1_proxy__session_id__proxies_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProxyServerCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyServer"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_upload_proxies_api_v1_proxy__session_id__bulk_upload_post: {
        parameters: {
            query: {
                proxy_data: string;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__proxy__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_proxies_default_api_v1_proxy_proxies_get: {
        parameters: {
            query?: {
                status_filter?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyServer"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_active_proxy_api_v1_proxy__session_id__active_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyServer"] | null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_active_proxy_api_v1_proxy__session_id__active_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActiveProxyPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__proxy__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_proxy_api_v1_proxy__session_id__proxies__proxy_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                proxy_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProxyUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyServer"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_proxy_api_v1_proxy__session_id__proxies__proxy_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Session UUID */
                session_id: string;
                /** @description Proxy UUID */
                proxy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_proxies_api_v1_proxy__session_id__check_post: {
        parameters: {
            query?: {
                timeout?: number;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__proxy__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_check_progress_api_v1_proxy__session_id__check_progress_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_proxy_servers_api_v1_proxy_test_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProxyTestRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyBulkTestResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_proxy_server_stream_api_v1_proxy_test_stream_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProxyServerCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_proxy_servers_from_file_api_v1_proxy_test_file_post: {
        parameters: {
            query?: {
                timeout?: number;
                test_url?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_test_proxy_servers_from_file_api_v1_proxy_test_file_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyBulkTestResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    parse_proxy_list_endpoint_api_v1_proxy_parse_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_parse_proxy_list_endpoint_api_v1_proxy_parse_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    domains_info_api_v1_domains__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    list_domains_api_v1_domains__session_id__domains_get: {
        parameters: {
            query?: {
                status_filter?: string;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__domain__Domain"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_domain_api_v1_domains__session_id__domains_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["schemas__domain__DomainCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__domain__Domain"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_domains_default_api_v1_domains_domains_get: {
        parameters: {
            query?: {
                status_filter?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__domain__Domain"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_domain_api_v1_domains__session_id__domains__domain_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                domain_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__domain__Domain"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_domain_api_v1_domains__session_id__domains__domain_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                domain_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DomainUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__domain__Domain"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_domain_api_v1_domains__session_id__domains__domain_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                domain_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_domain_api_v1_domains__session_id__domains__domain_id__check_post: {
        parameters: {
            query?: {
                timeout?: number;
            };
            header?: never;
            path: {
                session_id: string;
                domain_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__domain__Domain"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    blacklist_check_api_v1_domains_blacklist_check_post: {
        parameters: {
            query: {
                url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check_api_v1_health__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    database_health_check_api_v1_health_db_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_monitoring_stats_api_v1_health_monitoring_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_system_alerts_api_v1_health_alerts_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    trigger_manual_check_api_v1_health_trigger_check_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_users_api_v1_admin_users_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                search?: string | null;
                status_filter?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminUser"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_api_v1_admin_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminUser"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_api_v1_admin_users__user_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminUserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminUser"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_api_v1_admin_users__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_plans_api_v1_admin_plans_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminPlan"][];
                };
            };
        };
    };
    create_plan_api_v1_admin_plans_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminPlanCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminPlan"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_support_tickets_api_v1_admin_support_tickets_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                status_filter?: string | null;
                priority_filter?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SupportTicket"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_ticket_status_api_v1_admin_support_tickets__ticket_id__status_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ticket_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SupportTicketUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SupportTicket"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_admin_stats_api_v1_admin_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminStats"];
                };
            };
        };
    };
    get_system_overview_api_v1_admin_system_overview_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemOverview"];
                };
            };
        };
    };
    list_tenant_databases_api_v1_tenant_admin_admin_tenants_databases_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantDatabaseInfo"][];
                };
            };
        };
    };
    tenant_health_check_api_v1_tenant_admin_admin_tenants_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantHealthStatus"];
                };
            };
        };
    };
    get_tenant_statistics_api_v1_tenant_admin_admin_tenants_statistics__client_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                client_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantStatistics"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    provision_tenant_database_api_v1_tenant_admin_admin_tenants_provision_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TenantProvisionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantProvisionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cleanup_tenant_database_api_v1_tenant_admin_admin_tenants_cleanup__client_id__delete: {
        parameters: {
            query?: {
                confirm?: boolean;
            };
            header?: never;
            path: {
                client_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_architecture_info_api_v1_tenant_admin_admin_tenants_architecture_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    test_tenant_connection_api_v1_tenant_admin_admin_tenants_test_tenant_connection__client_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                client_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_file_api_v1_upload_file__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_file_api_v1_upload_file__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_multiple_files_api_v1_upload_files__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_multiple_files_api_v1_upload_files__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_processes_api_v1_processes__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessInfo"][];
                };
            };
        };
    };
    start_process_api_v1_processes__name__start_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessInfo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stop_process_api_v1_processes__name__stop_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessInfo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_logs_api_v1_processes__name__logs_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_jobs_api_v1_jobs__get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                status?: components["schemas"]["JobStatus"] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Job"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_job_api_v1_jobs__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_create_job_api_v1_jobs__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Job"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_api_v1_jobs__job_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Job"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_job_api_v1_jobs__job_id__cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_logs_api_v1_jobs__job_id__logs_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobLog"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_email_bases_api_v1_materials__session_id__email_bases_get: {
        parameters: {
            query?: {
                status_filter?: string;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailBase"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_email_base_api_v1_materials__session_id__email_bases_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailBaseCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailBase"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_upload_email_bases_api_v1_materials__session_id__email_bases_bulk_upload_post: {
        parameters: {
            query: {
                email_data: string;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_domains_api_v1_materials__session_id__domains_get: {
        parameters: {
            query?: {
                status_filter?: string;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__Domain"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_domain_api_v1_materials__session_id__domains_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["schemas__common__DomainCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__Domain"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_upload_domains_api_v1_materials__session_id__domains_bulk_upload_post: {
        parameters: {
            query: {
                domain_data: string;
                template_name?: string;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_material_counts_api_v1_materials__session_id__counts_get: {
        parameters: {
            query: {
                material_type: string;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CountResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_material_api_v1_materials__session_id___material_type___item_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                material_type: string;
                item_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_campaigns_api_v1_mailing__session_id__campaigns_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_campaign_api_v1_mailing__session_id__campaigns_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_campaign_api_v1_mailing__session_id__campaigns__campaign_id__start_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_campaign_progress_api_v1_mailing__session_id__campaigns__campaign_id__progress_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stop_campaign_api_v1_mailing__session_id__campaigns__campaign_id__stop_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schemas__common__MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_mail_info_api_v1_bulk_mail__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    create_bulk_mail_job_api_v1_bulk_mail_bulk_mail_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkMailRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkMailJobRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_bulk_mail_job_api_v1_bulk_mail_bulk_mail__job_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkMailJobRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    blacklist_info_api_v1_blacklist__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    check_ip_blacklist_api_v1_blacklist_ip__ip__get: {
        parameters: {
            query?: {
                /** @description Comma separated provider list */
                providers?: string | null;
            };
            header?: never;
            path: {
                ip: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_domain_blacklist_api_v1_blacklist_domain__domain__get: {
        parameters: {
            query?: {
                /** @description Comma separated provider list */
                providers?: string | null;
            };
            header?: never;
            path: {
                domain: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_license_api_v1_licenses__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LicenseCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LicenseResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_license_api_v1_licenses_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LicenseResponse"];
                };
            };
        };
    };
    list_plans_api_v1_plans__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlanResponse"][];
                };
            };
        };
    };
    get_lifetime_status_api_v1_plans_lifetime_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    purchase_lifetime_seat_api_v1_plans_lifetime_purchase_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_team_plan_api_v1_plans_team__team_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_plan_features_api_v1_plans_features__plan_code__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                plan_code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    landing_info_api_v1_landing__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_plans_api_v1_landing_plans_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    submit_contact_form_api_v1_landing_contact_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContactForm"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    subscribe_newsletter_api_v1_landing_newsletter_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewsletterSubscription"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_support_ticket_api_v1_landing_support_ticket_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_tickets_api_v1_landing_my_tickets_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_features_api_v1_landing_features_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_testimonials_api_v1_landing_testimonials_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    send_email_api_v1_compose_compose_send_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_send_email_api_v1_compose_compose_send_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_email_compose_api_v1_compose_compose_compose_send_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_send_email_compose_api_v1_compose_compose_compose_send_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_compose_status_api_v1_compose_compose_compose_status__compose_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                compose_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_monitor_checks_api_v1_check_monitor_monitor_check_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonitorCheck"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_pools_api_v1_thread_pools__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadPoolResponse"][];
                };
            };
        };
    };
    create_pool_api_v1_thread_pools__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ThreadPoolCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadPoolResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_pool_api_v1_thread_pools__pool_id___put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pool_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ThreadPoolUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadPoolResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_pool_api_v1_thread_pools__pool_id___delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pool_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    firewall_status_api_v1_system_system_firewall_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FirewallStatusResponse"];
                };
            };
        };
    };
    get_smtp_metrics_api_v1_smtp_metrics_smtp_metrics_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    metrics_info_api_v1_metrics__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_health_status_api_v1_metrics_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_system_metrics_api_v1_metrics_system_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_performance_metrics_api_v1_metrics_performance_get: {
        parameters: {
            query?: {
                /** @description Time period: 1m, 5m, 15m, 1h, 6h, 24h */
                period?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_realtime_metrics_api_v1_metrics_realtime_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_analytics_metrics_api_v1_metrics_analytics_get: {
        parameters: {
            query?: {
                /** @description Analytics period */
                period?: string;
                token?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_admin_overview_api_v1_metrics_admin_overview_get: {
        parameters: {
            query?: {
                token?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    core_info_api_v1_core_core__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    create_payment_request_api_v1_core_core_payments_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentRequestCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentRequestResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_payment_status_api_v1_core_core_payments__payment_id__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                payment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentStatusResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_admin_payments_api_v1_core_core_admin_payments_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                status_filter?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminPaymentResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_wallet_info_api_v1_core_core_wallet_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    check_trial_availability_api_v1_trial_availability_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    purchase_trial_api_v1_trial_purchase_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrialPurchaseResponse"];
                };
            };
        };
    };
    activate_trial_api_v1_trial_activate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrialActivationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_trial_status_api_v1_trial_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrialUsageResponse"];
                };
            };
        };
    };
    create_extension_payment_api_v1_trial_extend_payment_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrialExtensionResponse"];
                };
            };
        };
    };
    extend_trial_api_v1_trial_extend_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrialExtensionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_trial_usage_api_v1_trial_usage_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrialUsageUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    manual_expire_check_api_v1_trial_expire_check_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_trial_configurations_api_v1_trial_admin_configurations_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    create_trial_configuration_api_v1_trial_admin_configurations_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrialConfigurationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_trial_configuration_api_v1_trial_admin_configurations__config_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                config_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrialConfigurationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_trial_configuration_api_v1_trial_admin_configurations__config_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                config_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ai_info_api_v1_ai_content_ai__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    analyze_content_api_v1_ai_content_ai_content_analyze_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContentAnalysisRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentAnalysisResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_subject_lines_api_v1_ai_content_ai_subject_lines_generate_get: {
        parameters: {
            query: {
                email_content: string;
                count?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    analyze_deliverability_api_v1_ai_content_ai_deliverability_analyze_get: {
        parameters: {
            query: {
                content: string;
                subject?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    automation_info_api_v1_automation_automation__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_automation_status_api_v1_automation_automation_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    create_workflow_api_v1_automation_automation_workflow_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWorkflowRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AutomationWorkflow"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workflows_api_v1_automation_automation_workflows_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AutomationWorkflow"][];
                };
            };
        };
    };
    get_workflow_api_v1_automation_automation_workflow__workflow_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AutomationWorkflow"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    trigger_workflow_api_v1_automation_automation_workflow__workflow_id__trigger_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TriggerWorkflowRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    trigger_workflow_bulk_api_v1_automation_automation_workflow__workflow_id__trigger_bulk_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_trigger_workflow_bulk_api_v1_automation_automation_workflow__workflow_id__trigger_bulk_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workflow_statistics_api_v1_automation_automation_workflow__workflow_id__statistics_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowStatistics"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_automation_dashboard_api_v1_automation_automation_dashboard_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AutomationDashboard"];
                };
            };
        };
    };
    ai_mailing_info_api_v1_ai_mailing_ai_mailing__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_ai_mailing_status_api_v1_ai_mailing_ai_mailing_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    generate_subject_lines_api_v1_ai_mailing_ai_mailing_generate_subject_lines_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubjectLineRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubjectLineResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    optimize_content_api_v1_ai_mailing_ai_mailing_optimize_content_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContentOptimizationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentOptimizationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    analyze_campaign_api_v1_ai_mailing_ai_mailing_analyze_campaign_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CampaignAnalysisRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignAnalysisResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    optimize_send_time_api_v1_ai_mailing_ai_mailing_optimize_send_time_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendTimeOptimizationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendTimeOptimizationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_template_api_v1_ai_mailing_ai_mailing_generate_template_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TemplateGenerationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateGenerationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    analyze_segmentation_api_v1_ai_mailing_ai_mailing_analyze_segmentation_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SegmentationAnalysisRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SegmentationAnalysisResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    security_info_api_v1_security__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    security_status_api_v1_security_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    validate_spf_api_v1_security_spf_validate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SPFValidationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPFValidationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    scan_content_api_v1_security_content_scan_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContentScanRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentScanResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    quick_scan_content_api_v1_security_content_quick_scan_post: {
        parameters: {
            query: {
                subject: string;
                content: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_campaign_api_v1_security_validate_campaign_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CampaignValidationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignValidationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    performance_info_api_v1_performance__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    performance_status_api_v1_performance_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_system_check_api_v1_performance_system_check_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    run_quick_test_api_v1_performance_test_quick_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PerformanceTestConfig"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    run_production_test_api_v1_performance_test_production_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PerformanceTestConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    run_custom_test_api_v1_performance_test_custom_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PerformanceTestConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_test_result_api_v1_performance_test__test_id__result_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                test_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerformanceTestResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_test_status_api_v1_performance_test__test_id__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                test_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_test_api_v1_performance_test__test_id__cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                test_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_metrics_api_v1_performance_metrics_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerformanceMetrics"];
                };
            };
        };
    };
    get_live_metrics_api_v1_performance_live_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LivePerformanceStream"];
                };
            };
        };
    };
    get_performance_stats_api_v1_performance_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_ai_models_api_v1_ai_content_api_v1_ai_models_get: {
        parameters: {
            query?: {
                model_type?: components["schemas"]["ModelType"] | null;
                is_active?: boolean | null;
                capability?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIModelEnhanced"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_model_api_v1_ai_content_api_v1_ai_models__model_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIModelEnhanced"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ai_chat_api_v1_ai_content_api_v1_ai_chat_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AIChatRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIChatResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    analyze_content_api_v1_ai_content_api_v1_ai_analyze_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AIAnalysisRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIAnalysisResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_metrics_api_v1_ai_content_api_v1_ai_metrics_get: {
        parameters: {
            query?: {
                time_range?: string;
                model_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIModelMetrics"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ai_config_api_v1_ai_content_api_v1_ai_config_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIModelConfig"];
                };
            };
        };
    };
    update_ai_config_api_v1_ai_content_api_v1_ai_config_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIModelConfig"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    receive_client_debug_event_api_v1_debug_client_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClientDebugEvent"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    debug_status_api_v1_debug_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_recent_client_events_api_v1_debug_client_recent_get: {
        parameters: {
            query?: {
                limit?: number;
                event_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cleanup_old_debug_events_api_v1_debug_client_cleanup_delete: {
        parameters: {
            query?: {
                days_old?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    api_info_api_v1_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_startup_report_api_v1_system_startup_report_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_system_status_api_v1_system_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    legacy_auth_login_redirect_auth_login_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    legacy_auth_login_post_redirect_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
