/* tslint:disable */
/* eslint-disable */
/**
 * SGPT API
 * üìß Professional Email Marketing & IMAP Management Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosRequestConfig } from 'axios';
import axios from 'axios'
// Use unified client under the hood via base.ts rewire; remove direct axiosInstance
import type { AxiosInstance } from 'axios'
import { apiClient } from '@/http/stable-api-client'
const globalAxios: AxiosInstance = (apiClient as any).axiosInstance ?? axios.create();
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError, operationServerMap } from './base';
// @ts-ignore
import type { EmailTemplateCreate } from './models';
// @ts-ignore
import type { EmailTemplateUpdate } from './models';
// @ts-ignore
import type { HTTPValidationError } from './models';
/**
 * TemplatesApi - axios parameter creator
 * @export
 */
export const TemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ‚úÖ Create email template
         * @summary Create Template
         * @param {EmailTemplateCreate} emailTemplateCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplateApiV1TemplatesPost: async (emailTemplateCreate: EmailTemplateCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailTemplateCreate' is not null or undefined
            assertParamExists('createTemplateApiV1TemplatesPost', 'emailTemplateCreate', emailTemplateCreate)
            const localVarPath = `/templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailTemplateCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üóëÔ∏è Delete template
         * @summary Delete Template
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplateApiV1TemplatesTemplateIdDelete: async (templateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('deleteTemplateApiV1TemplatesTemplateIdDelete', 'templateId', templateId)
            const localVarPath = `/templates/{template_id}`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìã Duplicate template
         * @summary Duplicate Template
         * @param {string} templateId 
         * @param {string} newName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateTemplateApiV1TemplatesTemplateIdDuplicatePost: async (templateId: string, newName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('duplicateTemplateApiV1TemplatesTemplateIdDuplicatePost', 'templateId', templateId)
            // verify required parameter 'newName' is not null or undefined
            assertParamExists('duplicateTemplateApiV1TemplatesTemplateIdDuplicatePost', 'newName', newName)
            const localVarPath = `/templates/{template_id}/duplicate`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (newName !== undefined) { 
                localVarFormParams.set('new_name', newName as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìÑ Get template details
         * @summary Get Template
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateApiV1TemplatesTemplateIdGet: async (templateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('getTemplateApiV1TemplatesTemplateIdGet', 'templateId', templateId)
            const localVarPath = `/templates/{template_id}`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìã List templates with search
         * @summary List Templates
         * @param {string} sessionId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string | null} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplatesApiV1TemplatesGet: async (sessionId: string, limit?: number, offset?: number, search?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('listTemplatesApiV1TemplatesGet', 'sessionId', sessionId)
            const localVarPath = `/templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionId !== undefined) {
                localVarQueryParameter['session_id'] = sessionId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üëÅÔ∏è Preview with macros
         * @summary Preview Template
         * @param {string} templateId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewTemplateApiV1TemplatesTemplateIdPreviewPost: async (templateId: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('previewTemplateApiV1TemplatesTemplateIdPreviewPost', 'templateId', templateId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('previewTemplateApiV1TemplatesTemplateIdPreviewPost', 'body', body)
            const localVarPath = `/templates/{template_id}/preview`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ‚úèÔ∏è Update template
         * @summary Update Template
         * @param {string} templateId 
         * @param {EmailTemplateUpdate} emailTemplateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateApiV1TemplatesTemplateIdPut: async (templateId: string, emailTemplateUpdate: EmailTemplateUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('updateTemplateApiV1TemplatesTemplateIdPut', 'templateId', templateId)
            // verify required parameter 'emailTemplateUpdate' is not null or undefined
            assertParamExists('updateTemplateApiV1TemplatesTemplateIdPut', 'emailTemplateUpdate', emailTemplateUpdate)
            const localVarPath = `/templates/{template_id}`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailTemplateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìé Upload attachment
         * @summary Upload Attachment
         * @param {string} templateId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttachmentApiV1TemplatesTemplateIdAttachmentsPost: async (templateId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('uploadAttachmentApiV1TemplatesTemplateIdAttachmentsPost', 'templateId', templateId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadAttachmentApiV1TemplatesTemplateIdAttachmentsPost', 'file', file)
            const localVarPath = `/templates/{template_id}/attachments`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplatesApi - functional programming interface
 * @export
 */
export const TemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * ‚úÖ Create email template
         * @summary Create Template
         * @param {EmailTemplateCreate} emailTemplateCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTemplateApiV1TemplatesPost(emailTemplateCreate: EmailTemplateCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemplateApiV1TemplatesPost(emailTemplateCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TemplatesApi.createTemplateApiV1TemplatesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üóëÔ∏è Delete template
         * @summary Delete Template
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTemplateApiV1TemplatesTemplateIdDelete(templateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTemplateApiV1TemplatesTemplateIdDelete(templateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TemplatesApi.deleteTemplateApiV1TemplatesTemplateIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìã Duplicate template
         * @summary Duplicate Template
         * @param {string} templateId 
         * @param {string} newName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async duplicateTemplateApiV1TemplatesTemplateIdDuplicatePost(templateId: string, newName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.duplicateTemplateApiV1TemplatesTemplateIdDuplicatePost(templateId, newName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TemplatesApi.duplicateTemplateApiV1TemplatesTemplateIdDuplicatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìÑ Get template details
         * @summary Get Template
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemplateApiV1TemplatesTemplateIdGet(templateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTemplateApiV1TemplatesTemplateIdGet(templateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TemplatesApi.getTemplateApiV1TemplatesTemplateIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìã List templates with search
         * @summary List Templates
         * @param {string} sessionId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string | null} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTemplatesApiV1TemplatesGet(sessionId: string, limit?: number, offset?: number, search?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTemplatesApiV1TemplatesGet(sessionId, limit, offset, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TemplatesApi.listTemplatesApiV1TemplatesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üëÅÔ∏è Preview with macros
         * @summary Preview Template
         * @param {string} templateId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async previewTemplateApiV1TemplatesTemplateIdPreviewPost(templateId: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.previewTemplateApiV1TemplatesTemplateIdPreviewPost(templateId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TemplatesApi.previewTemplateApiV1TemplatesTemplateIdPreviewPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ‚úèÔ∏è Update template
         * @summary Update Template
         * @param {string} templateId 
         * @param {EmailTemplateUpdate} emailTemplateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTemplateApiV1TemplatesTemplateIdPut(templateId: string, emailTemplateUpdate: EmailTemplateUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTemplateApiV1TemplatesTemplateIdPut(templateId, emailTemplateUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TemplatesApi.updateTemplateApiV1TemplatesTemplateIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìé Upload attachment
         * @summary Upload Attachment
         * @param {string} templateId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadAttachmentApiV1TemplatesTemplateIdAttachmentsPost(templateId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadAttachmentApiV1TemplatesTemplateIdAttachmentsPost(templateId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TemplatesApi.uploadAttachmentApiV1TemplatesTemplateIdAttachmentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TemplatesApi - factory interface
 * @export
 */
export const TemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplatesApiFp(configuration)
    return {
        /**
         * ‚úÖ Create email template
         * @summary Create Template
         * @param {EmailTemplateCreate} emailTemplateCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplateApiV1TemplatesPost(emailTemplateCreate: EmailTemplateCreate, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createTemplateApiV1TemplatesPost(emailTemplateCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * üóëÔ∏è Delete template
         * @summary Delete Template
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplateApiV1TemplatesTemplateIdDelete(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteTemplateApiV1TemplatesTemplateIdDelete(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * üìã Duplicate template
         * @summary Duplicate Template
         * @param {string} templateId 
         * @param {string} newName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateTemplateApiV1TemplatesTemplateIdDuplicatePost(templateId: string, newName: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.duplicateTemplateApiV1TemplatesTemplateIdDuplicatePost(templateId, newName, options).then((request) => request(axios, basePath));
        },
        /**
         * üìÑ Get template details
         * @summary Get Template
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateApiV1TemplatesTemplateIdGet(templateId: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTemplateApiV1TemplatesTemplateIdGet(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * üìã List templates with search
         * @summary List Templates
         * @param {string} sessionId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string | null} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplatesApiV1TemplatesGet(sessionId: string, limit?: number, offset?: number, search?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listTemplatesApiV1TemplatesGet(sessionId, limit, offset, search, options).then((request) => request(axios, basePath));
        },
        /**
         * üëÅÔ∏è Preview with macros
         * @summary Preview Template
         * @param {string} templateId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewTemplateApiV1TemplatesTemplateIdPreviewPost(templateId: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.previewTemplateApiV1TemplatesTemplateIdPreviewPost(templateId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * ‚úèÔ∏è Update template
         * @summary Update Template
         * @param {string} templateId 
         * @param {EmailTemplateUpdate} emailTemplateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateApiV1TemplatesTemplateIdPut(templateId: string, emailTemplateUpdate: EmailTemplateUpdate, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateTemplateApiV1TemplatesTemplateIdPut(templateId, emailTemplateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * üìé Upload attachment
         * @summary Upload Attachment
         * @param {string} templateId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttachmentApiV1TemplatesTemplateIdAttachmentsPost(templateId: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.uploadAttachmentApiV1TemplatesTemplateIdAttachmentsPost(templateId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TemplatesApi - object-oriented interface
 * @export
 * @class TemplatesApi
 * @extends {BaseAPI}
 */
export class TemplatesApi extends BaseAPI {
    /**
     * ‚úÖ Create email template
     * @summary Create Template
     * @param {EmailTemplateCreate} emailTemplateCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public createTemplateApiV1TemplatesPost(emailTemplateCreate: EmailTemplateCreate, options?: RawAxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).createTemplateApiV1TemplatesPost(emailTemplateCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üóëÔ∏è Delete template
     * @summary Delete Template
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public deleteTemplateApiV1TemplatesTemplateIdDelete(templateId: string, options?: RawAxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).deleteTemplateApiV1TemplatesTemplateIdDelete(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìã Duplicate template
     * @summary Duplicate Template
     * @param {string} templateId 
     * @param {string} newName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public duplicateTemplateApiV1TemplatesTemplateIdDuplicatePost(templateId: string, newName: string, options?: RawAxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).duplicateTemplateApiV1TemplatesTemplateIdDuplicatePost(templateId, newName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìÑ Get template details
     * @summary Get Template
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public getTemplateApiV1TemplatesTemplateIdGet(templateId: string, options?: RawAxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).getTemplateApiV1TemplatesTemplateIdGet(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìã List templates with search
     * @summary List Templates
     * @param {string} sessionId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string | null} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public async listTemplatesApiV1TemplatesGet(sessionId: string, limit?: number, offset?: number, search?: string | null, options?: RawAxiosRequestConfig) {
        try {
            return await TemplatesApiFp(this.configuration)
                .listTemplatesApiV1TemplatesGet(sessionId, limit, offset, search, options)
                .then((request) => request(this.axios, this.basePath))
        } catch (err: unknown) {
            if (axios.isAxiosError(err) && err.response?.status === 404) {
                return err.response
            }
            throw err
        }
    }

    /**
     * üëÅÔ∏è Preview with macros
     * @summary Preview Template
     * @param {string} templateId 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public previewTemplateApiV1TemplatesTemplateIdPreviewPost(templateId: string, body: object, options?: RawAxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).previewTemplateApiV1TemplatesTemplateIdPreviewPost(templateId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ‚úèÔ∏è Update template
     * @summary Update Template
     * @param {string} templateId 
     * @param {EmailTemplateUpdate} emailTemplateUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public updateTemplateApiV1TemplatesTemplateIdPut(templateId: string, emailTemplateUpdate: EmailTemplateUpdate, options?: RawAxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).updateTemplateApiV1TemplatesTemplateIdPut(templateId, emailTemplateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìé Upload attachment
     * @summary Upload Attachment
     * @param {string} templateId 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public uploadAttachmentApiV1TemplatesTemplateIdAttachmentsPost(templateId: string, file: File, options?: RawAxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).uploadAttachmentApiV1TemplatesTemplateIdAttachmentsPost(templateId, file, options).then((request) => request(this.axios, this.basePath));
    }
}

