/* tslint:disable */
/* eslint-disable */
/**
 * SGPT API
 * ðŸ“§ Professional Email Marketing & IMAP Management Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosRequestConfig } from 'axios';
import axiosInstance from '@/http/axios'
import type { AxiosInstance } from 'axios'
const globalAxios: AxiosInstance = axiosInstance;
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from './base';
// @ts-ignore
import type { HTTPValidationError } from './models';
// @ts-ignore
import type { ModelsSchemasMessageResponse } from './models';
// @ts-ignore
import type { ProxyBulkTestResponse } from './models';
// @ts-ignore
import type { ProxyCreate } from './models';
// @ts-ignore
import type { ProxyPublic } from './models';
// @ts-ignore
import type { ProxyTestRequest } from './models';
// @ts-ignore
import type { ProxyUpdate } from './models';
// @ts-ignore
import type { SuccessResponse } from './models';
/**
 * ProxiesApi - axios parameter creator
 * @export
 */
export const ProxiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bulk Upload Proxies
         * @param {string} sessionId 
         * @param {string} proxyData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUploadProxiesApiV1ProxiesSessionIdBulkUploadPost: async (sessionId: string, proxyData: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('bulkUploadProxiesApiV1ProxiesSessionIdBulkUploadPost', 'sessionId', sessionId)
            // verify required parameter 'proxyData' is not null or undefined
            assertParamExists('bulkUploadProxiesApiV1ProxiesSessionIdBulkUploadPost', 'proxyData', proxyData)
            const localVarPath = `/api/v1/proxies/{session_id}/bulk-upload`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (proxyData !== undefined) {
                localVarQueryParameter['proxy_data'] = proxyData;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check Proxies
         * @param {string} sessionId 
         * @param {number} [timeout] 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkProxiesApiV1ProxiesSessionIdCheckPost: async (sessionId: string, timeout?: number, requestBody?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('checkProxiesApiV1ProxiesSessionIdCheckPost', 'sessionId', sessionId)
            const localVarPath = `/api/v1/proxies/{session_id}/check`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (timeout !== undefined) {
                localVarQueryParameter['timeout'] = timeout;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Proxy
         * @param {string} sessionId 
         * @param {ProxyCreate} proxyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProxyApiV1ProxiesSessionIdProxiesPost: async (sessionId: string, proxyCreate: ProxyCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('createProxyApiV1ProxiesSessionIdProxiesPost', 'sessionId', sessionId)
            // verify required parameter 'proxyCreate' is not null or undefined
            assertParamExists('createProxyApiV1ProxiesSessionIdProxiesPost', 'proxyCreate', proxyCreate)
            const localVarPath = `/api/v1/proxies/{session_id}/proxies`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(proxyCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Proxy
         * @param {string} sessionId Session UUID
         * @param {string} proxyId Proxy UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProxyApiV1ProxiesSessionIdProxiesProxyIdDelete: async (sessionId: string, proxyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('deleteProxyApiV1ProxiesSessionIdProxiesProxyIdDelete', 'sessionId', sessionId)
            // verify required parameter 'proxyId' is not null or undefined
            assertParamExists('deleteProxyApiV1ProxiesSessionIdProxiesProxyIdDelete', 'proxyId', proxyId)
            const localVarPath = `/api/v1/proxies/{session_id}/proxies/{proxy_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"proxy_id"}}`, encodeURIComponent(String(proxyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Check Progress
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckProgressApiV1ProxiesSessionIdCheckProgressGet: async (sessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getCheckProgressApiV1ProxiesSessionIdCheckProgressGet', 'sessionId', sessionId)
            const localVarPath = `/api/v1/proxies/{session_id}/check-progress`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Proxies
         * @param {string} sessionId 
         * @param {string} [statusFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProxiesApiV1ProxiesSessionIdProxiesGet: async (sessionId: string, statusFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('listProxiesApiV1ProxiesSessionIdProxiesGet', 'sessionId', sessionId)
            const localVarPath = `/api/v1/proxies/{session_id}/proxies`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (statusFilter !== undefined) {
                localVarQueryParameter['status_filter'] = statusFilter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Parse proxy list from file and return parsed servers
         * @summary Parse Proxy List Endpoint
         * @param {File} proxyFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parseProxyListEndpointApiV1ProxiesParsePost: async (proxyFile: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proxyFile' is not null or undefined
            assertParamExists('parseProxyListEndpointApiV1ProxiesParsePost', 'proxyFile', proxyFile)
            const localVarPath = `/api/v1/proxies/parse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (proxyFile !== undefined) { 
                localVarFormParams.append('proxy_file', proxyFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test proxy servers
         * @summary Test Proxy Servers
         * @param {ProxyTestRequest} proxyTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testProxyServersApiV1ProxiesTestPost: async (proxyTestRequest: ProxyTestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proxyTestRequest' is not null or undefined
            assertParamExists('testProxyServersApiV1ProxiesTestPost', 'proxyTestRequest', proxyTestRequest)
            const localVarPath = `/api/v1/proxies/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(proxyTestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test proxy servers from uploaded file
         * @summary Test Proxy Servers From File
         * @param {File} proxyFile 
         * @param {number} [timeout] 
         * @param {string} [testUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testProxyServersFromFileApiV1ProxiesTestFilePost: async (proxyFile: File, timeout?: number, testUrl?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proxyFile' is not null or undefined
            assertParamExists('testProxyServersFromFileApiV1ProxiesTestFilePost', 'proxyFile', proxyFile)
            const localVarPath = `/api/v1/proxies/test-file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (timeout !== undefined) {
                localVarQueryParameter['timeout'] = timeout;
            }

            if (testUrl !== undefined) {
                localVarQueryParameter['test_url'] = testUrl;
            }


            if (proxyFile !== undefined) { 
                localVarFormParams.append('proxy_file', proxyFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update existing proxy server
         * @summary Update Proxy
         * @param {string} sessionId 
         * @param {string} proxyId 
         * @param {ProxyUpdate} proxyUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProxyApiV1ProxiesSessionIdProxiesProxyIdPut: async (sessionId: string, proxyId: string, proxyUpdate: ProxyUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('updateProxyApiV1ProxiesSessionIdProxiesProxyIdPut', 'sessionId', sessionId)
            // verify required parameter 'proxyId' is not null or undefined
            assertParamExists('updateProxyApiV1ProxiesSessionIdProxiesProxyIdPut', 'proxyId', proxyId)
            // verify required parameter 'proxyUpdate' is not null or undefined
            assertParamExists('updateProxyApiV1ProxiesSessionIdProxiesProxyIdPut', 'proxyUpdate', proxyUpdate)
            const localVarPath = `/api/v1/proxy/{session_id}/proxies/{proxy_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"proxy_id"}}`, encodeURIComponent(String(proxyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(proxyUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProxiesApi - functional programming interface
 * @export
 */
export const ProxiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProxiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Bulk Upload Proxies
         * @param {string} sessionId 
         * @param {string} proxyData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUploadProxiesApiV1ProxiesSessionIdBulkUploadPost(sessionId: string, proxyData: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsSchemasMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUploadProxiesApiV1ProxiesSessionIdBulkUploadPost(sessionId, proxyData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProxiesApi.bulkUploadProxiesApiV1ProxiesSessionIdBulkUploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check Proxies
         * @param {string} sessionId 
         * @param {number} [timeout] 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkProxiesApiV1ProxiesSessionIdCheckPost(sessionId: string, timeout?: number, requestBody?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsSchemasMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkProxiesApiV1ProxiesSessionIdCheckPost(sessionId, timeout, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProxiesApi.checkProxiesApiV1ProxiesSessionIdCheckPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Proxy
         * @param {string} sessionId 
         * @param {ProxyCreate} proxyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProxyApiV1ProxiesSessionIdProxiesPost(sessionId: string, proxyCreate: ProxyCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProxyApiV1ProxiesSessionIdProxiesPost(sessionId, proxyCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProxiesApi.createProxyApiV1ProxiesSessionIdProxiesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Proxy
         * @param {string} sessionId Session UUID
         * @param {string} proxyId Proxy UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProxyApiV1ProxiesSessionIdProxiesProxyIdDelete(sessionId: string, proxyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsSchemasMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProxyApiV1ProxiesSessionIdProxiesProxyIdDelete(sessionId, proxyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProxiesApi.deleteProxyApiV1ProxiesSessionIdProxiesProxyIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Check Progress
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCheckProgressApiV1ProxiesSessionIdCheckProgressGet(sessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCheckProgressApiV1ProxiesSessionIdCheckProgressGet(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProxiesApi.getCheckProgressApiV1ProxiesSessionIdCheckProgressGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Proxies
         * @param {string} sessionId 
         * @param {string} [statusFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProxiesApiV1ProxiesSessionIdProxiesGet(sessionId: string, statusFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProxyPublic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProxiesApiV1ProxiesSessionIdProxiesGet(sessionId, statusFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProxiesApi.listProxiesApiV1ProxiesSessionIdProxiesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Parse proxy list from file and return parsed servers
         * @summary Parse Proxy List Endpoint
         * @param {File} proxyFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parseProxyListEndpointApiV1ProxiesParsePost(proxyFile: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parseProxyListEndpointApiV1ProxiesParsePost(proxyFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProxiesApi.parseProxyListEndpointApiV1ProxiesParsePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test proxy servers
         * @summary Test Proxy Servers
         * @param {ProxyTestRequest} proxyTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testProxyServersApiV1ProxiesTestPost(proxyTestRequest: ProxyTestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyBulkTestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testProxyServersApiV1ProxiesTestPost(proxyTestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProxiesApi.testProxyServersApiV1ProxiesTestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test proxy servers from uploaded file
         * @summary Test Proxy Servers From File
         * @param {File} proxyFile 
         * @param {number} [timeout] 
         * @param {string} [testUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testProxyServersFromFileApiV1ProxiesTestFilePost(proxyFile: File, timeout?: number, testUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyBulkTestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testProxyServersFromFileApiV1ProxiesTestFilePost(proxyFile, timeout, testUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProxiesApi.testProxyServersFromFileApiV1ProxiesTestFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update existing proxy server
         * @summary Update Proxy
         * @param {string} sessionId 
         * @param {string} proxyId 
         * @param {ProxyUpdate} proxyUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProxyApiV1ProxiesSessionIdProxiesProxyIdPut(sessionId: string, proxyId: string, proxyUpdate: ProxyUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProxyApiV1ProxiesSessionIdProxiesProxyIdPut(sessionId, proxyId, proxyUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProxiesApi.updateProxyApiV1ProxiesSessionIdProxiesProxyIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProxiesApi - factory interface
 * @export
 */
export const ProxiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProxiesApiFp(configuration)
    return {
        /**
         * 
         * @summary Bulk Upload Proxies
         * @param {string} sessionId 
         * @param {string} proxyData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUploadProxiesApiV1ProxiesSessionIdBulkUploadPost(sessionId: string, proxyData: string, options?: RawAxiosRequestConfig): AxiosPromise<ModelsSchemasMessageResponse> {
            return localVarFp.bulkUploadProxiesApiV1ProxiesSessionIdBulkUploadPost(sessionId, proxyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check Proxies
         * @param {string} sessionId 
         * @param {number} [timeout] 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkProxiesApiV1ProxiesSessionIdCheckPost(sessionId: string, timeout?: number, requestBody?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<ModelsSchemasMessageResponse> {
            return localVarFp.checkProxiesApiV1ProxiesSessionIdCheckPost(sessionId, timeout, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Proxy
         * @param {string} sessionId 
         * @param {ProxyCreate} proxyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProxyApiV1ProxiesSessionIdProxiesPost(sessionId: string, proxyCreate: ProxyCreate, options?: RawAxiosRequestConfig): AxiosPromise<ProxyPublic> {
            return localVarFp.createProxyApiV1ProxiesSessionIdProxiesPost(sessionId, proxyCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Proxy
         * @param {string} sessionId Session UUID
         * @param {string} proxyId Proxy UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProxyApiV1ProxiesSessionIdProxiesProxyIdDelete(sessionId: string, proxyId: string, options?: RawAxiosRequestConfig): AxiosPromise<ModelsSchemasMessageResponse> {
            return localVarFp.deleteProxyApiV1ProxiesSessionIdProxiesProxyIdDelete(sessionId, proxyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Check Progress
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckProgressApiV1ProxiesSessionIdCheckProgressGet(sessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getCheckProgressApiV1ProxiesSessionIdCheckProgressGet(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Proxies
         * @param {string} sessionId 
         * @param {string} [statusFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProxiesApiV1ProxiesSessionIdProxiesGet(sessionId: string, statusFilter?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProxyPublic>> {
            return localVarFp.listProxiesApiV1ProxiesSessionIdProxiesGet(sessionId, statusFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Parse proxy list from file and return parsed servers
         * @summary Parse Proxy List Endpoint
         * @param {File} proxyFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parseProxyListEndpointApiV1ProxiesParsePost(proxyFile: File, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.parseProxyListEndpointApiV1ProxiesParsePost(proxyFile, options).then((request) => request(axios, basePath));
        },
        /**
         * Test proxy servers
         * @summary Test Proxy Servers
         * @param {ProxyTestRequest} proxyTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testProxyServersApiV1ProxiesTestPost(proxyTestRequest: ProxyTestRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProxyBulkTestResponse> {
            return localVarFp.testProxyServersApiV1ProxiesTestPost(proxyTestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Test proxy servers from uploaded file
         * @summary Test Proxy Servers From File
         * @param {File} proxyFile 
         * @param {number} [timeout] 
         * @param {string} [testUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testProxyServersFromFileApiV1ProxiesTestFilePost(proxyFile: File, timeout?: number, testUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<ProxyBulkTestResponse> {
            return localVarFp.testProxyServersFromFileApiV1ProxiesTestFilePost(proxyFile, timeout, testUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * Update existing proxy server
         * @summary Update Proxy
         * @param {string} sessionId 
         * @param {string} proxyId 
         * @param {ProxyUpdate} proxyUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProxyApiV1ProxiesSessionIdProxiesProxyIdPut(sessionId: string, proxyId: string, proxyUpdate: ProxyUpdate, options?: RawAxiosRequestConfig): AxiosPromise<ProxyPublic> {
            return localVarFp.updateProxyApiV1ProxiesSessionIdProxiesProxyIdPut(sessionId, proxyId, proxyUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProxiesApi - object-oriented interface
 * @export
 * @class ProxiesApi
 * @extends {BaseAPI}
 */
export class ProxiesApi extends BaseAPI {
    /**
     * 
     * @summary Bulk Upload Proxies
     * @param {string} sessionId 
     * @param {string} proxyData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public bulkUploadProxiesApiV1ProxiesSessionIdBulkUploadPost(sessionId: string, proxyData: string, options?: RawAxiosRequestConfig) {
        return ProxiesApiFp(this.configuration).bulkUploadProxiesApiV1ProxiesSessionIdBulkUploadPost(sessionId, proxyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check Proxies
     * @param {string} sessionId 
     * @param {number} [timeout] 
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public checkProxiesApiV1ProxiesSessionIdCheckPost(sessionId: string, timeout?: number, requestBody?: Array<string>, options?: RawAxiosRequestConfig) {
        return ProxiesApiFp(this.configuration).checkProxiesApiV1ProxiesSessionIdCheckPost(sessionId, timeout, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Proxy
     * @param {string} sessionId 
     * @param {ProxyCreate} proxyCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public createProxyApiV1ProxiesSessionIdProxiesPost(sessionId: string, proxyCreate: ProxyCreate, options?: RawAxiosRequestConfig) {
        return ProxiesApiFp(this.configuration).createProxyApiV1ProxiesSessionIdProxiesPost(sessionId, proxyCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Proxy
     * @param {string} sessionId Session UUID
     * @param {string} proxyId Proxy UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public deleteProxyApiV1ProxiesSessionIdProxiesProxyIdDelete(sessionId: string, proxyId: string, options?: RawAxiosRequestConfig) {
        return ProxiesApiFp(this.configuration).deleteProxyApiV1ProxiesSessionIdProxiesProxyIdDelete(sessionId, proxyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Check Progress
     * @param {string} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public getCheckProgressApiV1ProxiesSessionIdCheckProgressGet(sessionId: string, options?: RawAxiosRequestConfig) {
        return ProxiesApiFp(this.configuration).getCheckProgressApiV1ProxiesSessionIdCheckProgressGet(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Proxies
     * @param {string} sessionId 
     * @param {string} [statusFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public listProxiesApiV1ProxiesSessionIdProxiesGet(sessionId: string, statusFilter?: string, options?: RawAxiosRequestConfig) {
        return ProxiesApiFp(this.configuration).listProxiesApiV1ProxiesSessionIdProxiesGet(sessionId, statusFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Parse proxy list from file and return parsed servers
     * @summary Parse Proxy List Endpoint
     * @param {File} proxyFile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public parseProxyListEndpointApiV1ProxiesParsePost(proxyFile: File, options?: RawAxiosRequestConfig) {
        return ProxiesApiFp(this.configuration).parseProxyListEndpointApiV1ProxiesParsePost(proxyFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test proxy servers
     * @summary Test Proxy Servers
     * @param {ProxyTestRequest} proxyTestRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public testProxyServersApiV1ProxiesTestPost(proxyTestRequest: ProxyTestRequest, options?: RawAxiosRequestConfig) {
        return ProxiesApiFp(this.configuration).testProxyServersApiV1ProxiesTestPost(proxyTestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test proxy servers from uploaded file
     * @summary Test Proxy Servers From File
     * @param {File} proxyFile 
     * @param {number} [timeout] 
     * @param {string} [testUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public testProxyServersFromFileApiV1ProxiesTestFilePost(proxyFile: File, timeout?: number, testUrl?: string, options?: RawAxiosRequestConfig) {
        return ProxiesApiFp(this.configuration).testProxyServersFromFileApiV1ProxiesTestFilePost(proxyFile, timeout, testUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update existing proxy server
     * @summary Update Proxy
     * @param {string} sessionId 
     * @param {string} proxyId 
     * @param {ProxyUpdate} proxyUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public updateProxyApiV1ProxiesSessionIdProxiesProxyIdPut(sessionId: string, proxyId: string, proxyUpdate: ProxyUpdate, options?: RawAxiosRequestConfig) {
        return ProxiesApiFp(this.configuration).updateProxyApiV1ProxiesSessionIdProxiesProxyIdPut(sessionId, proxyId, proxyUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

