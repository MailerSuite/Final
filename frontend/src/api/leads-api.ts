/* tslint:disable */
/* eslint-disable */
/**
 * SGPT API
 * üìß Professional Email Marketing & IMAP Management Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosRequestConfig } from 'axios';
import axios from 'axios'
import type { AxiosInstance } from 'axios'
import { apiClient } from '@/http/stable-api-client'
const globalAxios: AxiosInstance = (apiClient as any).axiosInstance ?? axios.create();
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError, operationServerMap } from './base';
// @ts-ignore
import type { HTTPValidationError } from './models';
// @ts-ignore
import type { LeadBaseCreate } from './models';
// @ts-ignore
import type { LeadBaseResponse } from './models';
// @ts-ignore
import type { LeadBaseStatus } from './models';
// @ts-ignore
import type { LeadBaseUpdate } from './models';
// @ts-ignore
import type { LeadEntryList } from './models';
// @ts-ignore
import type { LeadEntryResponse } from './models';
// @ts-ignore
import type { LeadEntryUpdate } from './models';
// @ts-ignore
import type { UploadResult } from './models';
/**
 * LeadsApi - axios parameter creator
 * @export
 */
export const LeadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * üìÅ Create a new lead base
         * @summary Create Lead Base
         * @param {LeadBaseCreate} leadBaseCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLeadBaseApiV1LeadBasesPost: async (leadBaseCreate: LeadBaseCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leadBaseCreate' is not null or undefined
            assertParamExists('createLeadBaseApiV1LeadBasesPost', 'leadBaseCreate', leadBaseCreate)
            const localVarPath = `/api/v1/lead-bases/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(leadBaseCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìÅ Delete a lead base
         * @summary Delete Lead Base
         * @param {string} baseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLeadBaseApiV1LeadBasesBaseIdDelete: async (baseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseId' is not null or undefined
            assertParamExists('deleteLeadBaseApiV1LeadBasesBaseIdDelete', 'baseId', baseId)
            const localVarPath = `/api/v1/lead-bases/{base_id}`
                .replace(`{${"base_id"}}`, encodeURIComponent(String(baseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üë§ Delete a lead
         * @summary Delete Lead Entry
         * @param {string} leadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLeadEntryApiV1LeadsLeadIdDelete: async (leadId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leadId' is not null or undefined
            assertParamExists('deleteLeadEntryApiV1LeadsLeadIdDelete', 'leadId', leadId)
            const localVarPath = `/api/v1/leads/{lead_id}`
                .replace(`{${"lead_id"}}`, encodeURIComponent(String(leadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìÅ Get lead base information
         * @summary Get Lead Base
         * @param {string} baseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeadBaseApiV1LeadBasesBaseIdGet: async (baseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseId' is not null or undefined
            assertParamExists('getLeadBaseApiV1LeadBasesBaseIdGet', 'baseId', baseId)
            const localVarPath = `/api/v1/lead-bases/{base_id}`
                .replace(`{${"base_id"}}`, encodeURIComponent(String(baseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìÅ Get all lead bases. Supports: pagination (skip, limit), filter by status and country, search by name and comment
         * @summary Get Lead Bases
         * @param {number} [skip] Number of records to skip
         * @param {number} [limit] Maximum number of records
         * @param {LeadBaseStatus | null} [status] Filter by status
         * @param {string | null} [country] Filter by country
         * @param {string | null} [search] Search by name or comment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeadBasesApiV1LeadBasesGet: async (skip?: number, limit?: number, status?: LeadBaseStatus | null, country?: string | null, search?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lead-bases/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üë§ Get information about a specific lead
         * @summary Get Lead By Id
         * @param {string} leadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeadByIdApiV1LeadsLeadIdGet: async (leadId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leadId' is not null or undefined
            assertParamExists('getLeadByIdApiV1LeadsLeadIdGet', 'leadId', leadId)
            const localVarPath = `/api/v1/leads/{lead_id}`
                .replace(`{${"lead_id"}}`, encodeURIComponent(String(leadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üë§ Get leads in a specific base. Supports: pagination (skip, limit), filter by lead status, search by email, first name or last name
         * @summary Get Leads In Base
         * @param {string} baseId 
         * @param {number} [skip] Number of records to skip
         * @param {number} [limit] Maximum number of records
         * @param {string | null} [status] Filter by lead status
         * @param {string | null} [search] Search by email, first name or last name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeadsInBaseApiV1LeadBasesBaseIdLeadsGet: async (baseId: string, skip?: number, limit?: number, status?: string | null, search?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseId' is not null or undefined
            assertParamExists('getLeadsInBaseApiV1LeadBasesBaseIdLeadsGet', 'baseId', baseId)
            const localVarPath = `/api/v1/lead-bases/{base_id}/leads/`
                .replace(`{${"base_id"}}`, encodeURIComponent(String(baseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìÅ Update lead base (name, status, comment)
         * @summary Update Lead Base
         * @param {string} baseId 
         * @param {LeadBaseUpdate} leadBaseUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLeadBaseApiV1LeadBasesBaseIdPut: async (baseId: string, leadBaseUpdate: LeadBaseUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseId' is not null or undefined
            assertParamExists('updateLeadBaseApiV1LeadBasesBaseIdPut', 'baseId', baseId)
            // verify required parameter 'leadBaseUpdate' is not null or undefined
            assertParamExists('updateLeadBaseApiV1LeadBasesBaseIdPut', 'leadBaseUpdate', leadBaseUpdate)
            const localVarPath = `/api/v1/lead-bases/{base_id}`
                .replace(`{${"base_id"}}`, encodeURIComponent(String(baseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(leadBaseUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üë§ Update lead information (first name, last name, status)
         * @summary Update Lead Entry
         * @param {string} leadId 
         * @param {LeadEntryUpdate} leadEntryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLeadEntryApiV1LeadsLeadIdPut: async (leadId: string, leadEntryUpdate: LeadEntryUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leadId' is not null or undefined
            assertParamExists('updateLeadEntryApiV1LeadsLeadIdPut', 'leadId', leadId)
            // verify required parameter 'leadEntryUpdate' is not null or undefined
            assertParamExists('updateLeadEntryApiV1LeadsLeadIdPut', 'leadEntryUpdate', leadEntryUpdate)
            const localVarPath = `/api/v1/leads/{lead_id}`
                .replace(`{${"lead_id"}}`, encodeURIComponent(String(leadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(leadEntryUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üì§ Upload CSV file with email leads to a base. Expected CSV format: header must contain 'email' (required), 'first_name', 'last_name'. Example: email,first_name,last_name; test@example.com,John,Doe
         * @summary Upload Csv To Base
         * @param {string} baseId 
         * @param {File} file CSV or TXT file with leads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCsvToBaseApiV1LeadBasesBaseIdUploadPost: async (baseId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseId' is not null or undefined
            assertParamExists('uploadCsvToBaseApiV1LeadBasesBaseIdUploadPost', 'baseId', baseId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadCsvToBaseApiV1LeadBasesBaseIdUploadPost', 'file', file)
            const localVarPath = `/api/v1/lead-bases/{base_id}/upload`
                .replace(`{${"base_id"}}`, encodeURIComponent(String(baseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ‚úÖ Run email validation for a specific lead. Note: Current implementation performs basic validation. Full SMTP validation requires background tasks (Celery).
         * @summary Validate Single Lead Email
         * @param {string} leadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateSingleLeadEmailApiV1LeadsLeadIdValidateEmailPost: async (leadId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leadId' is not null or undefined
            assertParamExists('validateSingleLeadEmailApiV1LeadsLeadIdValidateEmailPost', 'leadId', leadId)
            const localVarPath = `/api/v1/leads/{lead_id}/validate-email`
                .replace(`{${"lead_id"}}`, encodeURIComponent(String(leadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeadsApi - functional programming interface
 * @export
 */
export const LeadsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeadsApiAxiosParamCreator(configuration)
    return {
        /**
         * üìÅ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É –ª–∏–¥–æ–≤
         * @summary Create Lead Base
         * @param {LeadBaseCreate} leadBaseCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLeadBaseApiV1LeadBasesPost(leadBaseCreate: LeadBaseCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeadBaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLeadBaseApiV1LeadBasesPost(leadBaseCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LeadsApi.createLeadBaseApiV1LeadBasesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìÅ –£–¥–∞–ª–∏—Ç—å –±–∞–∑—É –ª–∏–¥–æ–≤
         * @summary Delete Lead Base
         * @param {string} baseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLeadBaseApiV1LeadBasesBaseIdDelete(baseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLeadBaseApiV1LeadBasesBaseIdDelete(baseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LeadsApi.deleteLeadBaseApiV1LeadBasesBaseIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üë§ –£–¥–∞–ª–∏—Ç—å –ª–∏–¥
         * @summary Delete Lead Entry
         * @param {string} leadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLeadEntryApiV1LeadsLeadIdDelete(leadId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLeadEntryApiV1LeadsLeadIdDelete(leadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LeadsApi.deleteLeadEntryApiV1LeadsLeadIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìÅ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –±–∞–∑–µ –ª–∏–¥–æ–≤
         * @summary Get Lead Base
         * @param {string} baseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeadBaseApiV1LeadBasesBaseIdGet(baseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeadBaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeadBaseApiV1LeadBasesBaseIdGet(baseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LeadsApi.getLeadBaseApiV1LeadBasesBaseIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìÅ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–∑ –ª–∏–¥–æ–≤  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: - –ü–∞–≥–∏–Ω–∞—Ü–∏—é (skip, limit) - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ —Å—Ç—Ä–∞–Ω–µ - –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
         * @summary Get Lead Bases
         * @param {number} [skip] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
         * @param {number} [limit] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
         * @param {LeadBaseStatus | null} [status] –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
         * @param {string | null} [country] –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ
         * @param {string | null} [search] –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeadBasesApiV1LeadBasesGet(skip?: number, limit?: number, status?: LeadBaseStatus | null, country?: string | null, search?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LeadBaseResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeadBasesApiV1LeadBasesGet(skip, limit, status, country, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LeadsApi.getLeadBasesApiV1LeadBasesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üë§ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ª–∏–¥—É
         * @summary Get Lead By Id
         * @param {string} leadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeadByIdApiV1LeadsLeadIdGet(leadId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeadEntryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeadByIdApiV1LeadsLeadIdGet(leadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LeadsApi.getLeadByIdApiV1LeadsLeadIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üë§ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑–µ  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: - –ü–∞–≥–∏–Ω–∞—Ü–∏—é (skip, limit) - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Ç–∞—Ç—É—Å—É –ª–∏–¥–∞ - –ü–æ–∏—Å–∫ –ø–æ email, –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏
         * @summary Get Leads In Base
         * @param {string} baseId 
         * @param {number} [skip] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
         * @param {number} [limit] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
         * @param {string | null} [status] –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –ª–∏–¥–∞
         * @param {string | null} [search] –ü–æ–∏—Å–∫ –ø–æ email, –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeadsInBaseApiV1LeadBasesBaseIdLeadsGet(baseId: string, skip?: number, limit?: number, status?: string | null, search?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeadEntryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeadsInBaseApiV1LeadBasesBaseIdLeadsGet(baseId, skip, limit, status, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LeadsApi.getLeadsInBaseApiV1LeadBasesBaseIdLeadsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìÅ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –ª–∏–¥–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Ç–∞—Ç—É—Å, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
         * @summary Update Lead Base
         * @param {string} baseId 
         * @param {LeadBaseUpdate} leadBaseUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLeadBaseApiV1LeadBasesBaseIdPut(baseId: string, leadBaseUpdate: LeadBaseUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeadBaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLeadBaseApiV1LeadBasesBaseIdPut(baseId, leadBaseUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LeadsApi.updateLeadBaseApiV1LeadBasesBaseIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üë§ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ª–∏–¥—É (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è, —Å—Ç–∞—Ç—É—Å)
         * @summary Update Lead Entry
         * @param {string} leadId 
         * @param {LeadEntryUpdate} leadEntryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLeadEntryApiV1LeadsLeadIdPut(leadId: string, leadEntryUpdate: LeadEntryUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeadEntryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLeadEntryApiV1LeadsLeadIdPut(leadId, leadEntryUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LeadsApi.updateLeadEntryApiV1LeadsLeadIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª —Å email-–ª–∏–¥–∞–º–∏ –≤ –±–∞–∑—É  –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç CSV: - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å \'email\' (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), \'first_name\', \'last_name\' - –ü—Ä–∏–º–µ—Ä: email,first_name,last_name - –ü—Ä–∏–º–µ—Ä: test@example.com,John,Doe
         * @summary Upload Csv To Base
         * @param {string} baseId 
         * @param {File} file CSV –∏–ª–∏ TXT —Ñ–∞–π–ª —Å –ª–∏–¥–∞–º–∏
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadCsvToBaseApiV1LeadBasesBaseIdUploadPost(baseId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadCsvToBaseApiV1LeadBasesBaseIdUploadPost(baseId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LeadsApi.uploadCsvToBaseApiV1LeadBasesBaseIdUploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é email –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏–¥–∞  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é. –î–ª—è –ø–æ–ª–Ω–æ–π SMTP-–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–æ–Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ (Celery).
         * @summary Validate Single Lead Email
         * @param {string} leadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateSingleLeadEmailApiV1LeadsLeadIdValidateEmailPost(leadId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateSingleLeadEmailApiV1LeadsLeadIdValidateEmailPost(leadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LeadsApi.validateSingleLeadEmailApiV1LeadsLeadIdValidateEmailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LeadsApi - factory interface
 * @export
 */
export const LeadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeadsApiFp(configuration)
    return {
        /**
         * üìÅ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É –ª–∏–¥–æ–≤
         * @summary Create Lead Base
         * @param {LeadBaseCreate} leadBaseCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLeadBaseApiV1LeadBasesPost(leadBaseCreate: LeadBaseCreate, options?: RawAxiosRequestConfig): AxiosPromise<LeadBaseResponse> {
            return localVarFp.createLeadBaseApiV1LeadBasesPost(leadBaseCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * üìÅ –£–¥–∞–ª–∏—Ç—å –±–∞–∑—É –ª–∏–¥–æ–≤
         * @summary Delete Lead Base
         * @param {string} baseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLeadBaseApiV1LeadBasesBaseIdDelete(baseId: string, options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.deleteLeadBaseApiV1LeadBasesBaseIdDelete(baseId, options).then((request) => request(axios, basePath));
        },
        /**
         * üë§ –£–¥–∞–ª–∏—Ç—å –ª–∏–¥
         * @summary Delete Lead Entry
         * @param {string} leadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLeadEntryApiV1LeadsLeadIdDelete(leadId: string, options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.deleteLeadEntryApiV1LeadsLeadIdDelete(leadId, options).then((request) => request(axios, basePath));
        },
        /**
         * üìÅ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –±–∞–∑–µ –ª–∏–¥–æ–≤
         * @summary Get Lead Base
         * @param {string} baseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeadBaseApiV1LeadBasesBaseIdGet(baseId: string, options?: RawAxiosRequestConfig): AxiosPromise<LeadBaseResponse> {
            return localVarFp.getLeadBaseApiV1LeadBasesBaseIdGet(baseId, options).then((request) => request(axios, basePath));
        },
        /**
         * üìÅ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–∑ –ª–∏–¥–æ–≤  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: - –ü–∞–≥–∏–Ω–∞—Ü–∏—é (skip, limit) - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ —Å—Ç—Ä–∞–Ω–µ - –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
         * @summary Get Lead Bases
         * @param {number} [skip] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
         * @param {number} [limit] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
         * @param {LeadBaseStatus | null} [status] –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
         * @param {string | null} [country] –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ
         * @param {string | null} [search] –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeadBasesApiV1LeadBasesGet(skip?: number, limit?: number, status?: LeadBaseStatus | null, country?: string | null, search?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<LeadBaseResponse>> {
            return localVarFp.getLeadBasesApiV1LeadBasesGet(skip, limit, status, country, search, options).then((request) => request(axios, basePath));
        },
        /**
         * üë§ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ª–∏–¥—É
         * @summary Get Lead By Id
         * @param {string} leadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeadByIdApiV1LeadsLeadIdGet(leadId: string, options?: RawAxiosRequestConfig): AxiosPromise<LeadEntryResponse> {
            return localVarFp.getLeadByIdApiV1LeadsLeadIdGet(leadId, options).then((request) => request(axios, basePath));
        },
        /**
         * üë§ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑–µ  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: - –ü–∞–≥–∏–Ω–∞—Ü–∏—é (skip, limit) - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Ç–∞—Ç—É—Å—É –ª–∏–¥–∞ - –ü–æ–∏—Å–∫ –ø–æ email, –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏
         * @summary Get Leads In Base
         * @param {string} baseId 
         * @param {number} [skip] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
         * @param {number} [limit] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
         * @param {string | null} [status] –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –ª–∏–¥–∞
         * @param {string | null} [search] –ü–æ–∏—Å–∫ –ø–æ email, –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeadsInBaseApiV1LeadBasesBaseIdLeadsGet(baseId: string, skip?: number, limit?: number, status?: string | null, search?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<LeadEntryList> {
            return localVarFp.getLeadsInBaseApiV1LeadBasesBaseIdLeadsGet(baseId, skip, limit, status, search, options).then((request) => request(axios, basePath));
        },
        /**
         * üìÅ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –ª–∏–¥–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Ç–∞—Ç—É—Å, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
         * @summary Update Lead Base
         * @param {string} baseId 
         * @param {LeadBaseUpdate} leadBaseUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLeadBaseApiV1LeadBasesBaseIdPut(baseId: string, leadBaseUpdate: LeadBaseUpdate, options?: RawAxiosRequestConfig): AxiosPromise<LeadBaseResponse> {
            return localVarFp.updateLeadBaseApiV1LeadBasesBaseIdPut(baseId, leadBaseUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * üë§ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ª–∏–¥—É (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è, —Å—Ç–∞—Ç—É—Å)
         * @summary Update Lead Entry
         * @param {string} leadId 
         * @param {LeadEntryUpdate} leadEntryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLeadEntryApiV1LeadsLeadIdPut(leadId: string, leadEntryUpdate: LeadEntryUpdate, options?: RawAxiosRequestConfig): AxiosPromise<LeadEntryResponse> {
            return localVarFp.updateLeadEntryApiV1LeadsLeadIdPut(leadId, leadEntryUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª —Å email-–ª–∏–¥–∞–º–∏ –≤ –±–∞–∑—É  –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç CSV: - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å \'email\' (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), \'first_name\', \'last_name\' - –ü—Ä–∏–º–µ—Ä: email,first_name,last_name - –ü—Ä–∏–º–µ—Ä: test@example.com,John,Doe
         * @summary Upload Csv To Base
         * @param {string} baseId 
         * @param {File} file CSV –∏–ª–∏ TXT —Ñ–∞–π–ª —Å –ª–∏–¥–∞–º–∏
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCsvToBaseApiV1LeadBasesBaseIdUploadPost(baseId: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<UploadResult> {
            return localVarFp.uploadCsvToBaseApiV1LeadBasesBaseIdUploadPost(baseId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * ‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é email –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏–¥–∞  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é. –î–ª—è –ø–æ–ª–Ω–æ–π SMTP-–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–æ–Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ (Celery).
         * @summary Validate Single Lead Email
         * @param {string} leadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateSingleLeadEmailApiV1LeadsLeadIdValidateEmailPost(leadId: string, options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.validateSingleLeadEmailApiV1LeadsLeadIdValidateEmailPost(leadId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LeadsApi - object-oriented interface
 * @export
 * @class LeadsApi
 * @extends {BaseAPI}
 */
export class LeadsApi extends BaseAPI {
    /**
     * üìÅ Create a new lead base
     * @summary Create Lead Base
     * @param {LeadBaseCreate} leadBaseCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public createLeadBaseApiV1LeadBasesPost(leadBaseCreate: LeadBaseCreate, options?: RawAxiosRequestConfig) {
        return LeadsApiFp(this.configuration).createLeadBaseApiV1LeadBasesPost(leadBaseCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìÅ Delete a lead base
     * @summary Delete Lead Base
     * @param {string} baseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public deleteLeadBaseApiV1LeadBasesBaseIdDelete(baseId: string, options?: RawAxiosRequestConfig) {
        return LeadsApiFp(this.configuration).deleteLeadBaseApiV1LeadBasesBaseIdDelete(baseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üë§ Delete a lead
     * @summary Delete Lead Entry
     * @param {string} leadId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public deleteLeadEntryApiV1LeadsLeadIdDelete(leadId: string, options?: RawAxiosRequestConfig) {
        return LeadsApiFp(this.configuration).deleteLeadEntryApiV1LeadsLeadIdDelete(leadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìÅ Get lead base information
     * @summary Get Lead Base
     * @param {string} baseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public getLeadBaseApiV1LeadBasesBaseIdGet(baseId: string, options?: RawAxiosRequestConfig) {
        return LeadsApiFp(this.configuration).getLeadBaseApiV1LeadBasesBaseIdGet(baseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìÅ Get all lead bases. Supports pagination (skip, limit), filter by status and country, search by name and comment
     * @summary Get Lead Bases
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records
     * @param {LeadBaseStatus | null} [status] Filter by status
     * @param {string | null} [country] Filter by country
     * @param {string | null} [search] Search by name or comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public getLeadBasesApiV1LeadBasesGet(skip?: number, limit?: number, status?: LeadBaseStatus | null, country?: string | null, search?: string | null, options?: RawAxiosRequestConfig) {
        return LeadsApiFp(this.configuration).getLeadBasesApiV1LeadBasesGet(skip, limit, status, country, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üë§ Get information about a specific lead
     * @summary Get Lead By Id
     * @param {string} leadId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public getLeadByIdApiV1LeadsLeadIdGet(leadId: string, options?: RawAxiosRequestConfig) {
        return LeadsApiFp(this.configuration).getLeadByIdApiV1LeadsLeadIdGet(leadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üë§ Get leads in a specific base. Supports pagination (skip, limit), filter by lead status, search by email, first name or last name
     * @summary Get Leads In Base
     * @param {string} baseId 
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records
     * @param {string | null} [status] Filter by lead status
     * @param {string | null} [search] Search by email, first name or last name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public getLeadsInBaseApiV1LeadBasesBaseIdLeadsGet(baseId: string, skip?: number, limit?: number, status?: string | null, search?: string | null, options?: RawAxiosRequestConfig) {
        return LeadsApiFp(this.configuration).getLeadsInBaseApiV1LeadBasesBaseIdLeadsGet(baseId, skip, limit, status, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìÅ Update lead base (name, status, comment)
     * @summary Update Lead Base
     * @param {string} baseId 
     * @param {LeadBaseUpdate} leadBaseUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public updateLeadBaseApiV1LeadBasesBaseIdPut(baseId: string, leadBaseUpdate: LeadBaseUpdate, options?: RawAxiosRequestConfig) {
        return LeadsApiFp(this.configuration).updateLeadBaseApiV1LeadBasesBaseIdPut(baseId, leadBaseUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üë§ Update lead information (first name, last name, status)
     * @summary Update Lead Entry
     * @param {string} leadId 
     * @param {LeadEntryUpdate} leadEntryUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public updateLeadEntryApiV1LeadsLeadIdPut(leadId: string, leadEntryUpdate: LeadEntryUpdate, options?: RawAxiosRequestConfig) {
        return LeadsApiFp(this.configuration).updateLeadEntryApiV1LeadsLeadIdPut(leadId, leadEntryUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üì§ Upload CSV with email leads to base. Expected CSV: header must contain 'email' (required), 'first_name', 'last_name'. Example: email,first_name,last_name / test@example.com,John,Doe
     * @summary Upload Csv To Base
     * @param {string} baseId 
     * @param {File} file CSV –∏–ª–∏ TXT —Ñ–∞–π–ª —Å –ª–∏–¥–∞–º–∏
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public uploadCsvToBaseApiV1LeadBasesBaseIdUploadPost(baseId: string, file: File, options?: RawAxiosRequestConfig) {
        return LeadsApiFp(this.configuration).uploadCsvToBaseApiV1LeadBasesBaseIdUploadPost(baseId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ‚úÖ Run email validation for a specific lead. Note: basic validation only; full SMTP validation requires background tasks (Celery).
     * @summary Validate Single Lead Email
     * @param {string} leadId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public validateSingleLeadEmailApiV1LeadsLeadIdValidateEmailPost(leadId: string, options?: RawAxiosRequestConfig) {
        return LeadsApiFp(this.configuration).validateSingleLeadEmailApiV1LeadsLeadIdValidateEmailPost(leadId, options).then((request) => request(this.axios, this.basePath));
    }
}

