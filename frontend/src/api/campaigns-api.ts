/* tslint:disable */
/* eslint-disable */
/**
 * SGPT API
 * üìß Professional Email Marketing & IMAP Management Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosRequestConfig } from 'axios';
import axios from 'axios'
import type { AxiosInstance } from 'axios'
import { apiClient } from '@/http/stable-api-client'
const globalAxios: AxiosInstance = (apiClient as any).axiosInstance ?? axios.create();
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from './base';
// @ts-ignore
import type { CampaignCreate } from './models';
// @ts-ignore
import type { CampaignProgress } from './models';
// @ts-ignore
import type { CampaignResponse } from './models';
// @ts-ignore
import type { HTTPValidationError } from './models';
/**
 * CampaignsApi - axios parameter creator
 * @export
 */
export const CampaignsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * üìß Create a new email campaign. Requires: campaign name, template ID, list of lead bases, and sending settings (batch_size, delay, threads)
         * @summary Create Campaign
         * @param {string} sessionId 
         * @param {CampaignCreate} campaignCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaignApiV1SessionsSessionIdCampaignsPost: async (sessionId: string, campaignCreate: CampaignCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('createCampaignApiV1SessionsSessionIdCampaignsPost', 'sessionId', sessionId)
            // verify required parameter 'campaignCreate' is not null or undefined
            assertParamExists('createCampaignApiV1SessionsSessionIdCampaignsPost', 'campaignCreate', campaignCreate)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campaignCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìß Create a new email campaign. Requires: campaign name, template ID, list of lead bases, and sending settings (batch_size, delay, threads)
         * @summary Create Campaign
         * @param {string} sessionId 
         * @param {CampaignCreate} campaignCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaignApiV1SessionsSessionIdCampaignsPost_1: async (sessionId: string, campaignCreate: CampaignCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('createCampaignApiV1SessionsSessionIdCampaignsPost_1', 'sessionId', sessionId)
            // verify required parameter 'campaignCreate' is not null or undefined
            assertParamExists('createCampaignApiV1SessionsSessionIdCampaignsPost_1', 'campaignCreate', campaignCreate)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campaignCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üóëÔ∏è Delete campaign (only if not running)
         * @summary Delete Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete: async (sessionId: string, campaignId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete', 'sessionId', sessionId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/{campaign_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üóëÔ∏è Delete campaign (only if not running)
         * @summary Delete Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete_2: async (sessionId: string, campaignId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete_2', 'sessionId', sessionId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete_2', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/{campaign_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìà Detailed campaign analytics
         * @summary Get Campaign Analytics
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet: async (sessionId: string, campaignId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet', 'sessionId', sessionId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/{campaign_id}/analytics`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìà Detailed campaign analytics
         * @summary Get Campaign Analytics
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet_3: async (sessionId: string, campaignId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet_3', 'sessionId', sessionId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet_3', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/{campaign_id}/analytics`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìß Get specific campaign details
         * @summary Get Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet: async (sessionId: string, campaignId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet', 'sessionId', sessionId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/{campaign_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìß Get specific campaign details
         * @summary Get Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet_4: async (sessionId: string, campaignId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet_4', 'sessionId', sessionId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet_4', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/{campaign_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìä Get campaign progress. Returns: completion %, sent/delivered counts, opens/clicks stats, estimated completion time
         * @summary Get Campaign Progress
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet: async (sessionId: string, campaignId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet', 'sessionId', sessionId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/{campaign_id}/progress`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìä Get campaign progress. Returns: completion %, sent/delivered counts, opens/clicks stats, estimated completion time
         * @summary Get Campaign Progress
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet_5: async (sessionId: string, campaignId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet_5', 'sessionId', sessionId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet_5', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/{campaign_id}/progress`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìß Get campaigns list with filtering
         * @summary Get Campaigns
         * @param {string} sessionId 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {string | null} [status] Filter by status: draft, running, completed, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignsApiV1SessionsSessionIdCampaignsGet: async (sessionId: string, skip?: number, limit?: number, status?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getCampaignsApiV1SessionsSessionIdCampaignsGet', 'sessionId', sessionId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìß Get campaigns list with filtering
         * @summary Get Campaigns
         * @param {string} sessionId 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {string | null} [status] Filter by status: draft, running, completed, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignsApiV1SessionsSessionIdCampaignsGet_6: async (sessionId: string, skip?: number, limit?: number, status?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getCampaignsApiV1SessionsSessionIdCampaignsGet_6', 'sessionId', sessionId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìä Overall statistics for all campaigns
         * @summary Get Campaigns Overview
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet: async (sessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet', 'sessionId', sessionId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/stats/overview`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üìä Overall statistics for all campaigns
         * @summary Get Campaigns Overview
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet_7: async (sessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet_7', 'sessionId', sessionId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/stats/overview`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ‚è∏Ô∏è Pause campaign (can be resumed)
         * @summary Pause Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost: async (sessionId: string, campaignId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost', 'sessionId', sessionId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/{campaign_id}/pause`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ‚è∏Ô∏è Pause campaign (can be resumed)
         * @summary Pause Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost_8: async (sessionId: string, campaignId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost_8', 'sessionId', sessionId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost_8', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/{campaign_id}/pause`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üöÄ Start campaign. Process: 1) Validate resources (SMTP, proxies, leads) 2) Launch background sending task 3) Real-time monitoring via WebSocket
         * @summary Start Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost: async (sessionId: string, campaignId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost', 'sessionId', sessionId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/{campaign_id}/start`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üöÄ Start campaign. Process: 1) Validate resources (SMTP, proxies, leads) 2) Launch background sending task 3) Real-time monitoring via WebSocket
         * @summary Start Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost_9: async (sessionId: string, campaignId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost_9', 'sessionId', sessionId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost_9', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/{campaign_id}/start`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ‚èπÔ∏è Stop campaign (final)
         * @summary Stop Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost: async (sessionId: string, campaignId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost', 'sessionId', sessionId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/{campaign_id}/stop`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ‚èπÔ∏è Stop campaign (final)
         * @summary Stop Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost_10: async (sessionId: string, campaignId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost_10', 'sessionId', sessionId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost_10', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sessions/{session_id}/campaigns/{campaign_id}/stop`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignsApi - functional programming interface
 * @export
 */
export const CampaignsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignsApiAxiosParamCreator(configuration)
    return {
        /**
         * üìß –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é email –∫–∞–º–ø–∞–Ω–∏—é  –¢—Ä–µ–±—É–µ—Ç—Å—è: - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ - ID —à–∞–±–ª–æ–Ω–∞ –ø–∏—Å—å–º–∞ - –°–ø–∏—Å–æ–∫ Lead –±–∞–∑ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (batch_size, delay, threads)
         * @summary Create Campaign
         * @param {string} sessionId 
         * @param {CampaignCreate} campaignCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampaignApiV1SessionsSessionIdCampaignsPost(sessionId: string, campaignCreate: CampaignCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCampaignApiV1SessionsSessionIdCampaignsPost(sessionId, campaignCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.createCampaignApiV1SessionsSessionIdCampaignsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìß –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é email –∫–∞–º–ø–∞–Ω–∏—é  –¢—Ä–µ–±—É–µ—Ç—Å—è: - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ - ID —à–∞–±–ª–æ–Ω–∞ –ø–∏—Å—å–º–∞ - –°–ø–∏—Å–æ–∫ Lead –±–∞–∑ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (batch_size, delay, threads)
         * @summary Create Campaign
         * @param {string} sessionId 
         * @param {CampaignCreate} campaignCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampaignApiV1SessionsSessionIdCampaignsPost_1(sessionId: string, campaignCreate: CampaignCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCampaignApiV1SessionsSessionIdCampaignsPost_1(sessionId, campaignCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.createCampaignApiV1SessionsSessionIdCampaignsPost_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞)
         * @summary Delete Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete(sessionId, campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞)
         * @summary Delete Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete_2(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete_2(sessionId, campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete_2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏
         * @summary Get Campaign Analytics
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet(sessionId, campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏
         * @summary Get Campaign Analytics
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet_3(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet_3(sessionId, campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet_3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìß –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
         * @summary Get Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet(sessionId, campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìß –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
         * @summary Get Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet_4(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet_4(sessionId, campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet_4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìä –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–º–ø–∞–Ω–∏–∏  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: - –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏–π/–∫–ª–∏–∫–æ–≤ - –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
         * @summary Get Campaign Progress
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignProgress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet(sessionId, campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìä –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–º–ø–∞–Ω–∏–∏  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: - –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏–π/–∫–ª–∏–∫–æ–≤ - –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
         * @summary Get Campaign Progress
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet_5(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignProgress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet_5(sessionId, campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet_5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìß –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
         * @summary Get Campaigns
         * @param {string} sessionId 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {string | null} [status] Filter by status: draft, running, completed, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignsApiV1SessionsSessionIdCampaignsGet(sessionId: string, skip?: number, limit?: number, status?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignsApiV1SessionsSessionIdCampaignsGet(sessionId, skip, limit, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.getCampaignsApiV1SessionsSessionIdCampaignsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìß –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
         * @summary Get Campaigns
         * @param {string} sessionId 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {string | null} [status] Filter by status: draft, running, completed, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignsApiV1SessionsSessionIdCampaignsGet_6(sessionId: string, skip?: number, limit?: number, status?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignsApiV1SessionsSessionIdCampaignsGet_6(sessionId, skip, limit, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.getCampaignsApiV1SessionsSessionIdCampaignsGet_6']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–∞–º–ø–∞–Ω–∏—è–º
         * @summary Get Campaigns Overview
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet(sessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–∞–º–ø–∞–Ω–∏—è–º
         * @summary Get Campaigns Overview
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet_7(sessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet_7(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet_7']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é (–º–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å)
         * @summary Pause Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost(sessionId, campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é (–º–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å)
         * @summary Pause Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost_8(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost_8(sessionId, campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost_8']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é  –ü—Ä–æ—Ü–µ—Å—Å: 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ (SMTP, –ø—Ä–æ–∫—Å–∏, –ª–∏–¥—ã) 2. –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ 3. Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ WebSocket
         * @summary Start Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost(sessionId, campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é  –ü—Ä–æ—Ü–µ—Å—Å: 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ (SMTP, –ø—Ä–æ–∫—Å–∏, –ª–∏–¥—ã) 2. –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ 3. Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ WebSocket
         * @summary Start Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost_9(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost_9(sessionId, campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost_9']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é (–æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ)
         * @summary Stop Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost(sessionId, campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é (–æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ)
         * @summary Stop Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost_10(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost_10(sessionId, campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost_10']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CampaignsApi - factory interface
 * @export
 */
export const CampaignsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignsApiFp(configuration)
    return {
        /**
         * üìß –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é email –∫–∞–º–ø–∞–Ω–∏—é  –¢—Ä–µ–±—É–µ—Ç—Å—è: - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ - ID —à–∞–±–ª–æ–Ω–∞ –ø–∏—Å—å–º–∞ - –°–ø–∏—Å–æ–∫ Lead –±–∞–∑ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (batch_size, delay, threads)
         * @summary Create Campaign
         * @param {string} sessionId 
         * @param {CampaignCreate} campaignCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaignApiV1SessionsSessionIdCampaignsPost(sessionId: string, campaignCreate: CampaignCreate, options?: RawAxiosRequestConfig): AxiosPromise<CampaignResponse> {
            return localVarFp.createCampaignApiV1SessionsSessionIdCampaignsPost(sessionId, campaignCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * üìß –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é email –∫–∞–º–ø–∞–Ω–∏—é  –¢—Ä–µ–±—É–µ—Ç—Å—è: - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ - ID —à–∞–±–ª–æ–Ω–∞ –ø–∏—Å—å–º–∞ - –°–ø–∏—Å–æ–∫ Lead –±–∞–∑ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (batch_size, delay, threads)
         * @summary Create Campaign
         * @param {string} sessionId 
         * @param {CampaignCreate} campaignCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaignApiV1SessionsSessionIdCampaignsPost_1(sessionId: string, campaignCreate: CampaignCreate, options?: RawAxiosRequestConfig): AxiosPromise<CampaignResponse> {
            return localVarFp.createCampaignApiV1SessionsSessionIdCampaignsPost_1(sessionId, campaignCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞)
         * @summary Delete Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete(sessionId, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞)
         * @summary Delete Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete_2(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete_2(sessionId, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏
         * @summary Get Campaign Analytics
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet(sessionId, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏
         * @summary Get Campaign Analytics
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet_3(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet_3(sessionId, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * üìß –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
         * @summary Get Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): AxiosPromise<CampaignResponse> {
            return localVarFp.getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet(sessionId, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * üìß –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
         * @summary Get Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet_4(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): AxiosPromise<CampaignResponse> {
            return localVarFp.getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet_4(sessionId, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * üìä –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–º–ø–∞–Ω–∏–∏  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: - –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏–π/–∫–ª–∏–∫–æ–≤ - –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
         * @summary Get Campaign Progress
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): AxiosPromise<CampaignProgress> {
            return localVarFp.getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet(sessionId, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * üìä –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–º–ø–∞–Ω–∏–∏  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: - –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏–π/–∫–ª–∏–∫–æ–≤ - –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
         * @summary Get Campaign Progress
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet_5(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): AxiosPromise<CampaignProgress> {
            return localVarFp.getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet_5(sessionId, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * üìß –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
         * @summary Get Campaigns
         * @param {string} sessionId 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {string | null} [status] Filter by status: draft, running, completed, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignsApiV1SessionsSessionIdCampaignsGet(sessionId: string, skip?: number, limit?: number, status?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<CampaignResponse>> {
            return localVarFp.getCampaignsApiV1SessionsSessionIdCampaignsGet(sessionId, skip, limit, status, options).then((request) => request(axios, basePath));
        },
        /**
         * üìß –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
         * @summary Get Campaigns
         * @param {string} sessionId 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {string | null} [status] Filter by status: draft, running, completed, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignsApiV1SessionsSessionIdCampaignsGet_6(sessionId: string, skip?: number, limit?: number, status?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<CampaignResponse>> {
            return localVarFp.getCampaignsApiV1SessionsSessionIdCampaignsGet_6(sessionId, skip, limit, status, options).then((request) => request(axios, basePath));
        },
        /**
         * üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–∞–º–ø–∞–Ω–∏—è–º
         * @summary Get Campaigns Overview
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet(sessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–∞–º–ø–∞–Ω–∏—è–º
         * @summary Get Campaigns Overview
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet_7(sessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet_7(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * ‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é (–º–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å)
         * @summary Pause Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost(sessionId, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * ‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é (–º–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å)
         * @summary Pause Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost_8(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost_8(sessionId, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é  –ü—Ä–æ—Ü–µ—Å—Å: 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ (SMTP, –ø—Ä–æ–∫—Å–∏, –ª–∏–¥—ã) 2. –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ 3. Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ WebSocket
         * @summary Start Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost(sessionId, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é  –ü—Ä–æ—Ü–µ—Å—Å: 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ (SMTP, –ø—Ä–æ–∫—Å–∏, –ª–∏–¥—ã) 2. –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ 3. Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ WebSocket
         * @summary Start Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost_9(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost_9(sessionId, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é (–æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ)
         * @summary Stop Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost(sessionId, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é (–æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ)
         * @summary Stop Campaign
         * @param {string} sessionId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost_10(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost_10(sessionId, campaignId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CampaignsApi - object-oriented interface
 * @export
 * @class CampaignsApi
 * @extends {BaseAPI}
 */
export class CampaignsApi extends BaseAPI {
    /**
     * üìß Create a new email campaign. Requires: campaign name, template ID, list of lead bases, and sending settings (batch_size, delay, threads)
     * @summary Create Campaign
     * @param {string} sessionId 
     * @param {CampaignCreate} campaignCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public createCampaignApiV1SessionsSessionIdCampaignsPost(sessionId: string, campaignCreate: CampaignCreate, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).createCampaignApiV1SessionsSessionIdCampaignsPost(sessionId, campaignCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìß Create a new email campaign. Requires: campaign name, template ID, list of lead bases, and sending settings (batch_size, delay, threads)
     * @summary Create Campaign
     * @param {string} sessionId 
     * @param {CampaignCreate} campaignCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public createCampaignApiV1SessionsSessionIdCampaignsPost_1(sessionId: string, campaignCreate: CampaignCreate, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).createCampaignApiV1SessionsSessionIdCampaignsPost_1(sessionId, campaignCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üóëÔ∏è Delete campaign (only if not running)
     * @summary Delete Campaign
     * @param {string} sessionId 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete(sessionId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üóëÔ∏è Delete campaign (only if not running)
     * @summary Delete Campaign
     * @param {string} sessionId 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete_2(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).deleteCampaignApiV1SessionsSessionIdCampaignsCampaignIdDelete_2(sessionId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìà Detailed campaign analytics
     * @summary Get Campaign Analytics
     * @param {string} sessionId 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet(sessionId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìà Detailed campaign analytics
     * @summary Get Campaign Analytics
     * @param {string} sessionId 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet_3(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getCampaignAnalyticsApiV1SessionsSessionIdCampaignsCampaignIdAnalyticsGet_3(sessionId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìß Get specific campaign details
     * @summary Get Campaign
     * @param {string} sessionId 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet(sessionId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìß Get specific campaign details
     * @summary Get Campaign
     * @param {string} sessionId 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet_4(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getCampaignApiV1SessionsSessionIdCampaignsCampaignIdGet_4(sessionId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìä Get campaign progress. Returns: completion %, sent/delivered counts, opens/clicks stats, estimated completion time
     * @summary Get Campaign Progress
     * @param {string} sessionId 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet(sessionId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìä Get campaign progress. Returns: completion %, sent/delivered counts, opens/clicks stats, estimated completion time
     * @summary Get Campaign Progress
     * @param {string} sessionId 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet_5(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getCampaignProgressApiV1SessionsSessionIdCampaignsCampaignIdProgressGet_5(sessionId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìß Get campaigns list with filtering
     * @summary Get Campaigns
     * @param {string} sessionId 
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {string | null} [status] Filter by status: draft, running, completed, etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaignsApiV1SessionsSessionIdCampaignsGet(sessionId: string, skip?: number, limit?: number, status?: string | null, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getCampaignsApiV1SessionsSessionIdCampaignsGet(sessionId, skip, limit, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìß Get campaigns list with filtering
     * @summary Get Campaigns
     * @param {string} sessionId 
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {string | null} [status] Filter by status: draft, running, completed, etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaignsApiV1SessionsSessionIdCampaignsGet_6(sessionId: string, skip?: number, limit?: number, status?: string | null, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getCampaignsApiV1SessionsSessionIdCampaignsGet_6(sessionId, skip, limit, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìä Overall statistics for all campaigns
     * @summary Get Campaigns Overview
     * @param {string} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet(sessionId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üìä Overall statistics for all campaigns
     * @summary Get Campaigns Overview
     * @param {string} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet_7(sessionId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getCampaignsOverviewApiV1SessionsSessionIdCampaignsStatsOverviewGet_7(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ‚è∏Ô∏è Pause campaign (can be resumed)
     * @summary Pause Campaign
     * @param {string} sessionId 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost(sessionId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ‚è∏Ô∏è Pause campaign (can be resumed)
     * @summary Pause Campaign
     * @param {string} sessionId 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost_8(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).pauseCampaignApiV1SessionsSessionIdCampaignsCampaignIdPausePost_8(sessionId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üöÄ Start campaign. Process: 1) Validate resources (SMTP, proxies, leads) 2) Launch background sending task 3) Real-time monitoring via WebSocket
     * @summary Start Campaign
     * @param {string} sessionId 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost(sessionId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üöÄ Start campaign. Process: 1) Validate resources (SMTP, proxies, leads) 2) Launch background sending task 3) Real-time monitoring via WebSocket
     * @summary Start Campaign
     * @param {string} sessionId 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost_9(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).startCampaignApiV1SessionsSessionIdCampaignsCampaignIdStartPost_9(sessionId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ‚èπÔ∏è Stop campaign (final)
     * @summary Stop Campaign
     * @param {string} sessionId 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost(sessionId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ‚èπÔ∏è Stop campaign (final)
     * @summary Stop Campaign
     * @param {string} sessionId 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost_10(sessionId: string, campaignId: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).stopCampaignApiV1SessionsSessionIdCampaignsCampaignIdStopPost_10(sessionId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }
}

