/* tslint:disable */
/* eslint-disable */
/**
 * SGPT API
 * ðŸ“§ Professional Email Marketing & IMAP Management Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosRequestConfig } from 'axios';
import axiosInstance from '@/http/axios'
import type { AxiosInstance } from 'axios'
const globalAxios: AxiosInstance = axiosInstance;
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, setSearchParams, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError, operationServerMap } from './base';
// @ts-ignore
import type { HealthResponse } from './models';
/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1HealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/health/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Liveness check for Kubernetes
         * @summary Liveness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livenessCheckApiV1HealthLiveGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/health/live`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Liveness check for Kubernetes
         * @summary Liveness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livenessCheckHealthLiveGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/live`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Readiness check for Kubernetes
         * @summary Readiness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessCheckApiV1HealthReadyGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/health/ready`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Readiness check for Kubernetes
         * @summary Readiness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessCheckHealthReadyGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/ready`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * Health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckApiV1HealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthCheckApiV1HealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckHealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthCheckHealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Liveness check for Kubernetes
         * @summary Liveness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async livenessCheckApiV1HealthLiveGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.livenessCheckApiV1HealthLiveGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.livenessCheckApiV1HealthLiveGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Liveness check for Kubernetes
         * @summary Liveness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async livenessCheckHealthLiveGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.livenessCheckHealthLiveGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.livenessCheckHealthLiveGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Readiness check for Kubernetes
         * @summary Readiness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readinessCheckApiV1HealthReadyGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readinessCheckApiV1HealthReadyGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.readinessCheckApiV1HealthReadyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Readiness check for Kubernetes
         * @summary Readiness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readinessCheckHealthReadyGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readinessCheckHealthReadyGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.readinessCheckHealthReadyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * Health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthResponse> {
            return localVarFp.healthCheckApiV1HealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthResponse> {
            return localVarFp.healthCheckHealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Liveness check for Kubernetes
         * @summary Liveness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livenessCheckApiV1HealthLiveGet(options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.livenessCheckApiV1HealthLiveGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Liveness check for Kubernetes
         * @summary Liveness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livenessCheckHealthLiveGet(options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.livenessCheckHealthLiveGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Readiness check for Kubernetes
         * @summary Readiness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessCheckApiV1HealthReadyGet(options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.readinessCheckApiV1HealthReadyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Readiness check for Kubernetes
         * @summary Readiness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessCheckHealthReadyGet(options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.readinessCheckHealthReadyGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * Health check endpoint
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthCheckApiV1HealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Health check endpoint
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthCheckHealthGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthCheckHealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Liveness check for Kubernetes
     * @summary Liveness Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public livenessCheckApiV1HealthLiveGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).livenessCheckApiV1HealthLiveGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Liveness check for Kubernetes
     * @summary Liveness Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public livenessCheckHealthLiveGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).livenessCheckHealthLiveGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Readiness check for Kubernetes
     * @summary Readiness Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public readinessCheckApiV1HealthReadyGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).readinessCheckApiV1HealthReadyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Readiness check for Kubernetes
     * @summary Readiness Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public readinessCheckHealthReadyGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).readinessCheckHealthReadyGet(options).then((request) => request(this.axios, this.basePath));
    }
}

