/* tslint:disable */
/* eslint-disable */
/**
 * SGPT API
 * 📧 Professional Email Marketing & IMAP Management Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosRequestConfig } from 'axios';
import axiosInstance from '@/http/axios'
import type { AxiosInstance } from 'axios'
const globalAxios: AxiosInstance = axiosInstance;
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError, operationServerMap } from './base';
// @ts-ignore
import type { HTTPValidationError } from './models';
// @ts-ignore
import type { IMAPAccountCreate } from './models';
// @ts-ignore
import type { IMAPAccountResponse } from './models';
// @ts-ignore
import type { IMAPAccountUpdate } from './models';
// @ts-ignore
import type { IMAPFolderResponse } from './models';
// @ts-ignore
import type { IMAPMessageResponse } from './models';
// @ts-ignore
import type { IMAPSettingsUpdate } from './models';
/**
 * IMAPManagerApi - axios parameter creator
 * @export
 */
export const IMAPManagerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 📬 Create IMAP account
         * @summary Create Imap Account
         * @param {string} sessionId 
         * @param {IMAPAccountCreate} iMAPAccountCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImapAccountApiV1SessionsSessionIdImapAccountsPost: async (sessionId: string, iMAPAccountCreate: IMAPAccountCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('createImapAccountApiV1SessionsSessionIdImapAccountsPost', 'sessionId', sessionId)
            // verify required parameter 'iMAPAccountCreate' is not null or undefined
            assertParamExists('createImapAccountApiV1SessionsSessionIdImapAccountsPost', 'iMAPAccountCreate', iMAPAccountCreate)
            const localVarPath = `/api/v1/imap/{session_id}/accounts`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iMAPAccountCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 📬 Delete IMAP account
         * @summary Delete Imap Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImapAccountApiV1SessionsSessionIdImapAccountsAccountIdDelete: async (sessionId: string, accountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('deleteImapAccountApiV1SessionsSessionIdImapAccountsAccountIdDelete', 'sessionId', sessionId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteImapAccountApiV1SessionsSessionIdImapAccountsAccountIdDelete', 'accountId', accountId)
            const localVarPath = `/api/v1/imap/{session_id}/accounts/{account_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 📧 Get folder messages
         * @summary Get Folder Messages
         * @param {string} accountId 
         * @param {string} folderName 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderMessagesApiV1ImapAccountsAccountIdFoldersFolderNameMessagesGet: async (accountId: string, folderName: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getFolderMessagesApiV1ImapAccountsAccountIdFoldersFolderNameMessagesGet', 'accountId', accountId)
            // verify required parameter 'folderName' is not null or undefined
            assertParamExists('getFolderMessagesApiV1ImapAccountsAccountIdFoldersFolderNameMessagesGet', 'folderName', folderName)
            const localVarPath = `/api/v1/imap/{account_id}/folders/{folder_name}/messages`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"folder_name"}}`, encodeURIComponent(String(folderName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 📬 Get IMAP accounts
         * @summary Get Imap Accounts
         * @param {string} sessionId 
         * @param {string | null} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImapAccountsApiV1SessionsSessionIdImapAccountsGet: async (sessionId: string, status?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getImapAccountsApiV1SessionsSessionIdImapAccountsGet', 'sessionId', sessionId)
            const localVarPath = `/api/v1/imap/{session_id}/accounts`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 📁 Get IMAP account folders
         * @summary Get Imap Folders
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImapFoldersApiV1ImapAccountsAccountIdFoldersGet: async (accountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getImapFoldersApiV1ImapAccountsAccountIdFoldersGet', 'accountId', accountId)
            const localVarPath = `/api/v1/imap/{account_id}/folders`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 📋 Get IMAP account logs
         * @summary Get Imap Logs
         * @param {string} accountId 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImapLogsApiV1ImapLogsAccountIdGet: async (accountId: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getImapLogsApiV1ImapLogsAccountIdGet', 'accountId', accountId)
            const localVarPath = `/api/v1/imap/{account_id}/logs`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 📋 Get IMAP templates (INBOX, JUNK, etc.)
         * @summary Get Imap Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImapTemplatesApiV1ImapTemplatesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/imap/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 📧 Get message details
         * @summary Get Message Detail
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageDetailApiV1ImapMessagesMessageIdGet: async (messageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('getMessageDetailApiV1ImapMessagesMessageIdGet', 'messageId', messageId)
            const localVarPath = `/api/v1/imap/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ⚙️ Get IMAP server settings
         * @summary Get Server Settings
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerSettingsApiV1ImapServerSettingsAccountIdGet: async (accountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getServerSettingsApiV1ImapServerSettingsAccountIdGet', 'accountId', accountId)
            const localVarPath = `/api/v1/imap/{account_id}/server-settings`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 🔄 Sync IMAP account
         * @summary Sync Imap Account
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncImapAccountApiV1ImapAccountsAccountIdSyncPost: async (accountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('syncImapAccountApiV1ImapAccountsAccountIdSyncPost', 'accountId', accountId)
            const localVarPath = `/api/v1/imap/{account_id}/sync`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 📬 Test IMAP connection
         * @summary Test Imap Connection
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testImapConnectionApiV1ImapAccountsAccountIdTestPost: async (accountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('testImapConnectionApiV1ImapAccountsAccountIdTestPost', 'accountId', accountId)
            const localVarPath = `/api/v1/imap/{account_id}/test`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 📬 Update IMAP account
         * @summary Update Imap Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {IMAPAccountUpdate} iMAPAccountUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImapAccountApiV1SessionsSessionIdImapAccountsAccountIdPut: async (sessionId: string, accountId: string, iMAPAccountUpdate: IMAPAccountUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('updateImapAccountApiV1SessionsSessionIdImapAccountsAccountIdPut', 'sessionId', sessionId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateImapAccountApiV1SessionsSessionIdImapAccountsAccountIdPut', 'accountId', accountId)
            // verify required parameter 'iMAPAccountUpdate' is not null or undefined
            assertParamExists('updateImapAccountApiV1SessionsSessionIdImapAccountsAccountIdPut', 'iMAPAccountUpdate', iMAPAccountUpdate)
            const localVarPath = `/api/v1/imap/{session_id}/accounts/{account_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iMAPAccountUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ⚙️ Update IMAP server settings
         * @summary Update Server Settings
         * @param {string} accountId 
         * @param {IMAPSettingsUpdate} iMAPSettingsUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServerSettingsApiV1ImapServerSettingsAccountIdPut: async (accountId: string, iMAPSettingsUpdate: IMAPSettingsUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateServerSettingsApiV1ImapServerSettingsAccountIdPut', 'accountId', accountId)
            // verify required parameter 'iMAPSettingsUpdate' is not null or undefined
            assertParamExists('updateServerSettingsApiV1ImapServerSettingsAccountIdPut', 'iMAPSettingsUpdate', iMAPSettingsUpdate)
            const localVarPath = `/api/v1/imap/{account_id}/server-settings`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iMAPSettingsUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IMAPManagerApi - functional programming interface
 * @export
 */
export const IMAPManagerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IMAPManagerApiAxiosParamCreator(configuration)
    return {
        /**
         * 📬 Create IMAP account
         * @summary Create Imap Account
         * @param {string} sessionId 
         * @param {IMAPAccountCreate} iMAPAccountCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createImapAccountApiV1SessionsSessionIdImapAccountsPost(sessionId: string, iMAPAccountCreate: IMAPAccountCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IMAPAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createImapAccountApiV1SessionsSessionIdImapAccountsPost(sessionId, iMAPAccountCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPManagerApi.createImapAccountApiV1SessionsSessionIdImapAccountsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 📬 Delete IMAP account
         * @summary Delete Imap Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImapAccountApiV1SessionsSessionIdImapAccountsAccountIdDelete(sessionId: string, accountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImapAccountApiV1SessionsSessionIdImapAccountsAccountIdDelete(sessionId, accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPManagerApi.deleteImapAccountApiV1SessionsSessionIdImapAccountsAccountIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 📧 Get folder messages
         * @summary Get Folder Messages
         * @param {string} accountId 
         * @param {string} folderName 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderMessagesApiV1ImapAccountsAccountIdFoldersFolderNameMessagesGet(accountId: string, folderName: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolderMessagesApiV1ImapAccountsAccountIdFoldersFolderNameMessagesGet(accountId, folderName, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPManagerApi.getFolderMessagesApiV1ImapAccountsAccountIdFoldersFolderNameMessagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 📬 Get IMAP accounts
         * @summary Get Imap Accounts
         * @param {string} sessionId 
         * @param {string | null} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImapAccountsApiV1SessionsSessionIdImapAccountsGet(sessionId: string, status?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IMAPAccountResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImapAccountsApiV1SessionsSessionIdImapAccountsGet(sessionId, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPManagerApi.getImapAccountsApiV1SessionsSessionIdImapAccountsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 📁 Get IMAP account folders
         * @summary Get Imap Folders
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImapFoldersApiV1ImapAccountsAccountIdFoldersGet(accountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IMAPFolderResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImapFoldersApiV1ImapAccountsAccountIdFoldersGet(accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPManagerApi.getImapFoldersApiV1ImapAccountsAccountIdFoldersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 📋 Get IMAP account logs
         * @summary Get Imap Logs
         * @param {string} accountId 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImapLogsApiV1ImapLogsAccountIdGet(accountId: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImapLogsApiV1ImapLogsAccountIdGet(accountId, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPManagerApi.getImapLogsApiV1ImapLogsAccountIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 📋 Get IMAP templates (INBOX, JUNK, etc.)
         * @summary Get Imap Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImapTemplatesApiV1ImapTemplatesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImapTemplatesApiV1ImapTemplatesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPManagerApi.getImapTemplatesApiV1ImapTemplatesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 📧 Get message details
         * @summary Get Message Detail
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageDetailApiV1ImapMessagesMessageIdGet(messageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IMAPMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageDetailApiV1ImapMessagesMessageIdGet(messageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPManagerApi.getMessageDetailApiV1ImapMessagesMessageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ⚙️ Get IMAP server settings
         * @summary Get Server Settings
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServerSettingsApiV1ImapServerSettingsAccountIdGet(accountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServerSettingsApiV1ImapServerSettingsAccountIdGet(accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPManagerApi.getServerSettingsApiV1ImapServerSettingsAccountIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 🔄 Sync IMAP account
         * @summary Sync Imap Account
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncImapAccountApiV1ImapAccountsAccountIdSyncPost(accountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncImapAccountApiV1ImapAccountsAccountIdSyncPost(accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPManagerApi.syncImapAccountApiV1ImapAccountsAccountIdSyncPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 📬 Test IMAP connection
         * @summary Test Imap Connection
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testImapConnectionApiV1ImapAccountsAccountIdTestPost(accountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testImapConnectionApiV1ImapAccountsAccountIdTestPost(accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPManagerApi.testImapConnectionApiV1ImapAccountsAccountIdTestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 📬 Update IMAP account
         * @summary Update Imap Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {IMAPAccountUpdate} iMAPAccountUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateImapAccountApiV1SessionsSessionIdImapAccountsAccountIdPut(sessionId: string, accountId: string, iMAPAccountUpdate: IMAPAccountUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IMAPAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImapAccountApiV1SessionsSessionIdImapAccountsAccountIdPut(sessionId, accountId, iMAPAccountUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPManagerApi.updateImapAccountApiV1SessionsSessionIdImapAccountsAccountIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ⚙️ Update IMAP server settings
         * @summary Update Server Settings
         * @param {string} accountId 
         * @param {IMAPSettingsUpdate} iMAPSettingsUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateServerSettingsApiV1ImapServerSettingsAccountIdPut(accountId: string, iMAPSettingsUpdate: IMAPSettingsUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateServerSettingsApiV1ImapServerSettingsAccountIdPut(accountId, iMAPSettingsUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPManagerApi.updateServerSettingsApiV1ImapServerSettingsAccountIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IMAPManagerApi - factory interface
 * @export
 */
export const IMAPManagerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IMAPManagerApiFp(configuration)
    return {
        /**
         * 📬 Создать IMAP аккаунт
         * @summary Create Imap Account
         * @param {string} sessionId 
         * @param {IMAPAccountCreate} iMAPAccountCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImapAccountApiV1SessionsSessionIdImapAccountsPost(sessionId: string, iMAPAccountCreate: IMAPAccountCreate, options?: RawAxiosRequestConfig): AxiosPromise<IMAPAccountResponse> {
            return localVarFp.createImapAccountApiV1SessionsSessionIdImapAccountsPost(sessionId, iMAPAccountCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 📬 Удалить IMAP аккаунт
         * @summary Delete Imap Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImapAccountApiV1SessionsSessionIdImapAccountsAccountIdDelete(sessionId: string, accountId: string, options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.deleteImapAccountApiV1SessionsSessionIdImapAccountsAccountIdDelete(sessionId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 📧 Получить сообщения из папки
         * @summary Get Folder Messages
         * @param {string} accountId 
         * @param {string} folderName 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderMessagesApiV1ImapAccountsAccountIdFoldersFolderNameMessagesGet(accountId: string, folderName: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.getFolderMessagesApiV1ImapAccountsAccountIdFoldersFolderNameMessagesGet(accountId, folderName, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 📬 Получить список IMAP аккаунтов
         * @summary Get Imap Accounts
         * @param {string} sessionId 
         * @param {string | null} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImapAccountsApiV1SessionsSessionIdImapAccountsGet(sessionId: string, status?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<IMAPAccountResponse>> {
            return localVarFp.getImapAccountsApiV1SessionsSessionIdImapAccountsGet(sessionId, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 📁 Получить папки IMAP аккаунта
         * @summary Get Imap Folders
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImapFoldersApiV1ImapAccountsAccountIdFoldersGet(accountId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<IMAPFolderResponse>> {
            return localVarFp.getImapFoldersApiV1ImapAccountsAccountIdFoldersGet(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 📋 Получить логи IMAP аккаунта
         * @summary Get Imap Logs
         * @param {string} accountId 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImapLogsApiV1ImapLogsAccountIdGet(accountId: string, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.getImapLogsApiV1ImapLogsAccountIdGet(accountId, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 📋 Получить шаблоны IMAP (INBOX, JUNK, etc.)
         * @summary Get Imap Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImapTemplatesApiV1ImapTemplatesGet(options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.getImapTemplatesApiV1ImapTemplatesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 📧 Получить детали сообщения
         * @summary Get Message Detail
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageDetailApiV1ImapMessagesMessageIdGet(messageId: string, options?: RawAxiosRequestConfig): AxiosPromise<IMAPMessageResponse> {
            return localVarFp.getMessageDetailApiV1ImapMessagesMessageIdGet(messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * ⚙️ Получить настройки IMAP сервера
         * @summary Get Server Settings
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerSettingsApiV1ImapServerSettingsAccountIdGet(accountId: string, options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.getServerSettingsApiV1ImapServerSettingsAccountIdGet(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 🔄 Синхронизировать IMAP аккаунт
         * @summary Sync Imap Account
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncImapAccountApiV1ImapAccountsAccountIdSyncPost(accountId: string, options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.syncImapAccountApiV1ImapAccountsAccountIdSyncPost(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 📬 Тестировать IMAP подключение
         * @summary Test Imap Connection
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testImapConnectionApiV1ImapAccountsAccountIdTestPost(accountId: string, options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.testImapConnectionApiV1ImapAccountsAccountIdTestPost(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 📬 Обновить IMAP аккаунт
         * @summary Update Imap Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {IMAPAccountUpdate} iMAPAccountUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImapAccountApiV1SessionsSessionIdImapAccountsAccountIdPut(sessionId: string, accountId: string, iMAPAccountUpdate: IMAPAccountUpdate, options?: RawAxiosRequestConfig): AxiosPromise<IMAPAccountResponse> {
            return localVarFp.updateImapAccountApiV1SessionsSessionIdImapAccountsAccountIdPut(sessionId, accountId, iMAPAccountUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * ⚙️ Обновить настройки IMAP сервера
         * @summary Update Server Settings
         * @param {string} accountId 
         * @param {IMAPSettingsUpdate} iMAPSettingsUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServerSettingsApiV1ImapServerSettingsAccountIdPut(accountId: string, iMAPSettingsUpdate: IMAPSettingsUpdate, options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.updateServerSettingsApiV1ImapServerSettingsAccountIdPut(accountId, iMAPSettingsUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IMAPManagerApi - object-oriented interface
 * @export
 * @class IMAPManagerApi
 * @extends {BaseAPI}
 */
export class IMAPManagerApi extends BaseAPI {
    /**
     * 📬 Create IMAP account
     * @summary Create Imap Account
     * @param {string} sessionId 
     * @param {IMAPAccountCreate} iMAPAccountCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPManagerApi
     */
    public createImapAccountApiV1SessionsSessionIdImapAccountsPost(sessionId: string, iMAPAccountCreate: IMAPAccountCreate, options?: RawAxiosRequestConfig) {
        return IMAPManagerApiFp(this.configuration).createImapAccountApiV1SessionsSessionIdImapAccountsPost(sessionId, iMAPAccountCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 📬 Delete IMAP account
     * @summary Delete Imap Account
     * @param {string} sessionId 
     * @param {string} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPManagerApi
     */
    public deleteImapAccountApiV1SessionsSessionIdImapAccountsAccountIdDelete(sessionId: string, accountId: string, options?: RawAxiosRequestConfig) {
        return IMAPManagerApiFp(this.configuration).deleteImapAccountApiV1SessionsSessionIdImapAccountsAccountIdDelete(sessionId, accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 📧 Get folder messages
     * @summary Get Folder Messages
     * @param {string} accountId 
     * @param {string} folderName 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPManagerApi
     */
    public getFolderMessagesApiV1ImapAccountsAccountIdFoldersFolderNameMessagesGet(accountId: string, folderName: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return IMAPManagerApiFp(this.configuration).getFolderMessagesApiV1ImapAccountsAccountIdFoldersFolderNameMessagesGet(accountId, folderName, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 📬 Get IMAP accounts
     * @summary Get Imap Accounts
     * @param {string} sessionId 
     * @param {string | null} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPManagerApi
     */
    public getImapAccountsApiV1SessionsSessionIdImapAccountsGet(sessionId: string, status?: string | null, options?: RawAxiosRequestConfig) {
        return IMAPManagerApiFp(this.configuration).getImapAccountsApiV1SessionsSessionIdImapAccountsGet(sessionId, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 📁 Get IMAP account folders
     * @summary Get Imap Folders
     * @param {string} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPManagerApi
     */
    public getImapFoldersApiV1ImapAccountsAccountIdFoldersGet(accountId: string, options?: RawAxiosRequestConfig) {
        return IMAPManagerApiFp(this.configuration).getImapFoldersApiV1ImapAccountsAccountIdFoldersGet(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 📋 Get IMAP account logs
     * @summary Get Imap Logs
     * @param {string} accountId 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPManagerApi
     */
    public getImapLogsApiV1ImapLogsAccountIdGet(accountId: string, limit?: number, options?: RawAxiosRequestConfig) {
        return IMAPManagerApiFp(this.configuration).getImapLogsApiV1ImapLogsAccountIdGet(accountId, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 📋 Get IMAP templates (INBOX, JUNK, etc.)
     * @summary Get Imap Templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPManagerApi
     */
    public getImapTemplatesApiV1ImapTemplatesGet(options?: RawAxiosRequestConfig) {
        return IMAPManagerApiFp(this.configuration).getImapTemplatesApiV1ImapTemplatesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 📧 Get message details
     * @summary Get Message Detail
     * @param {string} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPManagerApi
     */
    public getMessageDetailApiV1ImapMessagesMessageIdGet(messageId: string, options?: RawAxiosRequestConfig) {
        return IMAPManagerApiFp(this.configuration).getMessageDetailApiV1ImapMessagesMessageIdGet(messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ⚙️ Get IMAP server settings
     * @summary Get Server Settings
     * @param {string} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPManagerApi
     */
    public getServerSettingsApiV1ImapServerSettingsAccountIdGet(accountId: string, options?: RawAxiosRequestConfig) {
        return IMAPManagerApiFp(this.configuration).getServerSettingsApiV1ImapServerSettingsAccountIdGet(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 🔄 Sync IMAP account
     * @summary Sync Imap Account
     * @param {string} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPManagerApi
     */
    public syncImapAccountApiV1ImapAccountsAccountIdSyncPost(accountId: string, options?: RawAxiosRequestConfig) {
        return IMAPManagerApiFp(this.configuration).syncImapAccountApiV1ImapAccountsAccountIdSyncPost(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 📬 Test IMAP connection
     * @summary Test Imap Connection
     * @param {string} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPManagerApi
     */
    public testImapConnectionApiV1ImapAccountsAccountIdTestPost(accountId: string, options?: RawAxiosRequestConfig) {
        return IMAPManagerApiFp(this.configuration).testImapConnectionApiV1ImapAccountsAccountIdTestPost(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 📬 Update IMAP account
     * @summary Update Imap Account
     * @param {string} sessionId 
     * @param {string} accountId 
     * @param {IMAPAccountUpdate} iMAPAccountUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPManagerApi
     */
    public updateImapAccountApiV1SessionsSessionIdImapAccountsAccountIdPut(sessionId: string, accountId: string, iMAPAccountUpdate: IMAPAccountUpdate, options?: RawAxiosRequestConfig) {
        return IMAPManagerApiFp(this.configuration).updateImapAccountApiV1SessionsSessionIdImapAccountsAccountIdPut(sessionId, accountId, iMAPAccountUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ⚙️ Update IMAP server settings
     * @summary Update Server Settings
     * @param {string} accountId 
     * @param {IMAPSettingsUpdate} iMAPSettingsUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPManagerApi
     */
    public updateServerSettingsApiV1ImapServerSettingsAccountIdPut(accountId: string, iMAPSettingsUpdate: IMAPSettingsUpdate, options?: RawAxiosRequestConfig) {
        return IMAPManagerApiFp(this.configuration).updateServerSettingsApiV1ImapServerSettingsAccountIdPut(accountId, iMAPSettingsUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

