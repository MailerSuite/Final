/* tslint:disable */
/* eslint-disable */
/**
 * SGPT API
 * ðŸ“§ Professional Email Marketing & IMAP Management Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from './base';
// @ts-ignore
import type { HTTPValidationError } from './models';
// @ts-ignore
import type { HostDiscoveryRequest } from './models';
// @ts-ignore
import type { HostDiscoveryResponse } from './models';
// @ts-ignore
import type { IMAPAccountCreate } from './models';
// @ts-ignore
import type { IMAPAccountResponse } from './models';
// @ts-ignore
import type { IMAPAccountUpdate } from './models';
// @ts-ignore
import type { IMAPBulkTestResponse } from './models';
// @ts-ignore
import type { IMAPTestRequest } from './models';
// @ts-ignore
import type { SchemasCommonMessageResponse } from './models';
// @ts-ignore
import type { SuccessResponse } from './models';
/**
 * IMAPApi - axios parameter creator
 * @export
 */
export const IMAPApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Auto-detect IMAP settings from email:password format
         * @summary Bulk Upload From Email
         * @param {string} sessionId 
         * @param {string} emailData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUploadFromEmailApiV1ImapSessionIdBulkUploadFromEmailPost: async (sessionId: string, emailData: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('bulkUploadFromEmailApiV1ImapSessionIdBulkUploadFromEmailPost', 'sessionId', sessionId)
            // verify required parameter 'emailData' is not null or undefined
            assertParamExists('bulkUploadFromEmailApiV1ImapSessionIdBulkUploadFromEmailPost', 'emailData', emailData)
            const localVarPath = `/api/v1/imap/{session_id}/bulk-upload-from-email`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (emailData !== undefined) {
                localVarQueryParameter['email_data'] = emailData;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check Imap Accounts
         * @param {string} sessionId 
         * @param {number} [timeout] 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkImapAccountsApiV1ImapSessionIdCheckPost: async (sessionId: string, timeout?: number, requestBody?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('checkImapAccountsApiV1ImapSessionIdCheckPost', 'sessionId', sessionId)
            const localVarPath = `/api/v1/imap/{session_id}/check`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (timeout !== undefined) {
                localVarQueryParameter['timeout'] = timeout;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Imap Account
         * @param {string} sessionId 
         * @param {IMAPAccountCreate} iMAPAccountCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImapAccountApiV1ImapSessionIdAccountsPost: async (sessionId: string, iMAPAccountCreate: IMAPAccountCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('createImapAccountApiV1ImapSessionIdAccountsPost', 'sessionId', sessionId)
            // verify required parameter 'iMAPAccountCreate' is not null or undefined
            assertParamExists('createImapAccountApiV1ImapSessionIdAccountsPost', 'iMAPAccountCreate', iMAPAccountCreate)
            const localVarPath = `/api/v1/imap/{session_id}/accounts`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iMAPAccountCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Imap Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImapAccountApiV1ImapSessionIdAccountsAccountIdDelete: async (sessionId: string, accountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('deleteImapAccountApiV1ImapSessionIdAccountsAccountIdDelete', 'sessionId', sessionId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteImapAccountApiV1ImapSessionIdAccountsAccountIdDelete', 'accountId', accountId)
            const localVarPath = `/api/v1/imap/{session_id}/accounts/{account_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Discover IMAP hostnames via SRV lookup and intelligent guessing
         * @summary Discover Imap Hosts
         * @param {HostDiscoveryRequest} hostDiscoveryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverImapHostsApiV1DiscoveryImapHostsPost: async (hostDiscoveryRequest: HostDiscoveryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hostDiscoveryRequest' is not null or undefined
            assertParamExists('discoverImapHostsApiV1DiscoveryImapHostsPost', 'hostDiscoveryRequest', hostDiscoveryRequest)
            const localVarPath = `/api/v1/discovery/imap-hosts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hostDiscoveryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Imap Accounts
         * @param {string} sessionId 
         * @param {string} [statusFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listImapAccountsApiV1ImapSessionIdAccountsGet: async (sessionId: string, statusFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('listImapAccountsApiV1ImapSessionIdAccountsGet', 'sessionId', sessionId)
            const localVarPath = `/api/v1/imap/{session_id}/accounts`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (statusFilter !== undefined) {
                localVarQueryParameter['status_filter'] = statusFilter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Parse IMAP list from file and return parsed accounts
         * @summary Parse Imap List Endpoint
         * @param {File} imapFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parseImapListEndpointApiV1ImapParsePost: async (imapFile: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imapFile' is not null or undefined
            assertParamExists('parseImapListEndpointApiV1ImapParsePost', 'imapFile', imapFile)
            const localVarPath = `/api/v1/imap/parse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (imapFile !== undefined) { 
                localVarFormParams.append('imap_file', imapFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test IMAP accounts
         * @summary Test Imap Accounts
         * @param {IMAPTestRequest} iMAPTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testImapAccountsApiV1ImapTestPost: async (iMAPTestRequest: IMAPTestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iMAPTestRequest' is not null or undefined
            assertParamExists('testImapAccountsApiV1ImapTestPost', 'iMAPTestRequest', iMAPTestRequest)
            const localVarPath = `/api/v1/imap/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iMAPTestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test IMAP accounts from uploaded file
         * @summary Test Imap Accounts From File
         * @param {File} imapFile 
         * @param {number} [timeout] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testImapAccountsFromFileApiV1ImapTestFilePost: async (imapFile: File, timeout?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imapFile' is not null or undefined
            assertParamExists('testImapAccountsFromFileApiV1ImapTestFilePost', 'imapFile', imapFile)
            const localVarPath = `/api/v1/imap/test-file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (timeout !== undefined) {
                localVarQueryParameter['timeout'] = timeout;
            }


            if (imapFile !== undefined) { 
                localVarFormParams.append('imap_file', imapFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update existing IMAP account.
         * @summary Update Imap Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {IMAPAccountUpdate} iMAPAccountUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImapAccountApiV1ImapSessionIdAccountsAccountIdPut: async (sessionId: string, accountId: string, iMAPAccountUpdate: IMAPAccountUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('updateImapAccountApiV1ImapSessionIdAccountsAccountIdPut', 'sessionId', sessionId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateImapAccountApiV1ImapSessionIdAccountsAccountIdPut', 'accountId', accountId)
            // verify required parameter 'iMAPAccountUpdate' is not null or undefined
            assertParamExists('updateImapAccountApiV1ImapSessionIdAccountsAccountIdPut', 'iMAPAccountUpdate', iMAPAccountUpdate)
            const localVarPath = `/api/v1/imap/{session_id}/accounts/{account_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iMAPAccountUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IMAPApi - functional programming interface
 * @export
 */
export const IMAPApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IMAPApiAxiosParamCreator(configuration)
    return {
        /**
         * Auto-detect IMAP settings from email:password format
         * @summary Bulk Upload From Email
         * @param {string} sessionId 
         * @param {string} emailData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUploadFromEmailApiV1ImapSessionIdBulkUploadFromEmailPost(sessionId: string, emailData: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemasCommonMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUploadFromEmailApiV1ImapSessionIdBulkUploadFromEmailPost(sessionId, emailData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPApi.bulkUploadFromEmailApiV1ImapSessionIdBulkUploadFromEmailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check Imap Accounts
         * @param {string} sessionId 
         * @param {number} [timeout] 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkImapAccountsApiV1ImapSessionIdCheckPost(sessionId: string, timeout?: number, requestBody?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemasCommonMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkImapAccountsApiV1ImapSessionIdCheckPost(sessionId, timeout, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPApi.checkImapAccountsApiV1ImapSessionIdCheckPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Imap Account
         * @param {string} sessionId 
         * @param {IMAPAccountCreate} iMAPAccountCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createImapAccountApiV1ImapSessionIdAccountsPost(sessionId: string, iMAPAccountCreate: IMAPAccountCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IMAPAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createImapAccountApiV1ImapSessionIdAccountsPost(sessionId, iMAPAccountCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPApi.createImapAccountApiV1ImapSessionIdAccountsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Imap Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImapAccountApiV1ImapSessionIdAccountsAccountIdDelete(sessionId: string, accountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemasCommonMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImapAccountApiV1ImapSessionIdAccountsAccountIdDelete(sessionId, accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPApi.deleteImapAccountApiV1ImapSessionIdAccountsAccountIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Discover IMAP hostnames via SRV lookup and intelligent guessing
         * @summary Discover Imap Hosts
         * @param {HostDiscoveryRequest} hostDiscoveryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discoverImapHostsApiV1DiscoveryImapHostsPost(hostDiscoveryRequest: HostDiscoveryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostDiscoveryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discoverImapHostsApiV1DiscoveryImapHostsPost(hostDiscoveryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPApi.discoverImapHostsApiV1DiscoveryImapHostsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Imap Accounts
         * @param {string} sessionId 
         * @param {string} [statusFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listImapAccountsApiV1ImapSessionIdAccountsGet(sessionId: string, statusFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IMAPAccountResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listImapAccountsApiV1ImapSessionIdAccountsGet(sessionId, statusFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPApi.listImapAccountsApiV1ImapSessionIdAccountsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Parse IMAP list from file and return parsed accounts
         * @summary Parse Imap List Endpoint
         * @param {File} imapFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parseImapListEndpointApiV1ImapParsePost(imapFile: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parseImapListEndpointApiV1ImapParsePost(imapFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPApi.parseImapListEndpointApiV1ImapParsePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test IMAP accounts
         * @summary Test Imap Accounts
         * @param {IMAPTestRequest} iMAPTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testImapAccountsApiV1ImapTestPost(iMAPTestRequest: IMAPTestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IMAPBulkTestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testImapAccountsApiV1ImapTestPost(iMAPTestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPApi.testImapAccountsApiV1ImapTestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test IMAP accounts from uploaded file
         * @summary Test Imap Accounts From File
         * @param {File} imapFile 
         * @param {number} [timeout] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testImapAccountsFromFileApiV1ImapTestFilePost(imapFile: File, timeout?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IMAPBulkTestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testImapAccountsFromFileApiV1ImapTestFilePost(imapFile, timeout, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPApi.testImapAccountsFromFileApiV1ImapTestFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update existing IMAP account.
         * @summary Update Imap Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {IMAPAccountUpdate} iMAPAccountUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateImapAccountApiV1ImapSessionIdAccountsAccountIdPut(sessionId: string, accountId: string, iMAPAccountUpdate: IMAPAccountUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IMAPAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImapAccountApiV1ImapSessionIdAccountsAccountIdPut(sessionId, accountId, iMAPAccountUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IMAPApi.updateImapAccountApiV1ImapSessionIdAccountsAccountIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IMAPApi - factory interface
 * @export
 */
export const IMAPApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IMAPApiFp(configuration)
    return {
        /**
         * Auto-detect IMAP settings from email:password format
         * @summary Bulk Upload From Email
         * @param {string} sessionId 
         * @param {string} emailData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUploadFromEmailApiV1ImapSessionIdBulkUploadFromEmailPost(sessionId: string, emailData: string, options?: RawAxiosRequestConfig): AxiosPromise<SchemasCommonMessageResponse> {
            return localVarFp.bulkUploadFromEmailApiV1ImapSessionIdBulkUploadFromEmailPost(sessionId, emailData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check Imap Accounts
         * @param {string} sessionId 
         * @param {number} [timeout] 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkImapAccountsApiV1ImapSessionIdCheckPost(sessionId: string, timeout?: number, requestBody?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<SchemasCommonMessageResponse> {
            return localVarFp.checkImapAccountsApiV1ImapSessionIdCheckPost(sessionId, timeout, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Imap Account
         * @param {string} sessionId 
         * @param {IMAPAccountCreate} iMAPAccountCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImapAccountApiV1ImapSessionIdAccountsPost(sessionId: string, iMAPAccountCreate: IMAPAccountCreate, options?: RawAxiosRequestConfig): AxiosPromise<IMAPAccountResponse> {
            return localVarFp.createImapAccountApiV1ImapSessionIdAccountsPost(sessionId, iMAPAccountCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Imap Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImapAccountApiV1ImapSessionIdAccountsAccountIdDelete(sessionId: string, accountId: string, options?: RawAxiosRequestConfig): AxiosPromise<SchemasCommonMessageResponse> {
            return localVarFp.deleteImapAccountApiV1ImapSessionIdAccountsAccountIdDelete(sessionId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Discover IMAP hostnames via SRV lookup and intelligent guessing
         * @summary Discover Imap Hosts
         * @param {HostDiscoveryRequest} hostDiscoveryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverImapHostsApiV1DiscoveryImapHostsPost(hostDiscoveryRequest: HostDiscoveryRequest, options?: RawAxiosRequestConfig): AxiosPromise<HostDiscoveryResponse> {
            return localVarFp.discoverImapHostsApiV1DiscoveryImapHostsPost(hostDiscoveryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Imap Accounts
         * @param {string} sessionId 
         * @param {string} [statusFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listImapAccountsApiV1ImapSessionIdAccountsGet(sessionId: string, statusFilter?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<IMAPAccountResponse>> {
            return localVarFp.listImapAccountsApiV1ImapSessionIdAccountsGet(sessionId, statusFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Parse IMAP list from file and return parsed accounts
         * @summary Parse Imap List Endpoint
         * @param {File} imapFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parseImapListEndpointApiV1ImapParsePost(imapFile: File, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.parseImapListEndpointApiV1ImapParsePost(imapFile, options).then((request) => request(axios, basePath));
        },
        /**
         * Test IMAP accounts
         * @summary Test Imap Accounts
         * @param {IMAPTestRequest} iMAPTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testImapAccountsApiV1ImapTestPost(iMAPTestRequest: IMAPTestRequest, options?: RawAxiosRequestConfig): AxiosPromise<IMAPBulkTestResponse> {
            return localVarFp.testImapAccountsApiV1ImapTestPost(iMAPTestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Test IMAP accounts from uploaded file
         * @summary Test Imap Accounts From File
         * @param {File} imapFile 
         * @param {number} [timeout] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testImapAccountsFromFileApiV1ImapTestFilePost(imapFile: File, timeout?: number, options?: RawAxiosRequestConfig): AxiosPromise<IMAPBulkTestResponse> {
            return localVarFp.testImapAccountsFromFileApiV1ImapTestFilePost(imapFile, timeout, options).then((request) => request(axios, basePath));
        },
        /**
         * Update existing IMAP account.
         * @summary Update Imap Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {IMAPAccountUpdate} iMAPAccountUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImapAccountApiV1ImapSessionIdAccountsAccountIdPut(sessionId: string, accountId: string, iMAPAccountUpdate: IMAPAccountUpdate, options?: RawAxiosRequestConfig): AxiosPromise<IMAPAccountResponse> {
            return localVarFp.updateImapAccountApiV1ImapSessionIdAccountsAccountIdPut(sessionId, accountId, iMAPAccountUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IMAPApi - object-oriented interface
 * @export
 * @class IMAPApi
 * @extends {BaseAPI}
 */
export class IMAPApi extends BaseAPI {
    /**
     * Auto-detect IMAP settings from email:password format
     * @summary Bulk Upload From Email
     * @param {string} sessionId 
     * @param {string} emailData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPApi
     */
    public bulkUploadFromEmailApiV1ImapSessionIdBulkUploadFromEmailPost(sessionId: string, emailData: string, options?: RawAxiosRequestConfig) {
        return IMAPApiFp(this.configuration).bulkUploadFromEmailApiV1ImapSessionIdBulkUploadFromEmailPost(sessionId, emailData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check Imap Accounts
     * @param {string} sessionId 
     * @param {number} [timeout] 
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPApi
     */
    public checkImapAccountsApiV1ImapSessionIdCheckPost(sessionId: string, timeout?: number, requestBody?: Array<string>, options?: RawAxiosRequestConfig) {
        return IMAPApiFp(this.configuration).checkImapAccountsApiV1ImapSessionIdCheckPost(sessionId, timeout, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Imap Account
     * @param {string} sessionId 
     * @param {IMAPAccountCreate} iMAPAccountCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPApi
     */
    public createImapAccountApiV1ImapSessionIdAccountsPost(sessionId: string, iMAPAccountCreate: IMAPAccountCreate, options?: RawAxiosRequestConfig) {
        return IMAPApiFp(this.configuration).createImapAccountApiV1ImapSessionIdAccountsPost(sessionId, iMAPAccountCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Imap Account
     * @param {string} sessionId 
     * @param {string} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPApi
     */
    public deleteImapAccountApiV1ImapSessionIdAccountsAccountIdDelete(sessionId: string, accountId: string, options?: RawAxiosRequestConfig) {
        return IMAPApiFp(this.configuration).deleteImapAccountApiV1ImapSessionIdAccountsAccountIdDelete(sessionId, accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Discover IMAP hostnames via SRV lookup and intelligent guessing
     * @summary Discover Imap Hosts
     * @param {HostDiscoveryRequest} hostDiscoveryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPApi
     */
    public discoverImapHostsApiV1DiscoveryImapHostsPost(hostDiscoveryRequest: HostDiscoveryRequest, options?: RawAxiosRequestConfig) {
        return IMAPApiFp(this.configuration).discoverImapHostsApiV1DiscoveryImapHostsPost(hostDiscoveryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Imap Accounts
     * @param {string} sessionId 
     * @param {string} [statusFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPApi
     */
    public listImapAccountsApiV1ImapSessionIdAccountsGet(sessionId: string, statusFilter?: string, options?: RawAxiosRequestConfig) {
        return IMAPApiFp(this.configuration).listImapAccountsApiV1ImapSessionIdAccountsGet(sessionId, statusFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Parse IMAP list from file and return parsed accounts
     * @summary Parse Imap List Endpoint
     * @param {File} imapFile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPApi
     */
    public parseImapListEndpointApiV1ImapParsePost(imapFile: File, options?: RawAxiosRequestConfig) {
        return IMAPApiFp(this.configuration).parseImapListEndpointApiV1ImapParsePost(imapFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test IMAP accounts
     * @summary Test Imap Accounts
     * @param {IMAPTestRequest} iMAPTestRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPApi
     */
    public testImapAccountsApiV1ImapTestPost(iMAPTestRequest: IMAPTestRequest, options?: RawAxiosRequestConfig) {
        return IMAPApiFp(this.configuration).testImapAccountsApiV1ImapTestPost(iMAPTestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test IMAP accounts from uploaded file
     * @summary Test Imap Accounts From File
     * @param {File} imapFile 
     * @param {number} [timeout] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPApi
     */
    public testImapAccountsFromFileApiV1ImapTestFilePost(imapFile: File, timeout?: number, options?: RawAxiosRequestConfig) {
        return IMAPApiFp(this.configuration).testImapAccountsFromFileApiV1ImapTestFilePost(imapFile, timeout, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update existing IMAP account.
     * @summary Update Imap Account
     * @param {string} sessionId 
     * @param {string} accountId 
     * @param {IMAPAccountUpdate} iMAPAccountUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IMAPApi
     */
    public updateImapAccountApiV1ImapSessionIdAccountsAccountIdPut(sessionId: string, accountId: string, iMAPAccountUpdate: IMAPAccountUpdate, options?: RawAxiosRequestConfig) {
        return IMAPApiFp(this.configuration).updateImapAccountApiV1ImapSessionIdAccountsAccountIdPut(sessionId, accountId, iMAPAccountUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

