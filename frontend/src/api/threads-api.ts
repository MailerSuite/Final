/* tslint:disable */
/* eslint-disable */
/**
 * SGPT API
 * ðŸ“§ Professional Email Marketing & IMAP Management Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosRequestConfig } from 'axios';
import axiosInstance from '@/http/axios'
import type { AxiosInstance } from 'axios'
const globalAxios: AxiosInstance = axiosInstance;
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError, operationServerMap } from './base';
// @ts-ignore
import type { HTTPValidationError } from './models';
// @ts-ignore
import type { ThreadPoolCreate } from './models';
// @ts-ignore
import type { ThreadPoolResponse } from './models';
// @ts-ignore
import type { ThreadPoolUpdate } from './models';
/**
 * ThreadsApi - axios parameter creator
 * @export
 */
export const ThreadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Pool
         * @param {ThreadPoolCreate} threadPoolCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPoolApiV1ThreadsPost: async (threadPoolCreate: ThreadPoolCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'threadPoolCreate' is not null or undefined
            assertParamExists('createPoolApiV1ThreadsPost', 'threadPoolCreate', threadPoolCreate)
            const localVarPath = `/api/v1/threads/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(threadPoolCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Pool
         * @param {string} poolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoolApiV1ThreadsPoolIdDelete: async (poolId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'poolId' is not null or undefined
            assertParamExists('deletePoolApiV1ThreadsPoolIdDelete', 'poolId', poolId)
            const localVarPath = `/api/v1/threads/{pool_id}/`
                .replace(`{${"pool_id"}}`, encodeURIComponent(String(poolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Pools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPoolsApiV1ThreadsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/threads/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Pool
         * @param {string} poolId 
         * @param {ThreadPoolUpdate} threadPoolUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoolApiV1ThreadsPoolIdPut: async (poolId: string, threadPoolUpdate: ThreadPoolUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'poolId' is not null or undefined
            assertParamExists('updatePoolApiV1ThreadsPoolIdPut', 'poolId', poolId)
            // verify required parameter 'threadPoolUpdate' is not null or undefined
            assertParamExists('updatePoolApiV1ThreadsPoolIdPut', 'threadPoolUpdate', threadPoolUpdate)
            const localVarPath = `/api/v1/threads/{pool_id}/`
                .replace(`{${"pool_id"}}`, encodeURIComponent(String(poolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(threadPoolUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThreadsApi - functional programming interface
 * @export
 */
export const ThreadsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThreadsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Pool
         * @param {ThreadPoolCreate} threadPoolCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPoolApiV1ThreadsPost(threadPoolCreate: ThreadPoolCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThreadPoolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPoolApiV1ThreadsPost(threadPoolCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ThreadsApi.createPoolApiV1ThreadsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Pool
         * @param {string} poolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePoolApiV1ThreadsPoolIdDelete(poolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePoolApiV1ThreadsPoolIdDelete(poolId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ThreadsApi.deletePoolApiV1ThreadsPoolIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Pools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPoolsApiV1ThreadsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ThreadPoolResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPoolsApiV1ThreadsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ThreadsApi.listPoolsApiV1ThreadsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Pool
         * @param {string} poolId 
         * @param {ThreadPoolUpdate} threadPoolUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePoolApiV1ThreadsPoolIdPut(poolId: string, threadPoolUpdate: ThreadPoolUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThreadPoolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePoolApiV1ThreadsPoolIdPut(poolId, threadPoolUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ThreadsApi.updatePoolApiV1ThreadsPoolIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ThreadsApi - factory interface
 * @export
 */
export const ThreadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThreadsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Pool
         * @param {ThreadPoolCreate} threadPoolCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPoolApiV1ThreadsPost(threadPoolCreate: ThreadPoolCreate, options?: RawAxiosRequestConfig): AxiosPromise<ThreadPoolResponse> {
            return localVarFp.createPoolApiV1ThreadsPost(threadPoolCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Pool
         * @param {string} poolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoolApiV1ThreadsPoolIdDelete(poolId: string, options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.deletePoolApiV1ThreadsPoolIdDelete(poolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Pools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPoolsApiV1ThreadsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ThreadPoolResponse>> {
            return localVarFp.listPoolsApiV1ThreadsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Pool
         * @param {string} poolId 
         * @param {ThreadPoolUpdate} threadPoolUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoolApiV1ThreadsPoolIdPut(poolId: string, threadPoolUpdate: ThreadPoolUpdate, options?: RawAxiosRequestConfig): AxiosPromise<ThreadPoolResponse> {
            return localVarFp.updatePoolApiV1ThreadsPoolIdPut(poolId, threadPoolUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ThreadsApi - object-oriented interface
 * @export
 * @class ThreadsApi
 * @extends {BaseAPI}
 */
export class ThreadsApi extends BaseAPI {
    /**
     * 
     * @summary Create Pool
     * @param {ThreadPoolCreate} threadPoolCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadsApi
     */
    public createPoolApiV1ThreadsPost(threadPoolCreate: ThreadPoolCreate, options?: RawAxiosRequestConfig) {
        return ThreadsApiFp(this.configuration).createPoolApiV1ThreadsPost(threadPoolCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Pool
     * @param {string} poolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadsApi
     */
    public deletePoolApiV1ThreadsPoolIdDelete(poolId: string, options?: RawAxiosRequestConfig) {
        return ThreadsApiFp(this.configuration).deletePoolApiV1ThreadsPoolIdDelete(poolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Pools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadsApi
     */
    public listPoolsApiV1ThreadsGet(options?: RawAxiosRequestConfig) {
        return ThreadsApiFp(this.configuration).listPoolsApiV1ThreadsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Pool
     * @param {string} poolId 
     * @param {ThreadPoolUpdate} threadPoolUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadsApi
     */
    public updatePoolApiV1ThreadsPoolIdPut(poolId: string, threadPoolUpdate: ThreadPoolUpdate, options?: RawAxiosRequestConfig) {
        return ThreadsApiFp(this.configuration).updatePoolApiV1ThreadsPoolIdPut(poolId, threadPoolUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

