/* tslint:disable */
/* eslint-disable */
/**
 * SGPT API
 * ðŸ“§ Professional Email Marketing & IMAP Management Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosRequestConfig } from 'axios';
import axiosInstance from '@/http/axios'
import type { AxiosInstance } from 'axios'
const globalAxios: AxiosInstance = axiosInstance;
import type { ComposeEmailPayload } from '@/services/emailService'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from './base';
// @ts-ignore
import type { HTTPValidationError } from './models';
// @ts-ignore
import type { SuccessResponse } from './models';
/**
 * EmailComposeApi - axios parameter creator
 * @export
 */
export const EmailComposeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Send Email
         * @param {string} emailData 
         * @param {File | null} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailApiV1ComposeComposeSendPost: async (
            emailData: string,
            smtpMode?: string,
            smtpIds?: Array<string>,
            count?: number,
            templates?: Array<string>,
            file?: File | null,
            options: RawAxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'emailData' is not null or undefined
            assertParamExists('sendEmailApiV1ComposeComposeSendPost', 'emailData', emailData)
            const localVarPath = `/api/v1/compose/compose/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (emailData !== undefined) {
                localVarFormParams.append('email_data', emailData as any);
            }
            if (smtpMode !== undefined) {
                localVarFormParams.append('smtp_mode', smtpMode as any);
            }
            if (smtpIds) {
                smtpIds.forEach((id) => localVarFormParams.append('smtp_ids', id as any));
            }
            if (count !== undefined) {
                localVarFormParams.append('count', count as any);
            }
            if (templates) {
                templates.forEach((t) => localVarFormParams.append('templates', t as any));
            }

            if (file !== undefined) {
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailComposeApi - functional programming interface
 * @export
 */
export const EmailComposeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailComposeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Send Email
         * @param {string} emailData 
         * @param {File | null} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEmailApiV1ComposeComposeSendPost(
            emailData: string,
            smtpMode?: string,
            smtpIds?: Array<string>,
            count?: number,
            templates?: Array<string>,
            file?: File | null,
            options?: RawAxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendEmailApiV1ComposeComposeSendPost(emailData, smtpMode, smtpIds, count, templates, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmailComposeApi.sendEmailApiV1ComposeComposeSendPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EmailComposeApi - factory interface
 * @export
 */
export const EmailComposeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailComposeApiFp(configuration)
    return {
        /**
         * 
         * @summary Send Email
         * @param {string} emailData 
         * @param {File | null} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailApiV1ComposeComposeSendPost(
            emailData: string,
            smtpMode?: string,
            smtpIds?: Array<string>,
            count?: number,
            templates?: Array<string>,
            file?: File | null,
            options?: RawAxiosRequestConfig
        ): AxiosPromise<SuccessResponse> {
            return localVarFp
                .sendEmailApiV1ComposeComposeSendPost(emailData, smtpMode, smtpIds, count, templates, file, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailComposeApi - object-oriented interface
 * @export
 * @class EmailComposeApi
 * @extends {BaseAPI}
 */
export class EmailComposeApi extends BaseAPI {
    /**
     * 
     * @summary Send Email
     * @param {string} emailData 
     * @param {File | null} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailComposeApi
     */
    public sendEmailApiV1ComposeComposeSendPost(
        emailData: string,
        smtpMode?: string,
        smtpIds?: Array<string>,
        count?: number,
        templates?: Array<string>,
        file?: File | null,
        options?: RawAxiosRequestConfig
    ) {
        return EmailComposeApiFp(this.configuration)
            .sendEmailApiV1ComposeComposeSendPost(emailData, smtpMode, smtpIds, count, templates, file, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

export async function sendEmailBatch(payloads: ComposeEmailPayload[]) {
  for (const p of payloads) {
    await new EmailComposeApi().sendEmailApiV1ComposeComposeSendPost(
      p.email_data,
      p.smtpMode,
      p.smtpIds,
      p.count,
      p.templates,
      p.file,
    )
  }
}

export async function pollSendStatus(id: string) {
  const { data } = await axiosInstance.get(`/compose/compose/status/${id}`)
  return data
}

