/* tslint:disable */
/* eslint-disable */
/**
 * SGPT API
 * ðŸ“§ Professional Email Marketing & IMAP Management Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosRequestConfig } from 'axios';
import axiosInstance from '@/http/axios'
import type { AxiosInstance } from 'axios'
const globalAxios: AxiosInstance = axiosInstance;
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError, operationServerMap } from './base';
// @ts-ignore
import type { HTTPValidationError } from './models';
/**
 * OAuthAuthenticationApi - axios parameter creator
 * @export
 */
export const OAuthAuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Microsoft OAuth authorization URL
         * @summary Microsoft Authorize
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        microsoftAuthorizeApiV1OauthOauthMicrosoftAuthorizeGet: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('microsoftAuthorizeApiV1OauthOauthMicrosoftAuthorizeGet', 'email', email)
            const localVarPath = `/api/v1/oauth/oauth/microsoft/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Handle Microsoft OAuth callback
         * @summary Microsoft Callback
         * @param {string} code 
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        microsoftCallbackApiV1OauthOauthMicrosoftCallbackGet: async (code: string, state: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('microsoftCallbackApiV1OauthOauthMicrosoftCallbackGet', 'code', code)
            // verify required parameter 'state' is not null or undefined
            assertParamExists('microsoftCallbackApiV1OauthOauthMicrosoftCallbackGet', 'state', state)
            const localVarPath = `/api/v1/oauth/oauth/microsoft/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OAuthAuthenticationApi - functional programming interface
 * @export
 */
export const OAuthAuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OAuthAuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Microsoft OAuth authorization URL
         * @summary Microsoft Authorize
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async microsoftAuthorizeApiV1OauthOauthMicrosoftAuthorizeGet(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.microsoftAuthorizeApiV1OauthOauthMicrosoftAuthorizeGet(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OAuthAuthenticationApi.microsoftAuthorizeApiV1OauthOauthMicrosoftAuthorizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Handle Microsoft OAuth callback
         * @summary Microsoft Callback
         * @param {string} code 
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async microsoftCallbackApiV1OauthOauthMicrosoftCallbackGet(code: string, state: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.microsoftCallbackApiV1OauthOauthMicrosoftCallbackGet(code, state, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OAuthAuthenticationApi.microsoftCallbackApiV1OauthOauthMicrosoftCallbackGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OAuthAuthenticationApi - factory interface
 * @export
 */
export const OAuthAuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OAuthAuthenticationApiFp(configuration)
    return {
        /**
         * Get Microsoft OAuth authorization URL
         * @summary Microsoft Authorize
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        microsoftAuthorizeApiV1OauthOauthMicrosoftAuthorizeGet(email: string, options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.microsoftAuthorizeApiV1OauthOauthMicrosoftAuthorizeGet(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Handle Microsoft OAuth callback
         * @summary Microsoft Callback
         * @param {string} code 
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        microsoftCallbackApiV1OauthOauthMicrosoftCallbackGet(code: string, state: string, options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.microsoftCallbackApiV1OauthOauthMicrosoftCallbackGet(code, state, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OAuthAuthenticationApi - object-oriented interface
 * @export
 * @class OAuthAuthenticationApi
 * @extends {BaseAPI}
 */
export class OAuthAuthenticationApi extends BaseAPI {
    /**
     * Get Microsoft OAuth authorization URL
     * @summary Microsoft Authorize
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthAuthenticationApi
     */
    public microsoftAuthorizeApiV1OauthOauthMicrosoftAuthorizeGet(email: string, options?: RawAxiosRequestConfig) {
        return OAuthAuthenticationApiFp(this.configuration).microsoftAuthorizeApiV1OauthOauthMicrosoftAuthorizeGet(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Handle Microsoft OAuth callback
     * @summary Microsoft Callback
     * @param {string} code 
     * @param {string} state 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthAuthenticationApi
     */
    public microsoftCallbackApiV1OauthOauthMicrosoftCallbackGet(code: string, state: string, options?: RawAxiosRequestConfig) {
        return OAuthAuthenticationApiFp(this.configuration).microsoftCallbackApiV1OauthOauthMicrosoftCallbackGet(code, state, options).then((request) => request(this.axios, this.basePath));
    }
}

