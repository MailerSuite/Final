/* tslint:disable */
/* eslint-disable */
/**
 * SGPT API
 * ðŸ“§ Professional Email Marketing & IMAP Management Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosRequestConfig } from 'axios';
import axiosInstance from '@/http/axios'
import type { AxiosInstance } from 'axios'
const globalAxios: AxiosInstance = axiosInstance;
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from './base';
// @ts-ignore
import type { HTTPValidationError } from './models';
// @ts-ignore
import type { Plan } from './models';
// @ts-ignore
import type { SupportTicket } from './models';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Plan
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlanApiV1AdminPlansPost: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createPlanApiV1AdminPlansPost', 'body', body)
            const localVarPath = `/api/v1/admin/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Admin Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminStatsApiV1AdminStatsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlansApiV1AdminPlansGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Support Tickets
         * @param {string} [statusFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSupportTicketsApiV1AdminSupportTicketsGet: async (statusFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/support-tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (statusFilter !== undefined) {
                localVarQueryParameter['status_filter'] = statusFilter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersApiV1AdminUsersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Ticket Status
         * @param {number} ticketId 
         * @param {string} newStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTicketStatusApiV1AdminSupportTicketsTicketIdStatusPut: async (ticketId: number, newStatus: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketId' is not null or undefined
            assertParamExists('updateTicketStatusApiV1AdminSupportTicketsTicketIdStatusPut', 'ticketId', ticketId)
            // verify required parameter 'newStatus' is not null or undefined
            assertParamExists('updateTicketStatusApiV1AdminSupportTicketsTicketIdStatusPut', 'newStatus', newStatus)
            const localVarPath = `/api/v1/admin/support-tickets/{ticket_id}/status`
                .replace(`{${"ticket_id"}}`, encodeURIComponent(String(ticketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (newStatus !== undefined) {
                localVarQueryParameter['new_status'] = newStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Plan
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlanApiV1AdminPlansPost(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlanApiV1AdminPlansPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.createPlanApiV1AdminPlansPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Admin Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminStatsApiV1AdminStatsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdminStatsApiV1AdminStatsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getAdminStatsApiV1AdminStatsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPlansApiV1AdminPlansGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Plan>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPlansApiV1AdminPlansGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.listPlansApiV1AdminPlansGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Support Tickets
         * @param {string} [statusFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSupportTicketsApiV1AdminSupportTicketsGet(statusFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SupportTicket>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSupportTicketsApiV1AdminSupportTicketsGet(statusFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.listSupportTicketsApiV1AdminSupportTicketsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsersApiV1AdminUsersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsersApiV1AdminUsersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.listUsersApiV1AdminUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Ticket Status
         * @param {number} ticketId 
         * @param {string} newStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTicketStatusApiV1AdminSupportTicketsTicketIdStatusPut(ticketId: number, newStatus: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTicketStatusApiV1AdminSupportTicketsTicketIdStatusPut(ticketId, newStatus, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.updateTicketStatusApiV1AdminSupportTicketsTicketIdStatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Plan
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlanApiV1AdminPlansPost(body: object, options?: RawAxiosRequestConfig): AxiosPromise<Plan> {
            return localVarFp.createPlanApiV1AdminPlansPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Admin Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminStatsApiV1AdminStatsGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getAdminStatsApiV1AdminStatsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlansApiV1AdminPlansGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Plan>> {
            return localVarFp.listPlansApiV1AdminPlansGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Support Tickets
         * @param {string} [statusFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSupportTicketsApiV1AdminSupportTicketsGet(statusFilter?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SupportTicket>> {
            return localVarFp.listSupportTicketsApiV1AdminSupportTicketsGet(statusFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersApiV1AdminUsersGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.listUsersApiV1AdminUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Ticket Status
         * @param {number} ticketId 
         * @param {string} newStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTicketStatusApiV1AdminSupportTicketsTicketIdStatusPut(ticketId: number, newStatus: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateTicketStatusApiV1AdminSupportTicketsTicketIdStatusPut(ticketId, newStatus, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 
     * @summary Create Plan
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public createPlanApiV1AdminPlansPost(body: object, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).createPlanApiV1AdminPlansPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Admin Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getAdminStatsApiV1AdminStatsGet(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getAdminStatsApiV1AdminStatsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public listPlansApiV1AdminPlansGet(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).listPlansApiV1AdminPlansGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Support Tickets
     * @param {string} [statusFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public listSupportTicketsApiV1AdminSupportTicketsGet(statusFilter?: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).listSupportTicketsApiV1AdminSupportTicketsGet(statusFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public listUsersApiV1AdminUsersGet(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).listUsersApiV1AdminUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Ticket Status
     * @param {number} ticketId 
     * @param {string} newStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public updateTicketStatusApiV1AdminSupportTicketsTicketIdStatusPut(ticketId: number, newStatus: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).updateTicketStatusApiV1AdminSupportTicketsTicketIdStatusPut(ticketId, newStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Tarifs
     */
    public listTarifsApiV1AdminTarifsGet(options?: RawAxiosRequestConfig) {
        return this.axios.get<any[]>("/api/v1/admin/tarifs", options);
    }

    /**
     * Create Tarif
     */
    public createTarifApiV1AdminTarifsPost(body: object, options?: RawAxiosRequestConfig) {
        return this.axios.post<any>("/api/v1/admin/tarifs", body, options);
    }

    /**
     * List News
     */
    public listNewsApiV1AdminNewsGet(options?: RawAxiosRequestConfig) {
        return this.axios.get<any[]>("/api/v1/admin/news", options);
    }

    /**
     * Create News
     */
    public createNewsApiV1AdminNewsPost(body: object, options?: RawAxiosRequestConfig) {
        return this.axios.post<any>("/api/v1/admin/news", body, options);
    }
}

