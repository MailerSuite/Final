/* tslint:disable */
/* eslint-disable */
/**
 * SGPT API
 * ðŸ“§ Professional Email Marketing & IMAP Management Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError, operationServerMap } from './base';
// @ts-ignore
import type { BodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost } from './models';
// @ts-ignore
import type { HTTPValidationError } from './models';
// @ts-ignore
import type { HostDiscoveryRequest } from './models';
// @ts-ignore
import type { HostDiscoveryResponse } from './models';
// @ts-ignore
import type { SMTPAccount } from './models';
// @ts-ignore
import type { SMTPAccountCreate } from './models';
// @ts-ignore
import type { SMTPAccountUpdate } from './models';
// @ts-ignore
import type { SMTPBulkTestResponse } from './models';
// @ts-ignore
import type { SMTPBulkUpload } from './models';
// @ts-ignore
import type { SMTPTestRequest } from './models';
// @ts-ignore
import type { SchemasCommonMessageResponse } from './models';
// @ts-ignore
import type { SuccessResponse } from './models';
/**
 * SMTPApi - axios parameter creator
 * @export
 */
export const SMTPApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bulk Upload Smtp
         * @param {string} sessionId 
         * @param {SMTPBulkUpload} sMTPBulkUpload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUploadSmtpApiV1SmtpSessionIdBulkUploadPost: async (sessionId: string, sMTPBulkUpload: SMTPBulkUpload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('bulkUploadSmtpApiV1SmtpSessionIdBulkUploadPost', 'sessionId', sessionId)
            // verify required parameter 'sMTPBulkUpload' is not null or undefined
            assertParamExists('bulkUploadSmtpApiV1SmtpSessionIdBulkUploadPost', 'sMTPBulkUpload', sMTPBulkUpload)
            const localVarPath = `/api/v1/smtp/{session_id}/bulk-upload`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sMTPBulkUpload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check Smtp Accounts
         * @param {string} sessionId 
         * @param {number} [timeout] 
         * @param {BodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost} [bodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkSmtpAccountsApiV1SmtpSessionIdCheckPost: async (sessionId: string, timeout?: number, bodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost?: BodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('checkSmtpAccountsApiV1SmtpSessionIdCheckPost', 'sessionId', sessionId)
            const localVarPath = `/api/v1/smtp/{session_id}/check`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (timeout !== undefined) {
                localVarQueryParameter['timeout'] = timeout;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Smtp Account
         * @param {string} sessionId 
         * @param {SMTPAccountCreate} sMTPAccountCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSmtpAccountApiV1SmtpSessionIdAccountsPost: async (sessionId: string, sMTPAccountCreate: SMTPAccountCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('createSmtpAccountApiV1SmtpSessionIdAccountsPost', 'sessionId', sessionId)
            // verify required parameter 'sMTPAccountCreate' is not null or undefined
            assertParamExists('createSmtpAccountApiV1SmtpSessionIdAccountsPost', 'sMTPAccountCreate', sMTPAccountCreate)
            const localVarPath = `/api/v1/smtp/{session_id}/accounts`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sMTPAccountCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Smtp Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSmtpAccountApiV1SmtpSessionIdAccountsAccountIdDelete: async (sessionId: string, accountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('deleteSmtpAccountApiV1SmtpSessionIdAccountsAccountIdDelete', 'sessionId', sessionId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteSmtpAccountApiV1SmtpSessionIdAccountsAccountIdDelete', 'accountId', accountId)
            const localVarPath = `/api/v1/smtp/{session_id}/accounts/{account_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Discover SMTP hostnames via MX lookup and intelligent guessing
         * @summary Discover Smtp Hosts
         * @param {HostDiscoveryRequest} hostDiscoveryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverSmtpHostsApiV1DiscoverySmtpHostsPost: async (hostDiscoveryRequest: HostDiscoveryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hostDiscoveryRequest' is not null or undefined
            assertParamExists('discoverSmtpHostsApiV1DiscoverySmtpHostsPost', 'hostDiscoveryRequest', hostDiscoveryRequest)
            const localVarPath = `/api/v1/discovery/smtp-hosts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hostDiscoveryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Check Progress
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckProgressApiV1SmtpSessionIdCheckProgressGet: async (sessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getCheckProgressApiV1SmtpSessionIdCheckProgressGet', 'sessionId', sessionId)
            const localVarPath = `/api/v1/smtp/{session_id}/check-progress`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Smtp Accounts
         * @param {string} sessionId 
         * @param {string} [statusFilter] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSmtpAccountsApiV1SmtpSessionIdAccountsGet: async (sessionId: string, statusFilter?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('listSmtpAccountsApiV1SmtpSessionIdAccountsGet', 'sessionId', sessionId)
            const localVarPath = `/api/v1/smtp/{session_id}/accounts`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (statusFilter !== undefined) {
                localVarQueryParameter['status_filter'] = statusFilter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Parse SMTP list from file and return parsed accounts
         * @summary Parse Smtp List Endpoint
         * @param {File} smtpFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parseSmtpListEndpointApiV1SmtpParsePost: async (smtpFile: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smtpFile' is not null or undefined
            assertParamExists('parseSmtpListEndpointApiV1SmtpParsePost', 'smtpFile', smtpFile)
            const localVarPath = `/api/v1/smtp/parse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (smtpFile !== undefined) { 
                localVarFormParams.append('smtp_file', smtpFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test SMTP accounts
         * @summary Test Smtp Accounts
         * @param {SMTPTestRequest} sMTPTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSmtpAccountsApiV1SmtpTestPost: async (sMTPTestRequest: SMTPTestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sMTPTestRequest' is not null or undefined
            assertParamExists('testSmtpAccountsApiV1SmtpTestPost', 'sMTPTestRequest', sMTPTestRequest)
            const localVarPath = `/api/v1/smtp/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const bodyPayload = (
                sMTPTestRequest as any
            ).smtp_accounts
                ? sMTPTestRequest
                : { smtp_accounts: [sMTPTestRequest] }
            localVarRequestOptions.data = serializeDataIfNeeded(bodyPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test SMTP accounts from uploaded file
         * @summary Test Smtp Accounts From File
         * @param {File} smtpFile 
         * @param {number} [timeout] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSmtpAccountsFromFileApiV1SmtpTestFilePost: async (smtpFile: File, timeout?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smtpFile' is not null or undefined
            assertParamExists('testSmtpAccountsFromFileApiV1SmtpTestFilePost', 'smtpFile', smtpFile)
            const localVarPath = `/api/v1/smtp/test-file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (timeout !== undefined) {
                localVarQueryParameter['timeout'] = timeout;
            }


            if (smtpFile !== undefined) { 
                localVarFormParams.append('smtp_file', smtpFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update existing SMTP account.
         * @summary Update Smtp Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {SMTPAccountUpdate} sMTPAccountUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSmtpAccountApiV1SmtpSessionIdAccountsAccountIdPut: async (sessionId: string, accountId: string, sMTPAccountUpdate: SMTPAccountUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('updateSmtpAccountApiV1SmtpSessionIdAccountsAccountIdPut', 'sessionId', sessionId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateSmtpAccountApiV1SmtpSessionIdAccountsAccountIdPut', 'accountId', accountId)
            // verify required parameter 'sMTPAccountUpdate' is not null or undefined
            assertParamExists('updateSmtpAccountApiV1SmtpSessionIdAccountsAccountIdPut', 'sMTPAccountUpdate', sMTPAccountUpdate)
            const localVarPath = `/api/v1/smtp/{session_id}/accounts/{account_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sMTPAccountUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SMTPApi - functional programming interface
 * @export
 */
export const SMTPApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SMTPApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Bulk Upload Smtp
         * @param {string} sessionId 
         * @param {SMTPBulkUpload} sMTPBulkUpload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUploadSmtpApiV1SmtpSessionIdBulkUploadPost(sessionId: string, sMTPBulkUpload: SMTPBulkUpload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemasCommonMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUploadSmtpApiV1SmtpSessionIdBulkUploadPost(sessionId, sMTPBulkUpload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMTPApi.bulkUploadSmtpApiV1SmtpSessionIdBulkUploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check Smtp Accounts
         * @param {string} sessionId 
         * @param {number} [timeout] 
         * @param {BodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost} [bodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkSmtpAccountsApiV1SmtpSessionIdCheckPost(sessionId: string, timeout?: number, bodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost?: BodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemasCommonMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkSmtpAccountsApiV1SmtpSessionIdCheckPost(sessionId, timeout, bodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMTPApi.checkSmtpAccountsApiV1SmtpSessionIdCheckPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Smtp Account
         * @param {string} sessionId 
         * @param {SMTPAccountCreate} sMTPAccountCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSmtpAccountApiV1SmtpSessionIdAccountsPost(sessionId: string, sMTPAccountCreate: SMTPAccountCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SMTPAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSmtpAccountApiV1SmtpSessionIdAccountsPost(sessionId, sMTPAccountCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMTPApi.createSmtpAccountApiV1SmtpSessionIdAccountsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Smtp Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSmtpAccountApiV1SmtpSessionIdAccountsAccountIdDelete(sessionId: string, accountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemasCommonMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSmtpAccountApiV1SmtpSessionIdAccountsAccountIdDelete(sessionId, accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMTPApi.deleteSmtpAccountApiV1SmtpSessionIdAccountsAccountIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Discover SMTP hostnames via MX lookup and intelligent guessing
         * @summary Discover Smtp Hosts
         * @param {HostDiscoveryRequest} hostDiscoveryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discoverSmtpHostsApiV1DiscoverySmtpHostsPost(hostDiscoveryRequest: HostDiscoveryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostDiscoveryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discoverSmtpHostsApiV1DiscoverySmtpHostsPost(hostDiscoveryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMTPApi.discoverSmtpHostsApiV1DiscoverySmtpHostsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Check Progress
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCheckProgressApiV1SmtpSessionIdCheckProgressGet(sessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<unknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCheckProgressApiV1SmtpSessionIdCheckProgressGet(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMTPApi.getCheckProgressApiV1SmtpSessionIdCheckProgressGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Smtp Accounts
         * @param {string} sessionId 
         * @param {string} [statusFilter] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSmtpAccountsApiV1SmtpSessionIdAccountsGet(sessionId: string, statusFilter?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SMTPAccount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSmtpAccountsApiV1SmtpSessionIdAccountsGet(sessionId, statusFilter, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMTPApi.listSmtpAccountsApiV1SmtpSessionIdAccountsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Parse SMTP list from file and return parsed accounts
         * @summary Parse Smtp List Endpoint
         * @param {File} smtpFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parseSmtpListEndpointApiV1SmtpParsePost(smtpFile: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parseSmtpListEndpointApiV1SmtpParsePost(smtpFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMTPApi.parseSmtpListEndpointApiV1SmtpParsePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test SMTP accounts
         * @summary Test Smtp Accounts
         * @param {SMTPTestRequest} sMTPTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testSmtpAccountsApiV1SmtpTestPost(sMTPTestRequest: SMTPTestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SMTPBulkTestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testSmtpAccountsApiV1SmtpTestPost(sMTPTestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMTPApi.testSmtpAccountsApiV1SmtpTestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test SMTP accounts from uploaded file
         * @summary Test Smtp Accounts From File
         * @param {File} smtpFile 
         * @param {number} [timeout] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testSmtpAccountsFromFileApiV1SmtpTestFilePost(smtpFile: File, timeout?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SMTPBulkTestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testSmtpAccountsFromFileApiV1SmtpTestFilePost(smtpFile, timeout, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMTPApi.testSmtpAccountsFromFileApiV1SmtpTestFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update existing SMTP account.
         * @summary Update Smtp Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {SMTPAccountUpdate} sMTPAccountUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSmtpAccountApiV1SmtpSessionIdAccountsAccountIdPut(sessionId: string, accountId: string, sMTPAccountUpdate: SMTPAccountUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SMTPAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSmtpAccountApiV1SmtpSessionIdAccountsAccountIdPut(sessionId, accountId, sMTPAccountUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMTPApi.updateSmtpAccountApiV1SmtpSessionIdAccountsAccountIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SMTPApi - factory interface
 * @export
 */
export const SMTPApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SMTPApiFp(configuration)
    return {
        /**
         * 
         * @summary Bulk Upload Smtp
         * @param {string} sessionId 
         * @param {SMTPBulkUpload} sMTPBulkUpload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUploadSmtpApiV1SmtpSessionIdBulkUploadPost(sessionId: string, sMTPBulkUpload: SMTPBulkUpload, options?: RawAxiosRequestConfig): AxiosPromise<SchemasCommonMessageResponse> {
            return localVarFp.bulkUploadSmtpApiV1SmtpSessionIdBulkUploadPost(sessionId, sMTPBulkUpload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check Smtp Accounts
         * @param {string} sessionId 
         * @param {number} [timeout] 
         * @param {BodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost} [bodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkSmtpAccountsApiV1SmtpSessionIdCheckPost(sessionId: string, timeout?: number, bodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost?: BodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost, options?: RawAxiosRequestConfig): AxiosPromise<SchemasCommonMessageResponse> {
            return localVarFp.checkSmtpAccountsApiV1SmtpSessionIdCheckPost(sessionId, timeout, bodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Smtp Account
         * @param {string} sessionId 
         * @param {SMTPAccountCreate} sMTPAccountCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSmtpAccountApiV1SmtpSessionIdAccountsPost(sessionId: string, sMTPAccountCreate: SMTPAccountCreate, options?: RawAxiosRequestConfig): AxiosPromise<SMTPAccount> {
            return localVarFp.createSmtpAccountApiV1SmtpSessionIdAccountsPost(sessionId, sMTPAccountCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Smtp Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSmtpAccountApiV1SmtpSessionIdAccountsAccountIdDelete(sessionId: string, accountId: string, options?: RawAxiosRequestConfig): AxiosPromise<SchemasCommonMessageResponse> {
            return localVarFp.deleteSmtpAccountApiV1SmtpSessionIdAccountsAccountIdDelete(sessionId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Discover SMTP hostnames via MX lookup and intelligent guessing
         * @summary Discover Smtp Hosts
         * @param {HostDiscoveryRequest} hostDiscoveryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverSmtpHostsApiV1DiscoverySmtpHostsPost(hostDiscoveryRequest: HostDiscoveryRequest, options?: RawAxiosRequestConfig): AxiosPromise<HostDiscoveryResponse> {
            return localVarFp.discoverSmtpHostsApiV1DiscoverySmtpHostsPost(hostDiscoveryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Check Progress
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckProgressApiV1SmtpSessionIdCheckProgressGet(sessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<unknown> {
            return localVarFp.getCheckProgressApiV1SmtpSessionIdCheckProgressGet(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Smtp Accounts
         * @param {string} sessionId 
         * @param {string} [statusFilter] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSmtpAccountsApiV1SmtpSessionIdAccountsGet(sessionId: string, statusFilter?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<SMTPAccount>> {
            return localVarFp.listSmtpAccountsApiV1SmtpSessionIdAccountsGet(sessionId, statusFilter, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Parse SMTP list from file and return parsed accounts
         * @summary Parse Smtp List Endpoint
         * @param {File} smtpFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parseSmtpListEndpointApiV1SmtpParsePost(smtpFile: File, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.parseSmtpListEndpointApiV1SmtpParsePost(smtpFile, options).then((request) => request(axios, basePath));
        },
        /**
         * Test SMTP accounts
         * @summary Test Smtp Accounts
         * @param {SMTPTestRequest} sMTPTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSmtpAccountsApiV1SmtpTestPost(sMTPTestRequest: SMTPTestRequest, options?: RawAxiosRequestConfig): AxiosPromise<SMTPBulkTestResponse> {
            return localVarFp.testSmtpAccountsApiV1SmtpTestPost(sMTPTestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Test SMTP accounts from uploaded file
         * @summary Test Smtp Accounts From File
         * @param {File} smtpFile 
         * @param {number} [timeout] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSmtpAccountsFromFileApiV1SmtpTestFilePost(smtpFile: File, timeout?: number, options?: RawAxiosRequestConfig): AxiosPromise<SMTPBulkTestResponse> {
            return localVarFp.testSmtpAccountsFromFileApiV1SmtpTestFilePost(smtpFile, timeout, options).then((request) => request(axios, basePath));
        },
        /**
         * Update existing SMTP account.
         * @summary Update Smtp Account
         * @param {string} sessionId 
         * @param {string} accountId 
         * @param {SMTPAccountUpdate} sMTPAccountUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSmtpAccountApiV1SmtpSessionIdAccountsAccountIdPut(sessionId: string, accountId: string, sMTPAccountUpdate: SMTPAccountUpdate, options?: RawAxiosRequestConfig): AxiosPromise<SMTPAccount> {
            return localVarFp.updateSmtpAccountApiV1SmtpSessionIdAccountsAccountIdPut(sessionId, accountId, sMTPAccountUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SMTPApi - object-oriented interface
 * @export
 * @class SMTPApi
 * @extends {BaseAPI}
 */
export class SMTPApi extends BaseAPI {
    /**
     * 
     * @summary Bulk Upload Smtp
     * @param {string} sessionId 
     * @param {SMTPBulkUpload} sMTPBulkUpload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMTPApi
     */
    public bulkUploadSmtpApiV1SmtpSessionIdBulkUploadPost(sessionId: string, sMTPBulkUpload: SMTPBulkUpload, options?: RawAxiosRequestConfig) {
        return SMTPApiFp(this.configuration).bulkUploadSmtpApiV1SmtpSessionIdBulkUploadPost(sessionId, sMTPBulkUpload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check Smtp Accounts
     * @param {string} sessionId 
     * @param {number} [timeout] 
     * @param {BodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost} [bodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMTPApi
     */
    public checkSmtpAccountsApiV1SmtpSessionIdCheckPost(sessionId: string, timeout?: number, bodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost?: BodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost, options?: RawAxiosRequestConfig) {
        return SMTPApiFp(this.configuration).checkSmtpAccountsApiV1SmtpSessionIdCheckPost(sessionId, timeout, bodyCheckSmtpAccountsApiV1SmtpSessionIdCheckPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Smtp Account
     * @param {string} sessionId 
     * @param {SMTPAccountCreate} sMTPAccountCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMTPApi
     */
    public createSmtpAccountApiV1SmtpSessionIdAccountsPost(sessionId: string, sMTPAccountCreate: SMTPAccountCreate, options?: RawAxiosRequestConfig) {
        return SMTPApiFp(this.configuration).createSmtpAccountApiV1SmtpSessionIdAccountsPost(sessionId, sMTPAccountCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Smtp Account
     * @param {string} sessionId 
     * @param {string} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMTPApi
     */
    public deleteSmtpAccountApiV1SmtpSessionIdAccountsAccountIdDelete(sessionId: string, accountId: string, options?: RawAxiosRequestConfig) {
        return SMTPApiFp(this.configuration).deleteSmtpAccountApiV1SmtpSessionIdAccountsAccountIdDelete(sessionId, accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Discover SMTP hostnames via MX lookup and intelligent guessing
     * @summary Discover Smtp Hosts
     * @param {HostDiscoveryRequest} hostDiscoveryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMTPApi
     */
    public discoverSmtpHostsApiV1DiscoverySmtpHostsPost(hostDiscoveryRequest: HostDiscoveryRequest, options?: RawAxiosRequestConfig) {
        return SMTPApiFp(this.configuration).discoverSmtpHostsApiV1DiscoverySmtpHostsPost(hostDiscoveryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Check Progress
     * @param {string} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMTPApi
     */
    public getCheckProgressApiV1SmtpSessionIdCheckProgressGet(sessionId: string, options?: RawAxiosRequestConfig) {
        return SMTPApiFp(this.configuration).getCheckProgressApiV1SmtpSessionIdCheckProgressGet(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Smtp Accounts
     * @param {string} sessionId 
     * @param {string} [statusFilter] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMTPApi
     */
    public listSmtpAccountsApiV1SmtpSessionIdAccountsGet(sessionId: string, statusFilter?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return SMTPApiFp(this.configuration).listSmtpAccountsApiV1SmtpSessionIdAccountsGet(sessionId, statusFilter, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Parse SMTP list from file and return parsed accounts
     * @summary Parse Smtp List Endpoint
     * @param {File} smtpFile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMTPApi
     */
    public parseSmtpListEndpointApiV1SmtpParsePost(smtpFile: File, options?: RawAxiosRequestConfig) {
        return SMTPApiFp(this.configuration).parseSmtpListEndpointApiV1SmtpParsePost(smtpFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test SMTP accounts
     * @summary Test Smtp Accounts
     * @param {SMTPTestRequest} sMTPTestRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMTPApi
     */
    public testSmtpAccountsApiV1SmtpTestPost(sMTPTestRequest: SMTPTestRequest, options?: RawAxiosRequestConfig) {
        return SMTPApiFp(this.configuration).testSmtpAccountsApiV1SmtpTestPost(sMTPTestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test SMTP accounts from uploaded file
     * @summary Test Smtp Accounts From File
     * @param {File} smtpFile 
     * @param {number} [timeout] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMTPApi
     */
    public testSmtpAccountsFromFileApiV1SmtpTestFilePost(smtpFile: File, timeout?: number, options?: RawAxiosRequestConfig) {
        return SMTPApiFp(this.configuration).testSmtpAccountsFromFileApiV1SmtpTestFilePost(smtpFile, timeout, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update existing SMTP account.
     * @summary Update Smtp Account
     * @param {string} sessionId 
     * @param {string} accountId 
     * @param {SMTPAccountUpdate} sMTPAccountUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMTPApi
     */
    public updateSmtpAccountApiV1SmtpSessionIdAccountsAccountIdPut(sessionId: string, accountId: string, sMTPAccountUpdate: SMTPAccountUpdate, options?: RawAxiosRequestConfig) {
        return SMTPApiFp(this.configuration).updateSmtpAccountApiV1SmtpSessionIdAccountsAccountIdPut(sessionId, accountId, sMTPAccountUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

