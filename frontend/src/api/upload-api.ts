/* tslint:disable */
/* eslint-disable */
/**
 * SGPT API
 * ðŸ“§ Professional Email Marketing & IMAP Management Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosRequestConfig } from 'axios';
import axiosInstance from '@/http/axios'
import type { AxiosInstance } from 'axios'
const globalAxios: AxiosInstance = axiosInstance;
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError, operationServerMap } from './base';
// @ts-ignore
import type { HTTPValidationError } from './models';
// @ts-ignore
import type { SchemasCommonMessageResponse } from './models';
/**
 * UploadApi - axios parameter creator
 * @export
 */
export const UploadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Uploads a single file to the server.
         * @summary Upload a single file
         * @param {File} file File to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileApiV1UploadApiV1UploadFilePost: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadFileApiV1UploadApiV1UploadFilePost', 'file', file)
            const localVarPath = `/api/v1/upload/file/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploads a single file to the server.
         * @summary Upload a single file
         * @param {File} file File to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileApiV1UploadApiV1UploadFilePost_1: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadFileApiV1UploadApiV1UploadFilePost_1', 'file', file)
            const localVarPath = `/api/v1/upload/file/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploads multiple files to the server.
         * @summary Upload multiple files
         * @param {Array<File>} files Multiple files to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMultipleFilesApiV1UploadApiV1UploadFilesPost: async (files: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'files' is not null or undefined
            assertParamExists('uploadMultipleFilesApiV1UploadApiV1UploadFilesPost', 'files', files)
            const localVarPath = `/api/v1/upload/files/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploads multiple files to the server.
         * @summary Upload multiple files
         * @param {Array<File>} files Multiple files to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMultipleFilesApiV1UploadApiV1UploadFilesPost_2: async (files: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'files' is not null or undefined
            assertParamExists('uploadMultipleFilesApiV1UploadApiV1UploadFilesPost_2', 'files', files)
            const localVarPath = `/api/v1/upload/files/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadApi - functional programming interface
 * @export
 */
export const UploadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadApiAxiosParamCreator(configuration)
    return {
        /**
         * Uploads a single file to the server.
         * @summary Upload a single file
         * @param {File} file File to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFileApiV1UploadApiV1UploadFilePost(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemasCommonMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFileApiV1UploadApiV1UploadFilePost(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.uploadFileApiV1UploadApiV1UploadFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Uploads a single file to the server.
         * @summary Upload a single file
         * @param {File} file File to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFileApiV1UploadApiV1UploadFilePost_1(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemasCommonMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFileApiV1UploadApiV1UploadFilePost_1(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.uploadFileApiV1UploadApiV1UploadFilePost_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Uploads multiple files to the server.
         * @summary Upload multiple files
         * @param {Array<File>} files Multiple files to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadMultipleFilesApiV1UploadApiV1UploadFilesPost(files: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemasCommonMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadMultipleFilesApiV1UploadApiV1UploadFilesPost(files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.uploadMultipleFilesApiV1UploadApiV1UploadFilesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Uploads multiple files to the server.
         * @summary Upload multiple files
         * @param {Array<File>} files Multiple files to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadMultipleFilesApiV1UploadApiV1UploadFilesPost_2(files: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemasCommonMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadMultipleFilesApiV1UploadApiV1UploadFilesPost_2(files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.uploadMultipleFilesApiV1UploadApiV1UploadFilesPost_2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UploadApi - factory interface
 * @export
 */
export const UploadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadApiFp(configuration)
    return {
        /**
         * Uploads a single file to the server.
         * @summary Upload a single file
         * @param {File} file File to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileApiV1UploadApiV1UploadFilePost(file: File, options?: RawAxiosRequestConfig): AxiosPromise<SchemasCommonMessageResponse> {
            return localVarFp.uploadFileApiV1UploadApiV1UploadFilePost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * Uploads a single file to the server.
         * @summary Upload a single file
         * @param {File} file File to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileApiV1UploadApiV1UploadFilePost_1(file: File, options?: RawAxiosRequestConfig): AxiosPromise<SchemasCommonMessageResponse> {
            return localVarFp.uploadFileApiV1UploadApiV1UploadFilePost_1(file, options).then((request) => request(axios, basePath));
        },
        /**
         * Uploads multiple files to the server.
         * @summary Upload multiple files
         * @param {Array<File>} files Multiple files to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMultipleFilesApiV1UploadApiV1UploadFilesPost(files: Array<File>, options?: RawAxiosRequestConfig): AxiosPromise<SchemasCommonMessageResponse> {
            return localVarFp.uploadMultipleFilesApiV1UploadApiV1UploadFilesPost(files, options).then((request) => request(axios, basePath));
        },
        /**
         * Uploads multiple files to the server.
         * @summary Upload multiple files
         * @param {Array<File>} files Multiple files to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMultipleFilesApiV1UploadApiV1UploadFilesPost_2(files: Array<File>, options?: RawAxiosRequestConfig): AxiosPromise<SchemasCommonMessageResponse> {
            return localVarFp.uploadMultipleFilesApiV1UploadApiV1UploadFilesPost_2(files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UploadApi - object-oriented interface
 * @export
 * @class UploadApi
 * @extends {BaseAPI}
 */
export class UploadApi extends BaseAPI {
    /**
     * Uploads a single file to the server.
     * @summary Upload a single file
     * @param {File} file File to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public uploadFileApiV1UploadApiV1UploadFilePost(file: File, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).uploadFileApiV1UploadApiV1UploadFilePost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uploads a single file to the server.
     * @summary Upload a single file
     * @param {File} file File to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public uploadFileApiV1UploadApiV1UploadFilePost_1(file: File, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).uploadFileApiV1UploadApiV1UploadFilePost_1(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uploads multiple files to the server.
     * @summary Upload multiple files
     * @param {Array<File>} files Multiple files to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public uploadMultipleFilesApiV1UploadApiV1UploadFilesPost(files: Array<File>, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).uploadMultipleFilesApiV1UploadApiV1UploadFilesPost(files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uploads multiple files to the server.
     * @summary Upload multiple files
     * @param {Array<File>} files Multiple files to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public uploadMultipleFilesApiV1UploadApiV1UploadFilesPost_2(files: Array<File>, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).uploadMultipleFilesApiV1UploadApiV1UploadFilesPost_2(files, options).then((request) => request(this.axios, this.basePath));
    }
}

